<?php

function getFieldTypeMap() {
    // Put :normal last so it gets preserved by array_flip. This makes
    // it much easier for modules (such as schema.module) to map
    // database types back into schema types.
    // $map does not use drupal_static as its value never changes.
    static $map = array(
      'varchar:normal' => 'varchar',
      'char:normal' => 'character',

      'text:tiny' => 'text',
      'text:small' => 'text',
      'text:medium' => 'text',
      'text:big' => 'text',
      'text:normal' => 'text',

      'int:tiny' => 'smallint',
      'int:small' => 'smallint',
      'int:medium' => 'int',
      'int:big' => 'bigint',
      'int:normal' => 'int',

      'float:tiny' => 'real',
      'float:small' => 'real',
      'float:medium' => 'real',
      'float:big' => 'double precision',
      'float:normal' => 'real',

      'numeric:normal' => 'numeric',

      'blob:big' => 'bytea',
      'blob:normal' => 'bytea',

      'serial:tiny' => 'serial',
      'serial:small' => 'serial',
      'serial:medium' => 'serial',
      'serial:big' => 'bigserial',
      'serial:normal' => 'serial',

      'json:normal' => 'json',
      'jsonb:normal' => 'jsonb',
      );
    return $map;
  }

function tpps_install(){
    
    $tables = array(
      'project',
      'contact',
      'pub',
      'study',
      'pubauthor',
      'projectprop',
      'organism',
      'studyprop',
      'stock',
      'stockprop',
      'phenotypeprop',
      'phenotype',
      'dbxref',
      'project_dbxref',
      'feature',
      'featureloc',
      'feature_genotype',
      'feature_dbxref',
      'genotype',
      'genotype_call',
      //'stock_phenotype',
    );
    
    foreach ($tables as $table){
        $temp_table = "chado.tpps_$table";
        $primary_key = $table . "_id";
        $table = "chado.$table";
        
        $insert_fields = array();
        $is_primary_key = TRUE;
        
        $results = db_select($table, 't')
            ->fields('t')
            ->orderBy($primary_key, 'DESC')
            ->range(0, 1)
            ->execute()
            ->fetchAssoc();
        
        //print_r($table);
        print_r($results);
        if ($results){
            $default_fields = array();
            foreach($results as $field => $value){

                if ($value == ''){
                    array_push($default_fields, $field);
                    $value = NULL;
                }
                else {
                    if ($is_primary_key){
                        $insert_fields["tpps_$field"] = $value;
                        $is_primary_key = FALSE;
                    }
                    else{
                        $insert_fields[$field] = $value;
                    }
                }
                //print_r("$field => $value");
                //print_r("\nnext field\n");
            }
            
            $insert = db_insert($temp_table)
                ->useDefaults($default_fields)
                ->fields($insert_fields)
                ->execute();
        }
        
        $results = db_select($temp_table, 't')
            ->fields('t')
            ->execute()
            ->fetchAssoc();
        
        print_r("\n$table : $temp_table\n");
        print_r($results);
        //break;
    }
    
}

function tpps_schema(){
    
    $schema['chado.tpps_project'] = array(
      'description' => 'Temporary version of {chado.project} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_project_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'name' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'description' => array(
          'description' => '',
          'type' => 'text',
        )
      ),
      'primary key' => array(
        'tpps_project_id'
      ),
      'unique keys' => array(
        'c1' => array(
          'name'
        )
      )
    );
    
    $schema ['chado.tpps_contact'] = array(
      'description' => 'Temporary version of {chado.contact} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_contact_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'type_id' => array(
          'description' => 'What type of contact is this?  E.g. "person", "lab".',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'name' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'description' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255,
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'name'
        )
      ),
        //DRUPAL DOES NOT SUPPORT FOREIGN KEYS: THIS SECTION IS PURELY 
        //FOR DOCUMENTATION PURPOSES. SEE
        //https://api.drupal.org/api/drupal/includes!database!schema.inc/group/schemaapi/7.x
        //FOR DETAILS
      'foreign keys' => array(
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_contact_id'
      )
    );
    
    $schema['chado.tpps_pub'] = array(
      'description' => 'Temporary version of {chado.pub} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_pub_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'title' => array(
          'description' => 'Descriptive general heading.',
          'type' => 'text',
        ),
        'volumetitle' => array(
          'description' => 'Title of part if one of a series.',
          'type' => 'text',
        ),
        'volume' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255,
        ),
        'series_name' => array(
          'description' => 'Full name of (journal) series',
          'type' => 'varchar',
          'length' => 255,
        ),
        'issue' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        ),
        'pyear' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        ),
        'pages' => array(
          'description' => 'Page number range[s], e.g. 457--459, viii + 664pp, lv--lvii.',
          'type' => 'varchar',
          'length' => 255
        ),
        'miniref' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        ),
        'uniquename' => array(
          'description' => '',
          'type' => 'text',
          'not null' => TRUE,
        ),
        'type_id' => array(
          'description' => 'The type of the publication (book, journal, poem, graffiti, etc). Uses pub cv.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'is_obsolete' => array(
          'description' => '',
          'pgsql_type' => 'bool',
          'default' => 'false'
        ),
        'publisher' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        ),
        'pubplace' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'uniquename'
        )
      ),
      'foreign keys' => array(
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_pub_id'
      )
    );
    
    $schema['chado.tpps_study'] = array(
      'description' => 'Temporary version of {chado.study} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_study_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'contact_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
        ),
        'pub_id' => array(
          'description' => '',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'dbxref_id' => array(
          'description' => '',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'name' => array(
          'description' => '',
          'type' => 'text',
          'not null' => TRUE
        ),
        'description' => array(
          'description' => '',
          'type' => 'text'
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'name'
        )
      ),
      'foreign keys' => array(
        'contact_id' => array(
          'table' => 'chado.contact',
          'columns' => array(
            'contact_id' => 'contact_id'
          )
        ),
        'dbxref_id' => array(
          'table' => 'chado.dbxref',
          'columns' => array(
            'dbxref_id' => 'dbxref_id'
          )
        ),
        'pub_id' => array(
          'table' => 'chado.pub',
          'columns' => array(
            'pub_id' => 'pub_id'
          )
        ),
      ),
      'primary key' => array(
        'tpps_study_id'
      )
    );
    
    $schema['chado.tpps_pubauthor'] = array(
      'description' => 'Temporary version of {chado.pubauthor} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_pubauthor_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'pub_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'rank' => array(
          'description' => 'Order of author in author list for this pub - order is important.',
          'type' => 'int',
          'not null' => TRUE
        ),
        'editor' => array(
          'description' => 'Indicates whether the author is an editor for linked publication. Note: this is a boolean field but does not follow the normal chado convention for naming booleans.',
          'pgsql_type' => 'bool',
          'default' => 'false'
        ),
        'surname' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 100,
          'not null' => TRUE
        ),
        'givennames' => array(
          'description' => 'First name, initials',
          'type' => 'varchar',
          'length' => 100
        ),
        'suffix' => array(
          'description' => 'Jr., Sr., etc',
          'type' => 'varchar',
          'length' => 100
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'pub_id',
          'rank'
        )
      ),
      'foreign keys' => array(
        'pub_id' => array(
          'table' => 'chado.pub',
          'columns' => array(
            'pub_id' => 'pub_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_pubauthor_id'
      )
    );
    
    $schema['chado.tpps_projectprop'] = array(
      'description' => 'Temporary version of {chado.projectprop} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_projectprop_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'project_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'type_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'value' => array(
          'description' => '',
          'type' => 'text',
        ),
        'rank' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0
        ),
      ),
      'unique keys' => array(
        'c1' => array(
          'project_id',
          'type_id',
          'rank'
        )
      ),
      'foreign keys' => array(
        'project_id' => array(
          'table' => 'chado.project',
          'columns' => array(
            'project_id' => 'project_id'
          )
        ),
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_projectprop_id'
      )
    );
    
    $schema['chado.tpps_organism'] = array(
      'description' => 'Temporary version of {chado.organism} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_organism_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'abbreviation' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        ),
        'genus' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE
        ),
        'species' => array(
          'description' => 'A type of organism is always uniquely identified by genus and species. When mapping from the NCBI taxonomy names.dmp file, this column must be used where it is present, as the common_name column is not always unique (e.g. environmental samples). If a particular strain or subspecies is to be represented, this is appended onto the species name. Follows standard NCBI taxonomy pattern.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE
        ),
        'common_name' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255
        ),
        'infraspecific_name' => array(
          'description' => 'The scientific name for any taxon below the rank of species.  The rank should be specified using the type_id field and the name is provided here.',
          'type' => 'varchar',
          'length' => 1024
        ),
        'type_id' => array(
          'description' => 'A controlled vocabulary term that specifies the organism rank below species. It is used when an infraspecific name is provided.  Ideally, the rank should be a valid ICN name such as subspecies, varietas, subvarietas, forma and subforma.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'comment' => array(
          'description' => '',
          'type' => 'text'
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'genus',
          'species',
          'type_id',
          'infraspecific_name'
        )
      ),
      'foreign keys' => array(
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_organism_id'
      )
    );
    
    $schema['chado.tpps_studyprop'] = array(
      'description' => 'Temporary version of {chado.studyprop} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_studyprop_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'study_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'type_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'value' => array(
          'description' => '',
          'type' => 'text'
        ),
        'rank' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0
        )
      ),
      'unique keys' => array(
        'study_id_type_id_rank' => array(
          'study_id',
          'type_id',
          'rank'
        )
      ),
      'foreign keys' => array(
        'study_id' => array(
          'table' => 'chado.study',
          'columns' => array(
            'study_id' => 'study_id'
          )
        ),
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_studyprop_id'
      )
    );
    
    $schema['chado.tpps_stock'] = array(
      'description' => 'Temporary version of {chado.stock} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_stock_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'dbxref_id' => array(
          'description' => 'The dbxref_id is an optional primary stable identifier for this stock. Secondary indentifiers and external dbxrefs go in table: stock_dbxref.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'organism_id' => array(
          'description' => 'The organism_id is the organism to which the stock belongs. This column should only be left blank if the organism cannot be determined.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'name' => array(
          'description' => 'The name is a human-readable local name for a stock.',
          'type' => 'varchar',
          'length' => 255
        ),
        'uniquename' => array(
          'description' => '',
          'type' => 'text',
          'not null' => TRUE
        ),
        'description' => array(
          'description' => 'The description is the genetic description provided in the stock list.',
          'type' => 'text'
        ),
        'type_id' => array(
          'description' => 'The type_id foreign key links to a controlled vocabulary of stock types. The would include living stock, genomic DNA, preserved specimen. Secondary cvterms for stocks would go in stock_cvterm.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'is_obsolete' => array(
          'description' => '',
          'pgsql_type' => 'bool',
          'not null' => TRUE,
          'default' => 'false'
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'organism_id',
          'uniquename',
          'type_id'
        )
      ),
      'foreign keys' => array(
        'dbxref_id' => array(
          'table' => 'chado.dbxref',
          'columns' => array(
            'dbxref_id' => 'dbxref_id'
          )
        ),
        'organism_id' => array(
          'table' => 'chado.organism',
          'columns' => array(
            'organism_id' => 'organism_id'
          )
        ),
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_stock_id'
      )
    );
    
    $schema['chado.tpps_stockprop'] = array(
      'description' => 'Temporary version of {chado.stockprop} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_stockprop_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'stock_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'type_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'value' => array(
          'description' => '',
          'type' => 'text'
        ),
        'rank' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'stock_id',
          'type_id',
          'rank'
        )
      ),
      'foreign keys' => array(
        'stock_id' => array(
          'table' => 'chado.stock',
          'columns' => array(
            'stock_id' => 'stock_id'
          )
        ),
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_stockprop_id'
      )
    );
    
    $schema['chado.tpps_phenotypeprop'] = array(
      'description' => 'Temporary version of {chado.phenotypeprop} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_phenotypeprop_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'phenotype_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'type_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'value' => array(
          'description' => '',
          'type' => 'text'
        ),
        'rank' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'phenotype_id',
          'type_id',
          'rank'
        )
      ),
      'foreign keys' => array(
        'phenotype_id' => array(
          'table' => 'chado.phenotype',
          'columns' => array(
            'phenotype_id' => 'phenotype_id'
          )
        ),
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_phenotypeprop_id'
      )
    );
    
    $schema['chado.tpps_phenotype'] = array(
      'description' => 'Temporary version of {chado.phenotype} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_phenotype_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'uniquename' => array(
          'description' => '',
          'type' => 'text',
          'not null' => TRUE
        ),
        'name' => array(
          'description' => '',
          'type' => 'text'
        ),
        'observable_id' => array(
          'description' => 'The entity: e.g. anatomy_part, biological_process.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'attr_id' => array(
          'description' => 'Phenotypic attribute (quality, property, attribute, character) - drawn from PATO.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'value' => array(
          'description' => 'Value of attribute - unconstrained free text. Used only if cvalue_id is not appropriate.',
          'type' => 'text'
        ),
        'cvalue_id' => array(
          'description' => 'Phenotype attribute value (state).',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'assay_id' => array(
          'description' => 'Evidence type.',
          'type' => 'int',
          'unsigned' => TRUE
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'uniquename'
        )
      ),
      'foreign keys' => array(
        'assay_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'assay_id'
          )
        ),
        'attr_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'attr_id'
          )
        ),
        'cvalue_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'cvalue_id'
          )
        ),
        'observable_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'observable_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_phenotype_id'
      )
    );
    
    $schema['chado.tpps_dbxref'] = array(
      'description' => 'Temporary version of {chado.dbxref} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_dbxref_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'db_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'accession' => array(
          'description' => 'The local part of the identifier. Guaranteed by the db authority to be unique for that db.',
          'type' => 'varchar',
          'length' => 1024,
          'not null' => TRUE
        ),
        'version' => array(
          'description' => '',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => ""
        ),
        'description' => array(
          'description' => '',
          'type' => 'text'
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'db_id',
          'accession',
          'version'
        )
      ),
      'foreign keys' => array(
        'db_id' => array(
          'table' => 'chado.db',
          'columns' => array(
            'db_id' => 'db_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_dbxref_id'
      )
    );
    
    
    $schema['chado.tpps_project_dbxref'] = array(
      'description' => 'Temporary version of {chado.project_dbxref} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_project_dbxref_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'project_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'dbxref_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'is_current' => array(
          'description' => 'The is_current boolean indicates whether the linked dbxref is the current -official- dbxref for the linked project.',
          'pgsql_type' => 'bool',
          'not null' => TRUE,
          'default' => 'true'
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'project_id',
          'dbxref_id'
        )
      ),
      'foreign keys' => array(
        'dbxref_id' => array(
          'table' => 'dbxref',
          'columns' => array(
            'dbxref_id' => 'dbxref_id'
          )
        ),
        'project_id' => array(
          'table' => 'project',
          'columns' => array(
            'project_id' => 'project_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_project_dbxref_id'
      )
    );
    
    $schema['chado.tpps_stock_phenotype'] = array(
      'description' => 'Temporary version of {chado.stock_phenotype} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'stock_id' => array(
          'description' => '',
          'type' => 'int'
        ),
        'phenotype_id' => array(
          'description' => '',
          'type' => 'int'
        )
      )
    );
    
    $schema['chado.tpps_feature'] = array(
      'description' => 'Temporary version of {chado.feature} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_feature_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'dbxref_id' => array(
          'description' => 'An optional primary public stable identifier for this feature. Secondary identifiers and external dbxrefs go in the table feature_dbxref.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'organism_id' => array(
          'description' => 'The organism to which this feature belongs. This column is mandatory.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'name' => array(
          'description' => 'The optional human-readable common name for a feature, for display purposes.',
          'type' => 'varchar',
          'length' => 255
        ),
        'uniquename' => array(
          'description' => 'The unique name for a feature; may not be necessarily be particularly human-readable, although this is preferred. This name must be unique for this type of feature within this organism.',
          'type' => 'text',
          'not null' => TRUE
        ),
        'residues' => array(
          'description' => 'A sequence of alphabetic characters representing biological residues (nucleic acids, amino acids). This column does not need to be manifested for all features; it is optional for features such as exons where the residues can be derived from the featureloc. It is recommended that the value for this column be manifested for features which may may non-contiguous sublocations (e.g. transcripts), since derivation at query time is non-trivial. For expressed sequence, the DNA sequence should be used rather than the RNA sequence. The default storage method for the residues column is EXTERNAL, which will store it uncompressed to make substring operations faster.',
          'type' => 'text'
        ),
        'seqlen' => array(
          'description' => 'The length of the residue feature. See column:residues. This column is partially redundant with the residues column, and also with featureloc. This column is required because the location may be unknown and the residue sequence may not be manifested, yet it may be desirable to store and query the length of the feature. The seqlen should always be manifested where the length of the sequence is known.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'md5checksum' => array(
          'description' => 'The 32-character checksum of the sequence, calculated using the MD5 algorithm. This is practically guaranteed to be unique for any feature. This column thus acts as a unique identifier on the mathematical sequence.',
          'type' => 'varchar',
          'length' => 32
        ),
        'type_id' => array(
          'description' => 'A required reference to a table:cvterm giving the feature type. This will typically be a Sequence Ontology identifier. This column is thus used to subclass the feature table.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'is_analysis' => array(
          'description' => 'Boolean indicating whether this feature is annotated or the result of an automated analysis. Analysis results also use the companalysis module. Note that the dividing line between analysis and annotation may be fuzzy, this should be determined on a per-project basis in a consistent manner. One requirement is that there should only be one non-analysis version of each wild-type gene feature in a genome, whereas the same gene feature can be predicted multiple times in different analyses.',
          'pgsql_type' => 'bool',
          'default' => 'false',
          'not null' => TRUE
        ),
        'is_obsolete' => array(
          'description' => 'Boolean indicating whether this feature has been obsoleted. Some chado instances may choose to simply remove the feature altogether, others may choose to keep an obsolete row in the table.',
          'pgsql_type' => 'bool',
          'default' => 'false',
          'not null' => TRUE
        ),
        'timeaccessioned' => array(
          'description' => 'For handling object accession or modification timestamps (as opposed to database auditing data, handled elsewhere). The expectation is that these fields would be available to software interacting with chado.',
          'pgsql_type' => 'timestamp',
          'not null' => TRUE,
        ),
        'timelastmodified' => array(
          'description' => 'For handling object accession or modification timestamps (as opposed to database auditing data, handled elsewhere). The expectation is that these fields would be available to software interacting with chado.',
          'pgsql_type' => 'timestamp',
          'not null' => TRUE,
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'organism_id',
          'uniquename',
          'type_id'
        )
      ),
      'foreign keys' => array(
        'dbxref_id' => array(
          'table' => 'chado.dbxref',
          'columns' => array(
            'dbxref_id' => 'dbxref_id'
          )
        ),
        'organism_id' => array(
          'table' => 'chado.organism',
          'columns' => array(
            'organism_id' => 'organism_id'
          )
        ),
        'type_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_feature_id'
      )
    );
    
    $schema['chado.tpps_featureloc'] = array(
      'description' => 'Temporary version of {chado.featureloc} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_featureloc_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'feature_id' => array(
          'description' => 'The feature that is being located. Any feature can have zero or more featurelocs.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'srcfeature_id' => array(
          'description' => 'The source feature which this location is relative to. Every location is relative to another feature (however, this column is nullable, because the srcfeature may not be known). All locations are -proper- that is, nothing should be located relative to itself. No cycles are allowed in the featureloc graph.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'fmin' => array(
          'description' => 'The leftmost/minimal boundary in the linear range represented by the featureloc. Sometimes (e.g. in Bioperl) this is called -start- although this is confusing because it does not necessarily represent the 5-prime coordinate. Important: This is space-based (interbase) coordinates, counting from zero. To convert this to the leftmost position in a base-oriented system (eg GFF, Bioperl), add 1 to fmin.',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'is_fmin_partial' => array(
          'description' => 'This is typically false, but may be true if the value for column:fmin is inaccurate or the leftmost part of the range is unknown/unbounded.',
          'pgsql_type' => 'bool',
          'not null' => TRUE,
          'default' => 'false'
        ),
        'fmax' => array(
          'description' => 'The rightmost/maximal boundary in the linear range represented by the featureloc. Sometimes (e.g. in bioperl) this is called -end- although this is confusing because it does not necessarily represent the 3-prime coordinate. Important: This is space-based (interbase) coordinates, counting from zero. No conversion is required to go from fmax to the rightmost coordinate in a base-oriented system that counts from 1 (e.g. GFF, Bioperl).',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'is_fmax_partial' => array(
          'description' => 'This is typically false, but may be true if the value for column:fmax is inaccurate or the rightmost part of the range is unknown/unbounded.',
          'pgsql_type' => 'bool',
          'not null' => TRUE,
          'default' => 'false'
        ),
        'strand' => array(
          'description' => 'The orientation/directionality of the location. Should be 0, -1 or +1.',
          'pgsql_type' => 'smallint',
        ),
        'phase' => array(
          'description' => 'Phase of translation with respect to srcfeature_id. Values are 0, 1, 2. It may not be possible to manifest this column for some features such as exons, because the phase is dependant on the spliceform (the same exon can appear in multiple spliceforms). This column is mostly useful for predicted exons and CDSs.',
          'type' => 'int'
        ),
        'residue_info' => array(
          'description' => 'Alternative residues, when these differ from feature.residues. For instance, a SNP feature located on a wild and mutant protein would have different alternative residues. for alignment/similarity features, the alternative residues is used to represent the alignment string (CIGAR format). Note on variation features; even if we do not want to instantiate a mutant chromosome/contig feature, we can still represent a SNP etc with 2 locations, one (rank 0) on the genome, the other (rank 1) would have most fields null, except for alternative residues.',
          'type' => 'text'
        ),
        'locgroup' => array(
          'description' => 'This is used to manifest redundant, derivable extra locations for a feature. The default locgroup=0 is used for the DIRECT location of a feature. Important: most Chado users may never use featurelocs WITH logroup > 0. Transitively derived locations are indicated with locgroup > 0. For example, the position of an exon on a BAC and in global chromosome coordinates. This column is used to differentiate these groupings of locations. The default locgroup 0 is used for the main or primary location, from which the others can be derived via coordinate transformations. Another example of redundant locations is storing ORF coordinates relative to both transcript and genome. Redundant locations open the possibility of the database getting into inconsistent states; this schema gives us the flexibility of both warehouse instantiations with redundant locations (easier for querying) and management instantiations with no redundant locations. An example of using both locgroup and rank: imagine a feature indicating a conserved region between the chromosomes of two different species. We may want to keep redundant locations on both contigs and chromosomes. We would thus have 4 locations for the single conserved region feature - two distinct locgroups (contig level and chromosome level) and two distinct ranks (for the two species).',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0
        ),
        'rank' => array(
          'description' => 'Used when a feature has >1 location, otherwise the default rank 0 is used. Some features (e.g. blast hits and HSPs) have two locations - one on the query and one on the subject. Rank is used to differentiate these. Rank=0 is always used for the query, Rank=1 for the subject. For multiple alignments, assignment of rank is arbitrary. Rank is also used for sequence_variant features, such as SNPs. Rank=0 indicates the wildtype (or baseline) feature, Rank=1 indicates the mutant (or compared) feature.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'feature_id',
          'locgroup',
          'rank'
        )
      ),
      'foreign keys' => array(
        'feature_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'feature_id'
          )
        ),
        'srcfeature_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'srcfeature_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_featureloc_id'
      )
    );
    
    $schema['chado.tpps_feature_dbxref'] = array(
      'description' => 'Temporary version of {chado.feature_dbxref} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_feature_dbxref_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'feature_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'dbxref_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'is_current' => array(
          'description' => 'True if this secondary dbxref is the most up to date accession in the corresponding db. Retired accessions should set this field to false',
          'pgsql_type' => 'bool',
          'not null' => TRUE,
          'default' => 'true'
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'feature_id',
          'dbxref_id'
        )
      ),
      'foreign keys' => array(
        'dbxref_id' => array(
          'table' => 'chado.dbxref',
          'columns' => array(
            'dbxref_id' => 'dbxref_id'
          )
        ),
        'feature_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'feature_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_feature_dbxref_id'
      )
    );
    
    
    $schema['chado.tpps_feature_genotype'] = array(
      'description' => 'Temporary version of {chado.feature_genotype} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_feature_genotype_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'feature_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'genotype_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'chromosome_id' => array(
          'description' => 'A feature of SO type "chromosome".',
          'type' => 'int',
          'unsigned' => TRUE
        ),
        'rank' => array(
          'description' => 'rank can be used for n-ploid organisms or to preserve order.',
          'type' => 'int',
          'not null' => TRUE
        ),
        'cgroup' => array(
          'description' => 'Spatially distinguishable group. group can be used for distinguishing the chromosomal groups, for example (RNAi products and so on can be treated as different groups, as they do not fall on a particular chromosome).',
          'type' => 'int',
          'not null' => TRUE
        ),
        'cvterm_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'feature_id',
          'genotype_id',
          'cvterm_id',
          'chromosome_id',
          'rank',
          'cgroup'
        )
      ),
      'foreign keys' => array(
        'chromosome_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'chromosome_id'
          )
        ),
        'cvterm_id' => array(
          'table' => 'chado.cvterm',
          'columns' => array(
            'cvterm_id' => 'cvterm_id'
          )
        ),
        'feature_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'feature_id'
          )
        ),
        'genotype_id' => array(
          'table' => 'chado.genotype',
          'columns' => array(
            'genotype_id' => 'genotype_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_feature_genotype_id'
      )
    );
    
    $schema['chado.tpps_genotype'] = array(
      'description' => 'Temporary version of {chado.genotype} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_genotype_id' => array(
          'description' => '',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'name' => array(
          'description' => 'Optional alternative name for a genotype, for display purposes.',
          'type' => 'text'
        ),
        'uniquename' => array(
          'description' => 'The unique name for a genotype; typically derived from the features making up the genotype.',
          'type' => 'text',
          'not null' => TRUE
        ),
        'description' => array(
          'description' => '',
          'type' => 'text'
        ),
        'type_id' => array(
          'description' => '',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        )
      ),
      'unique keys' => array(
        'c1' => array(
          'uniquename'
        )
      ),
      'foreign keys' => array(
        'type_id' => array(
          'table' => 'chaod.cvterm',
          'columns' => array(
            'cvterm_id' => 'type_id'
          )
        )
      ),
      'primary key' => array(
        'tpps_genotype_id'
      )
    );
    
    $schema['chado.tpps_genotype_call'] = array(
      'description' => 'Temporary version of {chado.genotype_call} table for pending or incomplete TPPS submissions.',
      'fields' => array(
        'tpps_genotype_call_id' => array(
          'description' => 'The primary key',
          'pgsql_type' => 'bigserial',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'variant_id' => array(
          'description' => 'Links to the feature describing the loci with variation.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'marker_id' => array(
          'description' => 'Links to the feature describing the marker.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
        ),
        'genotype_id' => array(
          'description' => 'Links to the allele call.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'project_id' => array(
          'description' => 'Links to the project grouping calls from a single analysis.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'stock_id' => array(
          'description' => 'Links to the DNA stock assayed by the marker.',
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE
        ),
        'meta_data' => array(
          'description' => 'JSON storage of any addition meta-data for the call.',
          'pgsql_type' => 'json'
        )
      ),
      'foreign keys' => array(
        'genotype_id' => array(
          'table' => 'chado.genotype',
          'columns' => array(
            'genotype_id' => 'genotype_id'
          )
        ),
        'marker_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'marker_id'
          )
        ),
        'project_id' => array(
          'table' => 'chado.project',
          'columns' => array(
            'project_id' => 'project_id'
          )
        ),
        'stock_id' => array(
          'table' => 'chado.stock',
          'columns' => array(
            'stock_id' => 'stock_id'
          )
        ),
        'variant_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'feature_id' => 'variant_id'
          )
        )
      ),
      'primary_key' => array(
        'tpps_genotype_call_id'
      )
    );
    
    return $schema;
}