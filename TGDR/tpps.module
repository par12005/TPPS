<?php

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['master'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_master'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'tpps_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['genus/autocomplete'] = array(
      'title' => 'Autocomplete for genus',
      'page callback' => '_genus_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => '_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
	
	
	/******************************************
	This creates a URL for processing Excel header columns
	It's AJAX but our very own. It returns a json array with the columns
	*******************************************/	    
	$items['master/get-excel-header-columns-and-sample-rows'] = array(
		'page callback' => 'ajax_get_excel_header_columns_and_sample_rows',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	
    return $items;
}

function tpps_ajaxCallHandler() {

    global $user;

    if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'my secret value' . $user->uid)) {
        return MENU_ACCESS_DENIED;
    }

    echo "Hello, " . filter_xss($_GET['name']) . "!";
}

/******************************************
This processes Excel header columns
It's AJAX but our very own. It returns a json array
*******************************************/	  
function ajax_get_excel_header_columns_and_sample_rows($file_location) {

	$results = array();
	$file_location = filter_xss($file_location);
	  
	global $base_url;
	//Replace $base_url with DRUPAL_ROOT
	$file_location = str_ireplace('|', '/', $file_location);
	$file_location = DRUPAL_ROOT . $file_location; //this should contain the file_location path

	//Process FILE using the excel parser - TODO
	//$results['file_location'] = $file_location;
	$results_content = parse_xlsx_headers_and_sample_rows($file_location);
	
	//print_r($file_location);
	//print_r($results_content);
	//$results = $results_content['headers'];
	
	drupal_json_output($results_content);
}

function tpps_master_add_excel_load_js() {
	global $base_url;
	
	
	/******************************************
	Javascript process excel file data (JS)
	Oh yeah, it get's rather messy, thanks to the lack of
	documentation on manage_file api, I had to do this...
	*******************************************/
	
	$js = "
			//id_of_managed_file - this is the managed_file form element CSS id
			//id_of_column_textfield - this is a next textarea which holds column headers and all additional dynamic elements via this js function
			//id_prefix is utilized for the semi dynamic names of each column selection element
			//column_names are the column names of each valid column contextual to our needs, this is NOT the excel sheet columns
			//             but rather the columns we are trying to fill. This is also based on id.
			function load_excel_header_columns_and_sample_rows(id_of_managed_file, id_of_column_textfield, id_prefix, column_names) {
				//genus = jQuery('#helper_genus_genus_select_' + index).val();
				//window.alert(genus);	

				managed_file_element = document.getElementById(id_of_managed_file);
				if(managed_file_element == 'undefined') {
					window.alert('Could not find the id of the managed file, please contact administrator');
					return;
				}
				a_elements = managed_file_element.getElementsByTagName('a');
				if(a_elements[0] == null) {
					window.alert('You must upload a file before you can populate column data!');
					textfield_element = document.getElementById(id_of_column_textfield);
					textfield_element.value = '';
					return;
				}
				else {
					//window.alert(a_elements[0]);
					//window.alert(a_elements[0].href);
					base_url = '$base_url';
					link = a_elements[0].href;
					link = link.split(base_url).join('');
					link = link.split('/').join('|');
					//window.alert(link);
				}

				jQuery.getJSON('$base_url/master/get-excel-header-columns-and-sample-rows/' +  link, function( data ) {
					//window.alert(data);


					var items = [];
					//items.push('- Select Species -');
					textfield_element = document.getElementById(id_of_column_textfield);
					jQuery.each(data['headers'], function( key, val ) {
						//console.log(key); 
						//if(key != '') {
							items.push(key + ',' + val); //concat as a CSV key,val record
							//window.alert(key + ':' + val);
							textfield_element.value = textfield_element.value + val + ','; 							
						//}
					});
				
					//This processes the suffixes of the ids of each select item specified as CSV values
					var id_suffixes = column_names;
					var suffixes = id_suffixes.split(','); //get individual values by splitting by commas
					var suffixes_count = suffixes.length;
					var items_count = items.length;
					
					//Generate the options list which contains all columns
					item_options = '';
					item_options = item_options +  '<option>Select column</option>';
					for(j=0; j<items_count; j++) {
						item_comma_parts = items[j].split(',');
						//window.alert(item_comma_parts);
						
						item_options = item_options + '<option value=\'' + item_comma_parts[1] + '\'>'  + item_comma_parts[1] +  '</option>';

					}
					//window.alert(item_options);
					
					
					for (i=0; i<suffixes_count; i++) {
						//window.alert(id_prefix + '-' + suffixes[i]);
						//console.log(id_prefix + '-' + suffixes[i]);
						var select_element = document.getElementById(id_prefix + '-' + suffixes[i]);
						//window.alert(select_element);
						select_element.innerHTML = item_options;
					}
					
					//Process Rows
					var row_count = 0;
					var sample_table = '<h3>Sample data detected</h3><table><thead>';
					
					jQuery.each(data['headers'], function( key, val ) {
						//console.log(key); 
						sample_table = sample_table + '<td>' + val + '</td>'; 
					});					
					
					sample_table = sample_table + '</thead>';
					sample_table = sample_table + '<tbody>';
					jQuery.each(data['rows'], function( index ) {
						//window.alert(index);
						//window.alert(data['rows'][row_count]);
						sample_table = sample_table + '<tr>';
						jQuery.each(data['rows'][row_count], function (key, val) {
							//window.alert(val);
							sample_table = sample_table + '<td>' + val + '</td>';
						});
						row_count = row_count + 1;
						sample_table = sample_table + '</tr>';
					});					
					sample_table = sample_table + '</tbody></table>';
					
					table = document.getElementById(id_prefix + '-sample-data');
					table.innerHTML = sample_table;
				});
			}	
	";
	
	drupal_add_js($js, 'inline');
}

function tpps_compare_temp($table, $column, $is_primary = FALSE, array $condition = array()){
    
    /*  A function to compare the max value in a temp table to the max value in a public table
     *  $is_primary denotes whether or not the $column being compared is the primary key, default false
     *  $condition is optional, if provided is passed into condition() when the function is looking for the max
     */
    
    if ($is_primary){
        $temp_column = "tpps_$column";
    }
    else{
        $temp_column = $column;
    }
    
    $temp_max = db_select("chado.tpps_$table", "tpps_$table")
        ->fields("tpps_$table", array("$temp_column"));

    $public_max = db_select("chado.$table", "$table")
        ->fields("$table", array("$column"));
    
    if ($condition != array()){
        call_user_func_array(array($temp_max, 'condition'), $condition);
        call_user_func_array(array($public_max, 'condition'), $condition);
    }
    
    $temp_max->orderBy("$temp_column", 'DESC')
        ->range(0, 1);
    $public_max->orderBy("$column", 'DESC')
        ->range(0, 1);
    
    $temp_max = $temp_max->execute();
    $public_max = $public_max->execute();
    
    foreach($temp_max as $row){
        $temp_val = $row->{$temp_column};
        break;
    }
    
    foreach($public_max as $row){
        $public_val = $row->{$column};
        break;
    }
    
    $max_val = ($temp_val > $public_val) ? $temp_val : $public_val;
    
    return $max_val;
}

function tpps_init_project($form, &$form_state){
    //Get next dbxref_id and accession # for project
    $dbxref_id = tpps_compare_temp('dbxref', 'dbxref_id', TRUE) + 1;
    $accession = tpps_compare_temp('dbxref', 'accession', FALSE, array('accession', db_like('TGDR') . '%', 'LIKE'));
    $accession = substr($accession, 4) + 1;

    while (strlen($accession) < 3){
        $accession = "0" . $accession;
    }
    $accession = "TGDR" . $accession;

    //testing purposes only:
    //print_r("tpps_dbxref_id: " . $dbxref_id);
    //print_r(" | accession: " . $accession);
    
    //make new record in temp table
    $values = array(
      'tpps_dbxref_id' => $dbxref_id,
      'db_id' => '95',
      'accession' => $accession
    );
    
    $insert = db_insert('chado.tpps_dbxref')
        ->fields($values)
        ->execute();
    
    //tpps_create_record('tpps_dbxref', $values);

    $form_state['dbxref_id'] = $dbxref_id;
    $form_state['accession_number'] = $accession;
    
    //project will be created when name is provided, after the first page is complete.
    return $insert;
}

function tpps_create_record($table, $primary_key, array $values){
    $default_fields = array();
    $insert = NULL;
    
    if (substr($primary_key, 0, 5) == 'tpps_'){
        $compare_primary = substr($primary_key, 5);
    }
    else {
        $compare_primary = $primary_key;
    }
    
    if (substr($table, 0, 5) == 'tpps_'){
        $compare_table = substr($table, 5);
    }
    else {
        $compare_table = $table;
    }
    
    //check record exists
    if (tpps_record_exists($compare_table, $values)){
        //if it does, do not attempt to re-write it.
        //drupal_set_message(t('Error: Record already exists.'), 'error');
        return -1;
    }
    
    //get the new primary key (increment by 1 from the old primary key)
    $new_primary = tpps_compare_temp($compare_table, $compare_primary, TRUE) + 1;
    $values["$primary_key"] = $new_primary;
    
    $fields = db_select("chado.$table", 't')
        ->fields('t')
        ->range(0,1)
        ->execute()
        ->fetchAssoc();
    
    //get default values
    foreach ($fields as $key => $value){
        if (!isset($values[$key])){
            array_push($default_fields, $key);
        }
    }
    
    //print_r($default_fields);
    //print_r($values);
    
    //Insert the record
    $insert = db_insert("chado.$table")
        ->useDefaults($default_fields)
        ->fields($values)
        ->execute();
    
    return $insert;
}

function tpps_record_exists($table, array $values){
    
    $unique_columns = tpps_get_unique_columns($table);
    
    $results = db_select("chado.$table", 't')
        ->fields('t');
    
    $and = db_and();
    foreach ($unique_columns as $field){
        $value = $values[$field];
        $and->condition("$field", db_like("$value"), 'LIKE');
    }
    
    $results->condition($and);
    
    $results = $results->execute()
        ->fetchAssoc();
    
    if ($results){
        return TRUE;
    }
    
    return FALSE;
}

function tpps_get_unique_columns($table){
    
    $result = db_query("select indexdef from pg_indexes where tablename = '$table' and indexdef LIKE '%UNIQUE%' and indexname NOT LIKE '%_pkey';")
        ->fetchAssoc();
    
    $result = preg_split('/(\(|\))/',$result['indexdef']);
    $result = explode(', ', $result[1]);
    
    return $result;
}

function tpps_master($form, &$form_state){
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
	global $base_url;
	tpps_master_add_excel_load_js();
	
	/******************************************
	Add status bar showing completed parts at the top
	*******************************************/
	//dpm($form_state['saved_values']);

	$form['#prefix'] = '<style>
		.tgdr_form_status div {
			display: inline-block;
			padding: 3px;
			margin-right: 10px;
		}
		
		.tgdr_form_status div img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}
		
		.tgdr_form_status {
			padding: 5px;
			background-color: #f9db04;
			border: 1px solid #f3cb3d;
			border-radius: 4px;
		}
		
		.populate_excel_column_button {
			background-color: #1887d6;
			color: #FFFFFF;
			padding: 6px;
			border-radius: 5px;
		}
	
	</style>';
	$form['#prefix'] .= '<div class="tgdr_form_status">';
	
	/**** Page 1 ****/
	if(isset($form_state['saved_values']['Hellopage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Author and Species Information</div>";
	
	/**** Page 2 ****/
	if(isset($form_state['saved_values']['secondPage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Experimental Conditions</div>";	

	/**** Page 3 ****/
	if(isset($form_state['saved_values']['thirdPage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Tree Accession</div>";	
	
	/**** Page 4 ****/
	if(isset($form_state['saved_values']['fourthPage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Submit Data</div>";	
	
	$form['#prefix'] .= '</div>';
	
	/******************************************
	END of status bar code
	*******************************************/
	
	
    global $user;
    if (isset($user->roles[1]) and $user->roles[1] == 'anonymous user'){
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    else{
        $form_state['saved_values']['Hellopage']['primaryAuthor'] = $user->name;
    }
    
    if (!isset($form_state['stage'])){
        $form_state['stage'] = 'Hellopage';
    }
    
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        default:
            print_r('Invalid form stage.');
            break;
    }
    
    //print_r($form_state['stage']);
    
    drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
    
    return $form;
}

function tpps_master_validate($form, &$form_state){
	tpps_master_add_excel_load_js();
	
    if ($form_state['triggering_element']['#value'] == 'Back'){
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        default:
            break;
    }
}

function tpps_master_submit($form, &$form_state){
    
	tpps_master_add_excel_load_js();
	
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    
    switch ($form_state['stage']){
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'fourthPage';
            }
            break;
            
        case 'fourthPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'thirdPage';
            }
            else{
                //submit_all($form, $form_state);
                drupal_goto('<front>');
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
}

function submit_all($form, &$form_state){
    
    $dbxref_id = $form_state['dbxref_id'];
    $accession = $form_state['accession_number'];
    
    $values = $form_state['saved_values'];
    $firstpage = $values['Hellopage'];
    
    $project_id = tpps_create_record('tpps_project', 'tpps_project_id', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));
    
    $project_dbxref_id = tpps_create_record('tpps_project_dbxref', 'tpps_project_dbxref_id', array(
      'project_id' => $project_id,
      'dbxref_id' => $dbxref_id
    ));
    
    $primary_author_id = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
      'name' => $firstpage['primaryAuthor'],
      'type_id' => '71',
    ));
    
    $secondary_author_ids = array();
    $author_string = $firstpage['primaryAuthor'];
    
    for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
        $secondary_author_ids[$i] = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
          'name' => $firstpage['publication']['secondaryAuthors'][$i],
          'type_id' => '71'
        ));
        $author_string .= ", {$firstpage['publication']['secondaryAuthors'][$i]}";
    }
    
    switch ($firstpage['publication']['status']){
        case ('2'):
            $pub_year = $firstpage['publication']['yearSubmitted'];
            break;
        case ('3'):
            $pub_year = $firstpage['publication']['yearInPress'];
            break;
        case ('4'):
            $pub_year = $firstpage['publication']['yearPublished'];
            break;
        default: 
            $pub_year = "";
            break;
    }
    
    $publication_id = tpps_create_record('tpps_pub', 'tpps_pub_id', array(
      'title' => $firstpage['publication']['title'],
      'series_name' => $firstpage['publication']['journal'],
      'type_id' => '229',
      'pyear' => $pub_year,
      'uniquename' => "$author_string {$firstpage['publication']['title']}. {$firstpage['publication']['journal']}; $pub_year"
    ));
      
    $study_id = tpps_create_record('tpps_study', 'tpps_study_id', array(
      'contact_id' => $primary_author_id,
      'pub_id' => $publication_id,
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));
    
    $organization_id = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
      'name' => $firstpage['organization'],
      'type_id' => '72',
    ));
    
    /*$secondpage = $values['secondPage'];
    $thirdpage = $values['thirdPage'];
    $fourthpage = $values['fourthPage'];
    
    $organism = $firstpage['organism'];
    
    $month_options = array(
      0 => '- Select -',
      1 => 'January',
      2 => 'February',
      3 => 'March',
      4 => 'April',
      5 => 'May',
      6 => 'June',
      7 => 'July',
      8 => 'August',
      9 => 'September',
      10 => 'October',
      11 => 'November',
      12 => 'December'
    );
        
    $year_options = array();

    for ($i = 1950; $i <= 2017; $i++) {
        $index = $i - 1949;
        $year_options[$index] = $i;
    }

    $start = $month_options[$secondpage['StartingDate']['month']] . " " . $year_options[$secondpage['StartingDate']['year']];
    $end = $month_options[$secondpage['EndingDate']['month']] . " " . $year_options[$secondpage['EndingDate']['year']];
    
    if ($secondpage['studyLocation']['type'] === '2'){
        $location = $secondpage['studyLocation']['latitude'] . ' Latitude, ' . $secondpage['studyLocation']['longitude'] . ' Longitude';
    }
    else{
        $location = $secondpage['studyLocation']['customLocation']['region'] . ', ' . $secondpage['studyLocation']['customLocation']['country'];
    }
    
    $datatype_options = array(
      0 => '- Select -',
      1 => 'Genotype x Phenotype',
      2 => 'Genotype',
      3 => 'Genotype x Phenotype x Environment',
      4 => 'Phenotype x Environment',
      5 => 'Genotype x Environment'
    );
    $datatype = $datatype_options[$secondpage['dataType']];
    
    $studytype_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    $study_type = $studytype_options[$secondpage['studyType']];
    
    $tree_accession = $thirdpage['tree-accession'];
    
    function create_record_study($primary_author, $publication){
        $new_study_id = '1';
        
        $indexed_studies = db_select('chado.study', 'study')
            ->fields('study', array('study_id', 'name'))
            ->orderBy('study_id', 'DESC')
            ->execute();
        
        $name = "$primary_author $title";
        $first_row = TRUE;
        
        foreach($indexed_studies as $row){
            if ($first_row){
                $new_study_id = $row->study_id + 1;
                $first_row = FALSE;
            }
            if ($row->name === $name){
                $name .= "-$new_study_id";
            }
        }
        
        $insert_study = db_insert('chado.study')
            ->fields(array(
              'study_id' => $new_study_id,
              'contact_id' => $study_contact_id,
              'pub_id' => $study_pub_id,
              'name' => $name,
              'description' => $abstract
            ))
            ->execute();
        
        return array($study_contact_id, $study_pub_id, $new_study_id);
    }
    
    function create_record_pubauthor($author, $pub_id, $rank){
        $names = explode(' ', $author);
        $first_name = $names[0];
        $last_name = $names[array_pop(array_keys($names))];
        
        $will_insert = TRUE;
        $first_row = TRUE;
        $indexed_pubauthors = db_select('chado.pubauthor', 'pubauthor')
            ->fields('pubauthor', array('pubauthor_id', 'surname', 'givennames'))
            ->orderBy('pubauthor_id', 'DESC')
            ->execute();
        
        foreach ($indexed_pubauthors as $row){
            if ($first_row){
                $pubauthor_id = $row->pubauthor_id + 1;
                $first_row = FALSE;
            }
            if ($row->surname === $last_name and $row->givennames === $first_name){
                $will_insert = FALSE;
                $pubauthor_id = $row->pubauthor_id;
                break;
            }
        }
        
        if ($will_insert){
            $insert_pubauthor = db_insert('chado.pubauthor')
                ->fields(array(
                  'pubauthor_id' => $pubauthor_id,
                  'pub_id' => $pub_id,
                  'rank' => '1',
                  'editor' => 'false',
                  'surname' => $last_name,
                  'givennames' => $first_name,
                ))
                ->execute();
        }
        
        return $pubauthor_id;
    }
    
    function create_record_projectprop($project_id, $info, $info_cvterm_id){
        $first_row = TRUE;
        $rank = '0';
        
        $indexed_projectprop = db_select('chado.projectprop', 'projectprop')
            ->fields('projectprop', array('projectprop_id', 'project_id', 'type_id', 'rank'))
            ->orderBy('projectprop_id', 'DESC')
            ->execute();
        
        foreach($indexed_projectprop as $row){
            if ($first_row){
                $projectprop_id = $row->projectprop_id + 1;
                $first_row = FALSE;
            }
            if ($row->project_id === $project_id and $row->type_id === $info_cvterm_id){
                if ($row->rank >= $rank){
                    $rank = $row->rank + 1;
                }
                break;
            }
        }
        
        db_insert('chado.projectprop')
            ->fields(array(
              'projectprop_id' => $projectprop_id,
              'project_id' => $project_id,
              'type_id' => $info_cvterm_id,
              'value' => $info,
              'rank' => $rank
            ))
            ->execute();
        
        return $projectprop_id;
    }
    
    function create_record_organism($organism){
        $parts = explode(' ', $organism['species']);
        $genus = $parts[0];
        $species = implode(' ', array_slice($parts, 1));
        
        $will_insert = TRUE;
        $first_row = TRUE;
        
        $indexed_organisms = db_select('chado.organism', 'organism')
            ->fields('organism', array('organism_id', 'genus', 'species'))
            ->orderBy('organism_id', 'DESC')
            ->execute();
        
        foreach($indexed_organisms as $row){
            if ($first_row){
                $organism_id = $row->organism_id + 1;
                $first_row = FALSE;
            }
            if ($row->genus === $genus and $row->species === $species){
                $will_insert = FALSE;
                $organism_id = $row->organism_id;
                break;
            }
        }
        
        if ($will_insert){
            $abbreviation = $genus[0] . " $species";
            $fields = array(
              'organism_id' => $organism_id,
              'genus' => $genus,
              'species' => $species,
              'abbreviation' => $abbreviation,
            );
            
            if (preg_match('/var\./', $species)){
                $fields['type_id'] = '22';
            }
            elseif (preg_match('/subsp\./', $species)){
                $fields['type_id'] = '29';
            }
            elseif (preg_match('/ x /', $species)){
                $fields['type_id'] = '56';
            }
            
            $insert_organism = db_insert('chado.organism')
                ->fields($fields)
                ->execute();
        }
        
        return $organism_id;
    }
    
    function create_record_studyprop($study_id, $info, $info_cvterm_id){
        $first_row = TRUE;
        $rank = '0';
        $info_id = '1';
        
        $indexed_items = db_select('chado.studyprop', 'studyprop')
            ->fields('studyprop', array('studyprop_id', 'study_id', 'type_id', 'rank'))
            ->orderBy('studyprop_id', 'DESC')
            ->execute();
        
        foreach ($indexed_items as $row){
            if ($first_row){
                $info_id = $row->studyprop_id + 1;
                $first_row = FALSE;
            }
            if ($row->study_id === $study_id and $row->type_id === $info_cvterm_id){
                if ($row->rank >= $rank){
                    $rank = $row->rank + 1;
                }
                break;
            }
        }

        $insert_info = db_insert('chado.studyprop')
            ->fields(array(
              'studyprop_id' => $info_id,
              'study_id' => $study_id,
              'type_id' => $info_cvterm_id,
              'value' => $info,
              'rank' => $rank
            ))
            ->execute();
        
        return $info_id;
    }
    
    function create_record_stock($organism_id){
        
        $indexed_stocks = db_select('chado.stock', 'stock')
            ->fields('stock', array('stock_id'))
            ->orderBy('stock_id', 'DESC')
            ->execute();
        
        foreach ($indexed_stocks as $row){
            $stock_id = $row->stock_id + 1;
            break;
        }
        
        $unique_name = "$organism_id-$stock_id";
        
        $stock_insert = db_insert('chado.stock')
            ->fields(array(
              'stock_id' => $stock_id,
              'type_id' => '2824',
              'organism_id' => $organism_id,
              'uniquename' => $unique_name
            ))
            ->execute();
        
        return $stock_id;
    }
    
    function create_record_stockprop($stock_id, $info, $info_cvterm_id){
        $first_row = TRUE;
        $rank = '0';
        
        $indexed_items = db_select('chado.stockprop', 'stockprop')
            ->fields('stockprop', array('stockprop_id', 'stock_id', 'type_id', 'rank'))
            ->orderBy('stockprop_id', 'DESC')
            ->execute();
        
        foreach ($indexed_items as $row){
            if ($first_row){
                $stockprop_id = $row->stockprop_id + 1;
                $first_row = FALSE;
            }
            if ($row->stock_id === $stock_id and $row->type_id === $info_cvterm_id){
                if ($row->rank >= $rank){
                    $rank = $row->rank + 1;
                }
                break;
            }
        }

        $insert_info = db_insert('chado.stockprop')
            ->fields(array(
              'stockprop_id' => $stockprop_id,
              'stock_id' => $stock_id,
              'type_id' => $info_cvterm_id,
              'value' => $info,
              'rank' => $rank
            ))
            ->execute();
        
        return $stockprop_id;
    }
    
    function create_record_phenotypeprop($phenotype_id, $info, $info_cvterm_id){
        $first_row = TRUE;
        $rank = '0';
        $phenotypeprop_id = '1';
        
        $indexed_items = db_select('chado.phenotypeprop', 'phenotypeprop')
            ->fields('phenotypeprop', array('phenotypeprop_id', 'phenotype_id', 'type_id', 'rank'))
            ->orderBy('phenotypeprop_id', 'DESC')
            ->execute();
        
        foreach ($indexed_items as $row){
            if ($first_row){
                $phenotypeprop_id = $row->phenotypeprop_id + 1;
                $first_row = FALSE;
            }
            if ($row->phenotype_id === $phenotype_id and $row->type_id === $info_cvterm_id){
                if ($row->rank >= $rank){
                    $rank = $row->rank + 1;
                }
            }
        }

        $insert_info = db_insert('chado.phenotypeprop')
            ->fields(array(
              'phenotypeprop_id' => $phenotypeprop_id,
              'phenotype_id' => $phenotype_id,
              'type_id' => $info_cvterm_id,
              'value' => $info,
              'rank' => $rank
            ))
            ->execute();
        
        
        return $phenotypeprop_id;
    }
    
    function create_record_phenotype($phenotype){
        $name = $phenotype['name'];
        $phenotype_id = '1';
        
        $indexed_phenotypes = db_select('chado.phenotype', 'phenotype')
            ->fields('phenotype', array('phenotype_id'))
            ->orderBy('phenotype_id', 'DESC')
            ->execute();
        
        foreach ($indexed_phenotypes as $row){
            $phenotype_id = $row->phenotype_id + 1;
            break;
        }
        
        $uniquename = "$name-$phenotype_id";
        
        $insert_phenotype = db_insert('chado.phenotype')
            ->fields(array(
              'phenotype_id' => $phenotype_id,
              'uniquename' => $uniquename,
              'name' => $name,
            ))
            ->execute();
        
        if ($phenotype['environment-check'] == '1'){
            $environment = $phenotype['environment'];
            
            $description_id = create_record_phenotypeprop($phenotype_id, $environment['description'], '2834');
            $unit_id = create_record_phenotypeprop($phenotype_id, $environment['units'], '2842');
        }
        else{
            $non_environment = $phenotype['non-environment'];
            $type = $non_environment['type'];
            $structure = $non_environment['structure'];
            $developmental = $non_environment['developmental'];
            
            if ($type === '1'){
                $binary_1 = $non_environment['binary'][1];
                $binary_2 = $non_environment['binary'][2];
                
                $binary_1_id = create_record_phenotypeprop($phenotype_id, $binary_1, '128023');
                $binary_2_id = create_record_phenotypeprop($phenotype_id, $binary_2, '128023');
            }
            elseif ($type === '2'){
                $min = $non_environment['quantitative']['min'];
                $max = $non_environment['quantitative']['max'];
                
                $min_id = create_record_phenotypeprop($phenotype_id, $min, '52214');
                $max_id = create_record_phenotypeprop($phenotype_id, $max, '52213');
            }
            
            $description_id = create_record_phenotypeprop($phenotype_id, $non_environment['description'], '2834');
            $unit_id = create_record_phenotypeprop($phenotype_id, $non_environment['units'], '2842');
            $structure_id = create_record_phenotypeprop($phenotype_id, $structure, '50292');
            $developmental_id = create_record_phenotypeprop($phenotype_id, $developmental, '50292');
            
            if ($non_environment['structure-check'] === '1'){
                $structure_definition = $non_environment['structure-definition'];
                $structure_definition_id = create_record_phenotypeprop($phenotype_id, "$structure Definition: $structure_definition", '50292');
            }
            if ($non_environment['developmental-check'] === '1'){
                $developmental_definition = $non_environment['developmental-definition'];
                $developmental_definition_id = create_record_phenotypeprop($phenotype_id, "$developmental Definition: $developmental_definition", '50292');
            }
        }
        
        return $phenotype_id;
    }
    
    $study_ids = create_record_study($primary_author, $publication);
    $study_contact_id = $study_ids[0];
    $study_pub_id = $study_ids[1];
    $study_id = $study_ids[2];
    
    $primary_pubauthor_id = create_record_pubauthor($primary_author, $study_pub_id, '1');
    
    $options = array(
      0 => t('- Select -'),
      2 => t('In Preparation or Submitted'),
      3 => t('In press'),
      4 => t('Published'),
    );
    $status = $options[$publication['status']];
    
    $pub_status_id = create_record_projectprop($project_id, $status, '52310');
    
    $secondaryAuthors_id = array();
    if ($publication['secondaryAuthors']['check'] == '0' and $publication['secondaryAuthors']['number'] != '0'){
        for($i = 1; $i <= $publication['secondaryAuthors']['number']; $i++){
            $secondaryAuthors_id[$i] = create_record_pubauthor($publication['secondaryAuthors'][$i], $study_pub_id, $i + 1);
        }
    }
    elseif ($publication['secondaryAuthors']['check'] == '0'){
        create_record_projectprop($project_id, file_create_url(file_load($publication['secondaryAuthors']['file'])->uri), '128024');
    }
    
    $organism_id = array();
    for ($i = 1; $i <= $organism['number']; $i++){
        $organism_id[$i] = create_record_organism($organism["$i"]);
    }
    
    $start_date_id = create_record_studyprop($study_id, $start, '127996');
    $end_date_id = create_record_studyprop($study_id, $end, '127997');
    $experiment_location_id = create_record_studyprop($study_id, $location, '127998');
    $datatype_id = create_record_studyprop($study_id, $datatype, '54740');//need jill's confirmation on cvterm_id for 'association_results_type'
    $study_type_id = create_record_studyprop($study_id, $study_type, '128021');
    
    if ($secondpage['studyType'] == '1'){
        $natural_population = $secondpage['naturalPoplulation'];
        $number_assessions = $natural_population['assession'];
        $seasons = "";
        foreach ($natural_population['season'] as $key => $item){
            if ($item == '1'){
                $season .= $key . ', ';
            }
        }
        $season_id = create_record_studyprop($study_id, $seasons, '128000');
        $assessions_id = create_record_studyprop($study_id, $number_assessions, '128001');
    }
    elseif ($secondpage['studyType'] == '2'){
        $growth_chamber = $secondpage['growthChamber'];
        $co2 = $growth_chamber['co2Control'];
        $humidity = $growth_chamber['humidityControl'];
        $light = $growth_chamber['lightControl'];
        $temp_high = $growth_chamber['temp']['high'];
        $temp_low = $growth_chamber['temp']['low'];
        $rooting = $growth_chamber['rooting'];
        $rooting_type = $rooting['option'];
        $soil = $rooting['soil'];
        $soil_container = $soil['container'];
        $ph = $rooting['ph'];
        $treatments = $rooting['treatment'];
        
        if ($co2['option'] == '1'){
            $co2_control_id = create_record_studyprop($study_id, 'True', '128002');
            $co2_value_id = create_record_studyprop($study_id, $co2['controlled'], '128003');
        }
        else{
            $co2_control_id = create_record_studyprop($study_id, 'False', '128002');
            $co2_value_id = create_record_studyprop($study_id, $co2['uncontrolled'], '128003');
        }
        
        if ($humidity['option'] == '1'){
            $humidity_control_id = create_record_studyprop($study_id, 'True', '128004');
            $humidity_value_id = create_record_studyprop($study_id, $humidity['controlled'], '128005');
        }
        else{
            $humidity_control_id = create_record_studyprop($study_id, 'False', '128004');
            $humidity_value_id = create_record_studyprop($study_id, $humidity['uncontrolled'], '128005');
        }
        
        if ($light['option'] == '1'){
            $light_control_id = create_record_studyprop($study_id, 'True', '128006');
            $light_value_id = create_record_studyprop($study_id, $light['controlled'], '128007');
        }
        else{
            $light_control_id = create_record_studyprop($study_id, 'False', '128006');
            $light_value_id = create_record_studyprop($study_id, $light['uncontrolled'], '128007');
        }
        
        $temp_high_id = create_record_studyprop($study_id, $temp_high, '128008');
        $temp_low_id = create_record_studyprop($study_id, $temp_low, '128009');
        
        switch((string) $rooting_type){
            case '1':
                $rooting_type_id = create_record_studyprop($study_id, 'Aeroponics', '128010');
                break;
            case '2':
                $rooting_type_id = create_record_studyprop($study_id, 'Hydroponics', '128010');
                break;
            case '3':
                $rooting_type_id = create_record_studyprop($study_id, 'Soil', '128010');
                $soil_options = array(
                  0 => '- Select -',
                  1 => 'Sand',
                  2 => 'Peat',
                  3 => 'Clay',
                  4 => 'Mixed',
                  5 => 'Other'
                );
                $soil_type = $soil_options[$soil['type']];
                if ($soil_type == 'Other'){
                    $soil_type = $soil['other'];
                }

                $soil_type_id = create_record_studyprop($study_id, $soil_type, '128011');
                $soil_container_id = create_record_studyprop($study_id, $soil_container, '128012');
                break;
            default:
                break;
        }
        
        if ($ph['option'] == '1'){
            $ph_control_id = create_record_studyprop($study_id, 'True', '128013');
            $ph_value_id = create_record_studyprop($study_id, $ph['controlled'], '128014');
        }
        else{
            $ph_control_id = create_record_studyprop($study_id, 'False', '128013');
            $ph_value_id = create_record_studyprop($study_id, $ph['uncontrolled'], '128014');
        }
        
        $treatment_id = array();
        $is_description = FALSE;
        foreach ($treatments as $item){
            if (!$is_description){
                if ($item == '1'){
                    $record_next = TRUE;
                }
                else{
                    $record_next = FALSE;
                }
                $is_description = TRUE;
            }
            else{
                if ($record_next){
                    array_push($treatment_id, create_record_studyprop($study_id, $item, '128015'));
                }
                $is_description = FALSE;
            }
        }
    }
    elseif ($secondpage['studyType'] == '3'){
        $greenhouse = $secondpage['greenhouse'];
        $humidity = $greenhouse['humidityControl'];
        $light = $greenhouse['lightControl'];
        $temp_high = $greenhouse['temp']['high'];
        $temp_low = $greenhouse['temp']['low'];
        $rooting = $greenhouse['rooting'];
        $rooting_type = $rooting['option'];
        $soil = $rooting['soil'];
        $soil_container = $soil['container'];
        $ph = $rooting['ph'];
        $treatments = $rooting['treatment'];
        
        if ($humidity['option'] == '1'){
            $humidity_control_id = create_record_studyprop($study_id, 'True', '128004');
            $humidity_value_id = create_record_studyprop($study_id, $humidity['controlled'], '128005');
        }
        else{
            $humidity_control_id = create_record_studyprop($study_id, 'False', '128004');
        }
        
        if ($light['option'] == '1'){
            $light_control_id = create_record_studyprop($study_id, 'True', '128006');
            $light_value_id = create_record_studyprop($study_id, $light['controlled'], '128007');
        }
        else{
            $light_control_id = create_record_studyprop($study_id, 'False', '128006');
        }
        
        $temp_high_id = create_record_studyprop($study_id, $temp_high, '128008');
        $temp_low_id = create_record_studyprop($study_id, $temp_low, '128009');
        
        switch((string) $rooting_type){
            case '1':
                $rooting_type_id = create_record_studyprop($study_id, 'Aeroponics', '128010');
                break;
            case '2':
                $rooting_type_id = create_record_studyprop($study_id, 'Hydroponics', '128010');
                break;
            case '3':
                $rooting_type_id = create_record_studyprop($study_id, 'Soil', '128010');
                $soil_options = array(
                  0 => '- Select -',
                  1 => 'Sand',
                  2 => 'Peat',
                  3 => 'Clay',
                  4 => 'Mixed',
                  5 => 'Other'
                );
                $soil_type = $soil_options[$soil['type']];
                if ($soil_type == 'Other'){
                    $soil_type = $soil['other'];
                }

                $soil_type_id = create_record_studyprop($study_id, $soil_type, '128011');
                $soil_container_id = create_record_studyprop($study_id, $soil_container, '128012');
                break;
            default:
                break;
        }
        
        if ($ph['option'] == '1'){
            $ph_control_id = create_record_studyprop($study_id, 'True', '128013');
            $ph_value_id = create_record_studyprop($study_id, $ph['controlled'], '128014');
        }
        else{
            $ph_control_id = create_record_studyprop($study_id, 'False', '128013');
        }
        
        $treatment_id = array();
        $is_description = FALSE;
        foreach ($treatments as $item){
            if (!$is_description){
                if ($item == '1'){
                    $record_next = TRUE;
                }
                else{
                    $record_next = FALSE;
                }
                $is_description = TRUE;
            }
            else{
                if ($record_next){
                    array_push($treatment_id, create_record_studyprop($study_id, $item, '128015'));
                }
                $is_description = FALSE;
            }
        }
        
    }
    elseif ($secondpage['studyType'] == '4'){
        $commonGarden = $secondpage['commonGarden'];
        $salinity = $commonGarden['salinity'];
        $biotic_env = $commonGarden['bioticEnv']['option'];
        $seasons = "";
        $treatments = $commonGarden['treatment'];
        
        $irrigation_options = array(
          0 => '- Select -',
          1 => 'Irrigation from top',
          2 => 'Irrigation from bottom',
          3 => 'Drip Irrigation',
          4 => 'Other',
          5 => 'No Irrigation',
        );
        $irrigation_type = $irrigation_options[$commonGarden['irrigation']['option']];
        if ($irrigation_type == 'Other'){
            $irrigation_type = $commonGarden['irrigation']['other'];
        }
        
        $irrigation_type_id = create_record_studyprop($study_id, $irrigation_type, '128016');
        
        if ($salinity['option'] == '1'){
            $salinity_control_id = create_record_studyprop($study_id, 'True', '128017');
            $salinity_value_id = create_record_studyprop($study_id, $salinity['controlled'], '128018');
        }
        else{
            $salinity_control_id = create_record_studyprop($study_id, 'False', '128017');
            $salinity_value_id = create_record_studyprop($study_id, $salinity['uncontrolled'], '128018');
        }
        
        $biotic_env['Other'] = $commonGarden['bioticEnv']['other'];
        $biotic_env_id = array();
        foreach ($biotic_env as $key => $check){
            if ($check == '1'){
                $biotic_env_id[$key] = create_record_studyprop($study_id, $key, '128019');
            }
        }
        
        foreach ($commonGarden['season'] as $key => $item){
            if ($item == '1'){
                $season .= $key . ', ';
            }
        }
        $season_id = create_record_studyprop($study_id, $seasons, '128000');
        
        $treatment_id = array();
        $is_description = FALSE;
        foreach ($treatments as $item){
            if (!$is_description){
                if ($item == '1'){
                    $record_next = TRUE;
                }
                else{
                    $record_next = FALSE;
                }
                $is_description = TRUE;
            }
            else{
                if ($record_next){
                    array_push($treatment_id, create_record_studyprop($study_id, $item, '128015'));
                }
                $is_description = FALSE;
            }
        }
    }
    elseif ($secondpage['studyType'] == '5'){
        $plantation = $secondpage['plantation'];
        $number_assessions = $plantation['assession'];
        $seasons = "";
        foreach ($plantation['season'] as $key => $item){
            if ($item == '1'){
                $season .= $key . ', ';
            }
        }
        $season_id = create_record_studyprop($study_id, $seasons, '128000');
        $assessions_id = create_record_studyprop($study_id, $number_assessions, '1280001');
    }
    
    $tree_accession_path = file_create_url(file_load($tree_accession)->uri);
    
    for ($i = 1; $i <= $organism['number']; $i++){
        $phenotype = $fourthpage["organism-$i"]['phenotype'];
        $phenotype_number = $phenotype['number'];
        $genotype = $fourthpage["organism-$i"]['genotype'];
        $bioproject = $genotype['BioProject-id'];
        $assembly_file = $genotype['assembly'];
        $snps_file = $genotype['SNPs'];
        
        $stock_id = create_record_stock($organism_id[$i]);
        $tree_accession_id = create_record_stockprop($stock_id, $tree_accession_path, '128024');
        
        if ($phenotype['check'] === '1'){
            $file_path = file_create_url(file_load($phenotype['file'])->uri);
            
            $indexed_phenotypes = db_select('chado.phenotype', 'phenotype')
                ->fields('phenotype', array('phenotype_id'))
                ->orderBy('phenotype_id', 'DESC')
                ->execute();

            foreach ($indexed_phenotypes as $row){
                $phenotype_id = $row->phenotype_id + 1;
                break;
            }

            $uniquename = "PHENOTYPE-FILE-PATH-$phenotype_id";

            $insert_phenotype = db_insert('chado.phenotype')
                ->fields(array(
                  'phenotype_id' => $phenotype_id,
                  'uniquename' => $uniquename,
                  'value' => $file_path,
                ))
                ->execute();
        }
        else{
            $phenotype_id = array();
            for ($j = 1; $j <= $phenotype_number; $j++){
                $current_phenotype = $phenotype["$j"];
                $phenotype_id[$j] = create_record_phenotype($current_phenotype);
            }
        }
        
        $bioproject_id = create_record_project_dbxref($project_id, $bioproject);
        $assembly_id = create_record_projectprop($project_id, file_create_url(file_load($assembly_file)->uri), '128024');
        $snps_id = create_record_projectprop($project_id, file_create_url(file_load($snps_file)->uri), '128024');
    }
    */
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function _species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function _phenotype_autocomplete($string){
    $matches = array();
    
    $result = db_select('chado.phenotype', 'phenotype')
        ->fields('phenotype', array('name'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function parse_xlsx_headers_and_sample_rows($location){
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = DRUPAL_ROOT . '/sites/default/files';
    //echo $dir;
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;
	//echo file_get_contents($dir . '/xl/worksheets/sheet1.xml');
	$row_count = 0;
    foreach ($xlrows as $xlrow) {
        $arr = array();
		$row_count = $row_count + 1;
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if ($row_count == 1) {
            $headers = $arr;
            $content['headers'] = $headers;
			
			
        } 
		
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content['rows'][] = $row;
			if ($row_count == 3) {
				break; //exit the parent foreach loop since all we need is the headers
			}
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function parse_xlsx($location){
    
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = '/var/www/Drupal/sites/default/files';
    
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;

    foreach ($xlrows as $xlrow) {
        $arr = array();
        
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if (!isset($headers)) {
            $headers = $arr;
            $content['headers'] = $headers;
        } 
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content[] = $row;
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function tpps_test_page($form, &$form_state){
    
    $study_id = tpps_create_record('tpps_study', 'tpps_study_id', array(
      'contact_id' => 'cid',
      'pub_id' => 'pid',
      'name' => 'studyname',
      'description' => 'studydesc'
    ));
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
    );
    
    return $form;
}

function tpps_test_page_validate($form, &$form_state){
    
}

function tpps_test_page_submit($form, &$form_state) {
    
}
