<?php

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function 
 */
 function custom_module_help($path, $arg) {
   switch ($path) {
     case "admin/help#custom_module":
       return t("Displays links to nodes created on this date");
       break;
   }
 }

/**
 * Implements hook_block_info().
 */
 function custom_module_block_info() {
   $blocks['custom_module'] = array(
     // The name that will appear in the block list.
     'info' => t('Custom Module'),
     // Default setting.
     'cache' => DRUPAL_CACHE_PER_ROLE,
   );
   return $blocks;
 }

/**
 * Custom content function.
 * 
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 * 
 * @return 
 *   A result set of the targeted posts.
 */
function custom_module_contents(){
  //Get today's date.
  $today = getdate();
  //Calculate the date a week ago.
  $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
 //Get all posts from one week ago to the present.
  $end_time = time();
 
  //NEW LINE
  $max_num = variable_get('custom_module_max', 3);

  //Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1) //Published.
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC') //Most recent first.
    ->range(0, $max_num) //NEW LINE
    ->execute();
  return $query;
}

function custom_module_block_view($delta = '') {
  switch ($delta) {
    case 'custom_module':
      $block['subject'] = t('Custom Module');
      if (user_access('access content')) {
      //Retrieve and process data here.
  
      //Use our custom function to retrieve data.
      $result = custom_module_contents();
      //Array to contain items for the block to render.
      $items = array();
      //Iterate over the result set and format as links.
      foreach ($result as $node) {
        $items[] = array(
          'data' => l($node->title, 'node/' . $node->nid),
        );
       }

      //No content in the last week.
      if (empty($items)) {
        $block['content'] = t('No posts available.');
      }
      else {
        //Pass data through theme function.
        $block['content'] = theme('item_list', array('items' => $items));
      }
    }
    return $block;
   }

}

/**
 * Timplements hook_menu().
 */
function custom_module_menu() {
  $items = array();

  $items['admin/config/content/custom_module'] = array('title' => 'Custom Module', 'description' => 'Configuration for Custom Module', 'page callback' => 'drupal_get_form', 'page arguments' => array('custom_module_form'), 'access arguments' => array('access administration pages'), 'type' => MENU_NORMAL_ITEM,);
  return $items;
}

/**
 * Page Callback: Current posts settings
 *
 * @see custom_module_menu()
 */
function custom_module_form($form, &$form_state) {
  $form['custom_module_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('current_posts_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
    );
    
    return system_settings_form($form);
}

/**
 *Implements validation from teh Form API.
 *
 * @param $form 
 *  A structured array containing the elements and properties of the form.
 * @param $form_state
 * An array that stores the information about the form's curresnt state during processing
 */
function custom_module_form_validate($form, &$form_state){
  $max_num = $form_state['values']['custom_module_max'];
  if(!is_numeric($max_num)){
    form_set_error('custom_module_max', t('You must enter a number for the maximum number of posts to display.'));
  }
  elseif($max_num <= 0){
     form_set_error('custom_module_max', t('Maximum number of posts to display must be positive.'));
  } 
}
