<?php

//hook_init
function custom_module_init() {

//    drupal_set_message("Hello");
}

function custom_module_menu() {

    $items = array();

    $items['Hellopage'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['secondPage'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm_second_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['thirdPage'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm_third_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['fourthPage'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm_fourth_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'custom_module_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['structure/autocomplete'] = array(
      'title' => 'Autocomplete for Ontological terms',
      'page callback' => '_structure_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['developmental/autocomplete'] = array(
      'title' => 'Autocomplete for Ontological terms',
      'page callback' => '_development_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );

    return $items;
}

function custom_module_ajaxCallHandler() {

    global $user;

    if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'my secret value' . $user->uid)) {
        return MENU_ACCESS_DENIED;
    }

    echo "Hello, " . filter_xss($_GET['name']) . "!";
}

function custom_module_showCustomModuleForm() {
    
    function user_info(&$form){

        $form['primaryAuthor'] = array(
          '#type' => 'textfield',
          '#title' => t('Primary Author:'),
          '#autocomplete_path' => 'author/autocomplete',
          '#required' => true
        );
        
        $form['organization'] = array(
          '#type' => 'textfield',
          '#title' => t('Organization:'),
          '#autocomplete_path' => 'organization/autocomplete',
          '#required' => true
        );
        
        return $form;
    }
    
    function publication(&$form){
        
        function year(&$form){
            
            $yearArrSubmitted = Array();
            $yearArrSubmitted[0] = 'Please select a year';
            for ($i = 2015; $i <= 2017; $i++) {
                $yearArrSubmitted[$i] = "$i";
            }

            $yearArrInPress = Array();
            $yearArrInPress[0] = 'Please select a year';
            for ($i = 2015; $i <= 2017; $i++) {
                $yearArrInPress[$i] = "$i";
            }

            $yearArrPublished = Array();
            $yearArrPublished[0] = 'Please select a year';
            for ($i = 1990; $i <= 2017; $i++) {
                $yearArrPublished[$i] = "$i";
            }

            $form['publication']['yearSubmitted'] = array(
              '#type' => 'select',
              '#title' => t('Year of Publication'),
              '#options' => $yearArrSubmitted,
              '#default_value' => 0,
              '#states' => array(
                'visible' => array(
                  ':input[name="publication[status]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="publication[status]"]' => array('value' => '2')
                )
              )
            );

            $form['publication']['yearInPress'] = array(
              '#type' => 'select',
              '#title' => t('Year of Publication'),
              '#options' => $yearArrInPress,
              '#default_value' => 0,
              '#states' => array(
                'visible' => array(
                  ':input[name="publication[status]"]' => array('value' => '3')
                ),
                'required' => array(
                  ':input[name="publication[status]"]' => array('value' => '3')
                )
              )
            );

            $form['publication']['yearPublished'] = array(
              '#type' => 'select',
              '#title' => t('Year of Publication'),
              '#options' => $yearArrPublished,
              '#default_value' => 0,
              '#states' => array(
                'visible' => array(
                  ':input[name="publication[status]"]' => array('value' => '4')
                ),
                'required' => array(
                  ':input[name="publication[status]"]' => array('value' => '4')
                )
              )
            );
            
            return $form;
        }
        
        function secondary_authors(&$form){
            
            $form['publication']['secondaryAuthors'] = array(
              '#type' => 'fieldset',
              '#title' => t('Secondary Authors:'),
              '#states' => array(
                'visible' => array(
                  array(
                    array(':input[name="publication[status]"]' => array('value' => '2')),
                    'or',
                    array(':input[name="publication[status]"]' => array('value' => '3')),
                    'or',
                    array(':input[name="publication[status]"]' => array('value' => '4')),
                  )
                ),
              )
            );

            $number_options = array();
            $number_options[0] = 'Please select number of Secondary Authors';
            for ($i = 0; $i <= 30; $i++){
                $number_options[$i+1] = "$i";
            }
            $number_options[32] = '>30';

            $form['publication']['secondaryAuthors']['number'] = array(
              '#type' => 'select',
              '#title' => t('Number of Secondary Authors'),
              '#options' => $number_options,
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  array(
                    array(':input[name="publication[status]"]' => array('value' => '2')),
                    'or',
                    array(':input[name="publication[status]"]' => array('value' => '3')),
                    'or',
                    array(':input[name="publication[status]"]' => array('value' => '4')),
                  )
                ),
              )
            );

            for ($i = 2; $i <= 31; $i++){

                $author_label = $i - 1;

                $visible_states = array();
                array_push($visible_states, array(':input[name="publication[secondaryAuthors][number]"]' => array('value' => "$i")));

                for($j = $i + 1; $j <= 31; $j++){
                    array_push($visible_states, 'or');
                    array_push($visible_states, array(':input[name="publication[secondaryAuthors][number]"]' => array('value' => "$j")));
                }

                $form['publication']['secondaryAuthors'][$author_label] = array(
                  '#type' => 'textfield',
                  '#title' => t("Secondary Author $author_label:"),
                  '#autocomplete_path' => 'author/autocomplete',
                  '#states' => array(
                    'visible' => array($visible_states),
                    'required' => array($visible_states),
                  )
                );
            }

            $form['publication']['secondaryAuthors']['file'] = array(
              '#type' => 'file',
              '#title' => t('Please upload a file containing the names of all of your authors.'),
              '#states' => array(
                'visible' => array(
                  ':input[name="publication[secondaryAuthors][number]"]' => array('value' => '32')
                ),
                'required' => array(
                  ':input[name="publication[secondaryAuthors][number]"]' => array('value' => '32')
                )
              )
            );
            
            return $form;
        }
        
        $form['publication'] = array(
          '#type' => 'fieldset',
          '#title' => t('Publication Information:'),
          '#tree' => true
        );

        $form['publication']['status'] = array(
          '#type' => 'select',
          '#title' => t('Publication Status:'),
          '#options' => array(
            0 => t('Please select a Publication Status'),
            1 => t('In Preparation'),
            2 => t('Submitted'),
            3 => t('In press'),
            4 => t('Published'),
          ),
          '#default_value' => 0,
          '#required' => true,
        );
        
        secondary_authors($form);
        
        year($form);

        $form['publication']['title'] = array(
          '#type' => 'textfield',
          '#title' => t('Title of Publication:'),
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="publication[status]"]' => array('value' => '2')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '3')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="publication[status]"]' => array('value' => '2')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '3')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '4')),
              )
            )
          )
        );

        $form['publication']['abstract'] = array(
          '#type' => 'textarea',
          '#title' => t('Abstract:'),
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="publication[status]"]' => array('value' => '2')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '3')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="publication[status]"]' => array('value' => '2')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '3')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '4')),
              )
            )
          )
        );

        $form['publication']['journal'] = array(
          '#type' => 'textfield',
          '#title' => t('Journal:'),
          '#autocomplete_path' => 'journal/autocomplete',
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="publication[status]"]' => array('value' => '2')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '3')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="publication[status]"]' => array('value' => '2')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '3')),
                'or',
                array(':input[name="publication[status]"]' => array('value' => '4')),
              )
            )
          )
        );
        
        return $form;
    }
    
    user_info($form);
    
    publication($form);
    
    $genus_query = db_query('SELECT DISTINCT genus FROM chado.organism ORDER BY genus');
    $genus_options = array();
    $genus_options[0] = 'Please select a genus';
    foreach ($genus_query as $row){
        $genus_options[$row->genus] = $row->genus;
    }
    
    $form['genus'] = array(
      '#type' => 'select',
      '#title' => t('Genus:'),
      '#options' => $genus_options,
      '#default_value' => 0,
      '#states' => array(
        'visible' => array(
          ':input[name="species[other][check]"]' => array('checked' => false)
        ),
        'required' => array(
          ':input[name="species[other][check]"]' => array('checked' => false)
        )
      )
    );
    
    $form['species'] = array(
      '#type' => 'fieldset',
      '#tree' => true,
    );
    
    foreach($genus_options as $genus){
        
        if (substr($genus, 0, 6) == 'Please'){
            continue;
        }
        
        $species_query = db_query("SELECT species, genus FROM chado.organism WHERE genus='$genus' ORDER BY species");
        $species_options = array();
        $species_options[0] = 'Please select a species';
        foreach($species_query as $species_row){
            $species_options[$species_row->species] = $species_row->species;
        }
        
        $form['species']["$genus"] = array(
          '#type' => 'select',
          '#title' => t('Species:'),
          '#options' => $species_options,
          '#states' => array(
            'visible' => array(
              ':input[name="genus"]' => array('value' => "$genus"),
              ':input[name="species[other][check]"]' => array('checked' => false)
            ),
            'required' => array(
              ':input[name="genus"]' => array('value' => "$genus"),
              ':input[name="species[other][check]"]' => array('checked' => false)
            )
          )
        );   
    }
    
    $form['species']['other'] = array(
      '#type' => 'fieldset',
    );
    
    $form['species']['other']['check'] = array(
      '#type' => 'checkbox',
      '#title' => t('My genus or species is not in this list')
    );
    
    $form['species']['other']['textGenus'] = array(
      '#type' => 'textfield',
      '#title' => 'Please enter your custom genus:',
      '#states' => array(
        'visible' => array(
          ':input[name="species[other][check]"]' => array('checked' => true)
        ),
        'required' => array(
          ':input[name="species[other][check]"]' => array('checked' => true)
        )
      )
    );
    
    $form['species']['other']['textSpecies'] = array(
      '#type' => 'textfield',
      '#title' => 'Please enter your custom species:',
      '#states' => array(
        'visible' => array(
          ':input[name="species[other][check]"]' => array('checked' => true)
        ),
        'required' => array(
          ':input[name="species[other][check]"]' => array('checked' => true)
        )
      )
    );
    
    /*
    $form['keywords'] = array(
      '#type' => 'textfield',
      '#title' => t('Keywords'),
      '#description' => t('Please enter keywords separated by commmas'),
    );
     */

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );


    /* This is the convention for adding JS files to your form.
     * Since it is added directly to the form, I would imagine 
     * it is only accessible to this specific form.  
     */
    drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");

    /*
     * This is instantiating a user token.  It will be verified
     * in the JS file and they will not be given acess to data 
     * returned by AJAX if their token is invalid (if not logged
     * in).
     */
    global $user;
    $newToken = drupal_get_token("my secret value" . $user->uid);
    drupal_add_js("var myToken='$newToken'", "inline");

    return $form;
}

function custom_module_showCustomModuleForm_validate($form, &$form_state) {
    //for testing only.
    /*foreach($form_state['values'] as $key => $value){
        print_r($key . " => " . $value . ";<br>");
    }*/
    
    $form_values = $form_state['values'];
    $publication_status = $form_values['publication']['status'];
    $secondary_authors_number = $form_values['publication']['secondaryAuthors']['number'];
    $secondary_authors_array = array_slice($form_values['publication']['secondaryAuthors'], 1, 30, true);
    $secondary_authors_file = $form_values['publication']['secondaryAuthors']['file'];
    $year_submitted = $form_values['publication']['yearSubmitted'];
    $year_in_press = $form_values['publication']['yearInPress'];
    $year_published = $form_values['publication']['yearPublished'];
    $publication_title = $form_values['publication']['title'];
    $publication_abstract = $form_values['publication']['abstract'];
    $publication_journal = $form_values['publication']['journal'];
    $genus = $form_values['genus'];
    $custom_species_check = $form_values['species']['other']['check'];
    $custom_species_genus = $form_values['species']['other']['textGenus'];
    $custom_species_species = $form_values['species']['other']['textSpecies'];
    
    if ($publication_status == 0){
        form_set_error('publication][status', 'Publication Status: field is required.');
    }
    elseif($publication_status == 2 or $publication_status == 3 or $publication_status == 4){
        if ($secondary_authors_number == 0){
            form_set_error('publication][secondaryAuthors][number', 'Number of Secondary Authors: field is required.');
        }
        elseif ($secondary_authors_number == 32){
            //need to find out how to validate file uploads. 
            //may need to user hook_form_alter() functions.
            #print_r("'" . $secondary_authors_file . "'");
        }
        else{
            for($i = 1; $i <= $number_authors_required - 1; $i++){
                if ($secondary_authors_array[$i] == ''){
                    form_set_error("publication][secondaryAuthors][$i", "Secondary Author $i: field is required.");
                }
            }
        }
        
        if ($publication_status == 2 and $year_submitted == 0){
            form_set_error('publication][yearSubmitted', 'Year of Publication: field is required.');
        }
        elseif ($publication_status == 3 and $year_in_press == 0){
            form_set_error('publication][yearInPress', 'Year of Publication: field is required.');
        }
        elseif ($publication_status == 4 and $year_published == 0){
            form_set_error('publication][yearPublished', 'Year of Publication: field is required.');
        }
        
        if ($publication_title == ''){
            form_set_error('publication][title', 'Title of Publication: field is required.');
        }
        
        if ($publication_abstract == ''){
            form_set_error('publication][abstract', 'Abstract: field is required.');
        }
        
        if ($publication_journal == ''){
            form_set_error('publication][journal', 'Journal: field is required.');
        }
    }
    
    if ($custom_species_check == 0){
        if ($genus == '0'){
            form_set_error('genus', 'Genus: field is required.');
        }
        else{
            $species = $form_values['species'][$genus];
            if ($species == '0'){
                form_set_error("species][$genus", 'Species: field is required.');
            }
        }
    }
    else{
        if ($custom_species_genus == ''){
            form_set_error('species][other][textGenus', 'Custom Genus: field is required.');
        }
        
        if ($custom_species_species == ''){
            form_set_error('species][other][textSpecies', 'Custom Species: field is required.');
        }
    }
}

function custom_module_showCustomModuleForm_submit($form, &$form_state) {
/*//    Values in the fields need to be submitted to a junk table in chado schema
//    $form_state['values'] for secondary author textfield is blank?
    $primaryAuthor = $form_state['values']['primaryAuthor'];
    $orginization = $form_state['values']['organization'];
    $publicationStatus = $form_state['values']['publicationStatus'];
    $journal = $form_state['values']['journal'];
    $title = $form_state['values']['title'];
    $year = $form_state['values']['year'];
    $abstract = $form_state['values']['abstract'];
    
    $submitArr = array($primaryAuthor, $orginization, $publicationStatus, $journal, $title, $year, $abstract);
    for ($i = 0; $i <= 10; $i++){
        if ($form_state['values']['secondaryAuthorForm' . $i] == 'Other'){
//            send $form_state['values']['secondaryAuthorCustomForm' . $i] to temporary table
        }
        
        else{
//            send $form_state['values']['secondaryAuthorForm' . $i] to temporary table
        }
        
        if ($form_state['values']['species' . $i] == 'Other'){
//            send $form_state['values']['customSpecies' . $i] to temporary table            
        }
        
        else{
//            send $form_state['values']['species' . $i] to temporary table
        }
    }

//     foreach($submitArr as $r) {
//        db_query('INSERT INTO chado.custom_table_version 2 (custom_field) '
//            . 'VALUES (' . $r 
//            . ' )');
//    }
//    
//     $authorResults = db_query('SELECT contact.contact_id, contact.name FROM chado.contact WHERE contact.type_id = 71 ORDER BY contact.name LIMIT 200');
//    
//    
//    
//    $rawKeywords = $form_state['values']['keywords']; 
//    $keyWords = explode(',', $rawKeywords);      
    
//    $secondaryAuthorArr = array();
//    
//    }*/
    

    $form_state['redirect'] = 'secondPage';
 
}

function custom_module_showCustomModuleForm_second_page() {
    
    function studyDate($type, &$form){
        
        $form[$type . 'Date'] = array(
          '#prefix' => '<div class="container-inline">', 
          '#type' => 'fieldset',
          '#title' => t($type . ' Date'),
          '#tree' => TRUE,
        );
        
        $yearArr = array();
        $yearArr[0] = '-Select-';
        for ($i = 1950; $i <= 2017; $i++) {
            $index = $i - 1949;
            $yearArr[$index] = $i;
        }
        

        $form[$type . 'Date']['year'] = array(
          '#type' => 'select',
          '#title' => t('Year'),
          '#options' => $yearArr,
          '#default_value' => 0,
          '#required' => true,
        );
        
        $form[$type . 'Date']['month'] = array(
          '#type' => 'select',
          '#title' => t('Month'),
          '#options' => array(
            0 => '-Select-',
            1 => 'January',
            2 => 'February',
            3 => 'March',
            4 => 'April',
            5 => 'May',
            6 => 'June',
            7 => 'July',
            8 => 'August',
            9 => 'September',
            10 => 'October',
            11 => 'November',
            12 => 'December'
          ),
          '#default_value' => 0,
          '#required' => true,
          '#suffix' => '</div>',
          '#states' => array(
            'invisible' => array(
              ':input[name="' . $type . 'Date[year]"]' => array('value' => '0')
            )
          )
        );
        
        return $form;
    }
    
    function studyLocation(&$form){
        
        $form['studyLocation'] = array(
          '#type' => 'fieldset',
          '#title' => t('Study Location:'),
          '#tree' => TRUE,
        );
        
        $form['studyLocation']['type'] = array(
          '#type' => 'select',
          '#title' => t('Location Format:'),
          '#options' => array(
            0 => 'Please select a location type',
            1 => 'Latitude/Longitude (WGS 84)',
            3 => 'Latitude/Longitude (NAD 83)',
            4 => 'Latitude/Longitude (ETRS 89)',
            2 => 'Custom Location'
          ),
          '#default_value' => 0,
          '#required' => TRUE
        );

        $form['studyLocation']['latitude'] = array(
          '#type' => 'textfield',
          '#title' => t('Latitude'),
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="studyLocation[type]"]' => array('value' => '1')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '3')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="studyLocation[type]"]' => array('value' => '1')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '3')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '4')),
              )
            ),
          ),
        );

        $form['studyLocation']['longitude'] = array(
          '#type' => 'textfield',
          '#title' => t('Longitude'),
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="studyLocation[type]"]' => array('value' => '1')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '3')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="studyLocation[type]"]' => array('value' => '1')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '3')),
                'or',
                array(':input[name="studyLocation[type]"]' => array('value' => '4')),
              )
            ),
          ),
        );
        
        $form['studyLocation']['customLocation'] = array(
          '#type' => 'fieldset',
        );

        $form['studyLocation']['customLocation']['country'] = array(
          '#type' => 'textfield',
          '#title' => t('Country:'),
          '#states' => array(
            'required' => array(
              ':input[name="studyLocation[type]"]' => array('value' => '2')
            ),
            'visible' => array(
              ':input[name="studyLocation[type]"]' => array('value' => '2')
            ),
          )
        );
        
        $form['studyLocation']['customLocation']['region'] = array(
          '#type' => 'textfield',
          '#title' => t('State/Province/Region:'),
          '#states' => array(
            'invisible' => array(
              ':input[name="studyLocation[customLocation][country]"]' => array('empty' => true)
            )
          )
        );
        
        return $form;
    }
    
    function naturalPopulation(&$form){
        
        $form['naturalPopulation'] = array(
          '#type' => 'fieldset',
          '#title' => t('Natural Population/Landscape Information:'),
          '#tree' => TRUE,
          '#states' => array(
            'visible' => array(
              ':input[name="studyType"]' => array('value' => '1')
            ),
            'required' => array(
              ':input[name="studyType"]' => array('value' => '1')
            ),
            'enabled' => array(
              ':input[name="studyType"]' => array('value' => '1')
            )
          )
        );
        
        $form['naturalPopulation']['season'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Season (select all that apply):'),
          '#options' => drupal_map_assoc(array(
            t('Spring'),
            t('Summer'),
            t('Fall'),
            t('Winter'),
          )),
        );
        
        $form['naturalPopulation']['assessions'] = array(
          '#type' => 'textfield',
          '#title' => t('Number of times the populations were assessed (on average):')
        );
        
        return $form;
    }
    
    function growthChamber(&$form){
        
        function co2(&$form){
            
            $form['growthChamber']['co2Control'] = array(
              '#type' => 'fieldset',
              '#tree' => true
            );

            $form['growthChamber']['co2Control']['option'] = array(
              '#type' => 'select',
              '#title' => t('CO2 controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select CO2 control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '2')
                )
              )
            );

            $form['growthChamber']['co2Control']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled CO2 Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[co2Control][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="growthChamber[co2Control][option]"]' => array('value' => '1')
                )
              )
            );

            $form['growthChamber']['co2Control']['uncontrolled'] = array(
              '#type' => 'textfield',
              '#title' => t('Average CO2 Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[co2Control][option]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="growthChamber[co2Control][option]"]' => array('value' => '2')
                )
              )
            );
            
            return $form;
        }
        
        function humidity(&$form){
            
            $form['growthChamber']['humidityControl'] = array(
              '#type' => 'fieldset',
              '#tree' => true,
            );

            $form['growthChamber']['humidityControl']['option'] = array(
              '#type' => 'select',
              '#title' => t('Air Humidity controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select air humidity control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '2')
                )
              )
            );

            $form['growthChamber']['humidityControl']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled Air Humidity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[humidityControl][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="growthChamber[humidityControl][option]"]' => array('value' => '1')
                )
              )
            );

            $form['growthChamber']['humidityControl']['uncontrolled'] = array(
              '#type' => 'textfield',
              '#title' => t('Average Air Humidity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[humidityControl][option]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="growthChamber[humidityControl][option]"]' => array('value' => '2')
                )
              )
            );
            
            return $form;
        }
        
        function light(&$form){
            
            $form['growthChamber']['lightControl'] = array(
              '#type' => 'fieldset',
              '#tree' => true,
            );

            $form['growthChamber']['lightControl']['option'] = array(
              '#type' => 'select',
              '#title' => t('Light Intensity controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select Light Intensity control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '2')
                )
              )
            );

            $form['growthChamber']['lightControl']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled Light Intensity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[lightControl][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="growthChamber[lightControl][option]"]' => array('value' => '1')
                )
              )
            );

            $form['growthChamber']['lightControl']['uncontrolled'] = array(
              '#type' => 'textfield',
              '#title' => t('Average Light Intensity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[lightControl][option]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="growthChamber[lightControl][option]"]' => array('value' => '2')
                )
              )
            );
            
            return $form;
        }
        
        function ph(&$form){
            
            $form['growthChamber']['rooting']['ph'] = array(
              '#type' => 'fieldset',
              '#tree' => true
            );

            $form['growthChamber']['rooting']['ph']['option'] = array(
              '#type' => 'select',
              '#title' => t('pH controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select pH control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '2')
                )
              )
            );

            $form['growthChamber']['rooting']['ph']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled pH Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[rooting][ph][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="growthChamber[rooting][ph][option]"]' => array('value' => '1')
                )
              )
            );

            $form['growthChamber']['rooting']['ph']['uncontrolled'] = array(
              '#type' => 'textfield',
              '#title' => t('Average pH Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[rooting][ph][option]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="growthChamber[rooting][ph][option]"]' => array('value' => '2')
                )
              )
            );
            
            return $form;
        }
        
        $form['growthChamber'] = array(
          '#type' => 'fieldset',
          '#title' => t('Growth Chamber Information:'),
          '#tree' => TRUE,
          '#states' => array(
            'visible' => array(
              ':input[name="studyType"]' => array('value' => '2')
            ),
            'enabled' => array(
              ':input[name="studyType"]' => array('value' => '2')
            )
          )
        );
        
        co2($form);
        
        humidity($form);
        
        light($form);

        $form['growthChamber']['temp'] = array(
          '#type' => 'fieldset',
          '#title' => t('Temperature Information:'),
          '#description' => t('Please provide temperatures in Degrees Celsius'),
          '#tree' => true,
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '2')
            )
          )
        );

        $form['growthChamber']['temp']['high'] = array(
          '#type' => 'textfield',
          '#title' => t('Average High Temperature'),
        );

        $form['growthChamber']['temp']['low'] = array(
          '#type' => 'textfield',
          '#title' => t('Average Low Temperature'),
        );
        
        $form['growthChamber']['rooting'] = array(
          '#type' => 'fieldset',
          '#title' => t('Rooting Information:'),
          '#tree' => true,
        );
        
        $form['growthChamber']['rooting']['option'] = array(
          '#type' => 'select',
          '#title' => t('Rooting Type:'),
          '#options' => array(
            0 => 'Please select a rooting type',
            1 => 'Aeroponics',
            2 => 'Hydroponics',
            3 => 'Soil',
          ),
          '#default_value' => 0,
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '2')
            )
          )
        );
        
        $form['growthChamber']['rooting']['soil'] = array(
          '#type' => 'fieldset',
          '#title' => t('Soil Information:'),
          '#states' => array(
            'visible' => array(
              ':input[name="growthChamber[rooting][option]"]' => array('value' => '3')
            )
          )
        );
        
        $form['growthChamber']['rooting']['soil']['type'] = array(
          '#type' => 'select',
          '#title' => t('Soil Type:'),
          '#options' => array(
            0 => 'Please select a soil type',
            1 => 'Sand',
            2 => 'Peat',
            3 => 'Clay',
            4 => 'Mixed',
            5 => 'Other'
          ),
          '#states' => array(
            'required' => array(
              ':input[name="growthChamber[rooting][option]"]' => array('value' => '3')
            )
          )
        );
        
        $form['growthChamber']['rooting']['soil']['other'] = array(
          '#type' => 'textfield',
          '#states' => array(
            'visible' => array(
              ':input[name="growthChamber[rooting][soil][type]"]' => array('value' => '5')
            ),
            'required' => array(
              ':input[name="growthChamber[rooting][soil][type]"]' => array('value' => '5')
            )
          )
        );
        
        $form['growthChamber']['rooting']['soil']['container'] = array(
          '#type' => 'textfield',
          '#title' => t('Soil Container Type:'),
          '#states' => array (
            'required' => array(
              ':input[name="growthChamber[rooting][option]"]' => array('value' => '3')
            )
          )
        );
        
        ph($form);
        
        $treatment_options = drupal_map_assoc(array(
            t('Seasonal Environment'),
            t('Air temperature regime'),
            t('Soil Temperature regime'),
            t('Antibiotic regime'),
            t('Chemical administration'),
            t('Disease status'),
            t('Fertilizer regime'),
            t('Fungicide regime'),
            t('Gaseous regime'),
            t('Gravity Growth hormone regime'),
            t('Mechanical treatment'),
            t('Mineral nutrient regime'),
            t('Humidity regime'),
            t('Non-mineral nutrient regime'),
            t('Radiation (light, UV-B, X-ray) regime'),
            t('Rainfall regime'),
            t('Salt regime'),
            t('Watering regime'),
            t('Water temperature regime'),
            t('Pesticide regime'),
            t('pH regime'),
            t('other perturbation'),
          ));
        
        $form['growthChamber']['rooting']['treatment'] = array(
          '#type' => 'fieldset',
          '#title' => t('Rooting Treatments:'),
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '2')
            )
          )
        );
        
        foreach($treatment_options as $key => $option){
            $form['growthChamber']['rooting']['treatment']["$option"] = array(
              '#type' => 'checkbox',
              '#title' => t("$option")
            );
            $form['growthChamber']['rooting']['treatment']["$option-description"] = array(
              '#type' => 'textfield',
              '#description' => t("$option Description"),
              '#states' => array(
                'visible' => array(
                  ':input[name="growthChamber[rooting][treatment][' . $option . ']"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="growthChamber[rooting][treatment][' . $option . ']"]' => array('checked' => TRUE)
                )
              )
            );
        }
        
        return $form;
    }
    
    function greenhouse(&$form){
        
        function greenhumidity(&$form){
            
            $form['greenhouse']['humidityControl'] = array(
              '#type' => 'fieldset',
              '#tree' => true,
            );

            $form['greenhouse']['humidityControl']['option'] = array(
              '#type' => 'select',
              '#title' => t('Air Humidity controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select air humidity control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '3')
                )
              )
            );

            $form['greenhouse']['humidityControl']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled Air Humidity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="greenhouse[humidityControl][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="greenhouse[humidityControl][option]"]' => array('value' => '1')
                )
              )
            );
            
            return $form;
        }
        
        function greenlight(&$form){
            
            $form['greenhouse']['lightControl'] = array(
              '#type' => 'fieldset',
              '#tree' => true,
            );

            $form['greenhouse']['lightControl']['option'] = array(
              '#type' => 'select',
              '#title' => t('Light Intensity controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select Light Intensity control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '3')
                )
              )
            );

            $form['greenhouse']['lightControl']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled Light Intensity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="greenhouse[lightControl][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="greenhouse[lightControl][option]"]' => array('value' => '1')
                )
              )
            );
            
            return $form;
        }
        
        function greenph(&$form){
            
            $form['greenhouse']['rooting']['ph'] = array(
              '#type' => 'fieldset',
              '#tree' => true
            );

            $form['greenhouse']['rooting']['ph']['option'] = array(
              '#type' => 'select',
              '#title' => t('pH controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select pH control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '3')
                )
              )
            );

            $form['greenhouse']['rooting']['ph']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled pH Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="greenhouse[rooting][ph][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="greenhouse[rooting][ph][option]"]' => array('value' => '1')
                )
              )
            );
            
            return $form;
        }
        
        $form['greenhouse'] = array(
          '#type' => 'fieldset',
          '#title' => t('Greenhouse Information:'),
          '#tree' => TRUE,
          '#states' => array(
            'visible' => array(
              ':input[name="studyType"]' => array('value' => '3')
            ),
            'enabled' => array(
              ':input[name="studyType"]' => array('value' => '3')
            )
          )
        );
        
        greenhumidity($form);
        
        greenlight($form);

        $form['greenhouse']['temp'] = array(
          '#type' => 'fieldset',
          '#title' => t('Temperature Information:'),
          '#description' => t('Please provide temperatures in Degrees Celsius'),
          '#tree' => true,
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '3')
            )
          )
        );

        $form['greenhouse']['temp']['day'] = array(
          '#type' => 'textfield',
          '#title' => t('Average Day Temperature'),
        );

        $form['greenhouse']['temp']['night'] = array(
          '#type' => 'textfield',
          '#title' => t('Average Night Temperature'),
        );
        
        $form['greenhouse']['rooting'] = array(
          '#type' => 'fieldset',
          '#title' => t('Rooting Information:'),
          '#tree' => true,
        );
        
        $form['greenhouse']['rooting']['option'] = array(
          '#type' => 'select',
          '#title' => t('Rooting Type:'),
          '#options' => array(
            0 => 'Please select a rooting type',
            1 => 'Aeroponics',
            2 => 'Hydroponics',
            3 => 'Soil',
          ),
          '#default_value' => 0,
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '3')
            )
          )
        );
        
        $form['greenhouse']['rooting']['soil'] = array(
          '#type' => 'fieldset',
          '#title' => t('Soil Information:'),
          '#states' => array(
            'visible' => array(
              ':input[name="greenhouse[rooting][option]"]' => array('value' => '3')
            )
          )
        );
        
        $form['greenhouse']['rooting']['soil']['type'] = array(
          '#type' => 'select',
          '#title' => t('Soil Type:'),
          '#options' => array(
            0 => 'Please select a soil type',
            1 => 'Sand',
            2 => 'Peat',
            3 => 'Clay',
            4 => 'Mixed',
            5 => 'Other'
          ),
          '#states' => array(
            'required' => array(
              ':input[name="greenhouse[rooting][option]"]' => array('value' => '3')
            )
          )
        );
        
        $form['greenhouse']['rooting']['soil']['other'] = array(
          '#type' => 'textfield',
          '#states' => array(
            'visible' => array(
              ':input[name="greenhouse[rooting][soil][type]"]' => array('value' => '5')
            ),
            'required' => array(
              ':input[name="greenhouse[rooting][soil][type]"]' => array('value' => '5')
            )
          )
        );
        
        $form['greenhouse']['rooting']['soil']['container'] = array(
          '#type' => 'textfield',
          '#title' => t('Soil Container Type:'),
          '#states' => array (
            'required' => array(
              ':input[name="greenhouse[rooting][option]"]' => array('value' => '3')
            )
          )
        );
        
        greenph($form);
        
        $treatment_options = drupal_map_assoc(array(
            t('Seasonal Environment'),
            t('Air temperature regime'),
            t('Soil Temperature regime'),
            t('Antibiotic regime'),
            t('Chemical administration'),
            t('Disease status'),
            t('Fertilizer regime'),
            t('Fungicide regime'),
            t('Gaseous regime'),
            t('Gravity Growth hormone regime'),
            t('Mechanical treatment'),
            t('Mineral nutrient regime'),
            t('Humidity regime'),
            t('Non-mineral nutrient regime'),
            t('Radiation (light, UV-B, X-ray) regime'),
            t('Rainfall regime'),
            t('Salt regime'),
            t('Watering regime'),
            t('Water temperature regime'),
            t('Pesticide regime'),
            t('pH regime'),
            t('other perturbation'),
          ));
        
        $form['greenhouse']['rooting']['treatment'] = array(
          '#type' => 'fieldset',
          '#title' => t('Rooting Treatments:'),
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '3')
            )
          )
        );
        
        foreach($treatment_options as $key => $option){
            $form['greenhouse']['rooting']['treatment']["$option"] = array(
              '#type' => 'checkbox',
              '#title' => t("$option")
            );
            $form['greenhouse']['rooting']['treatment']["$option-description"] = array(
              '#type' => 'textfield',
              '#description' => t("$option Description"),
              '#states' => array(
                'visible' => array(
                  ':input[name="greenhouse[rooting][treatment][' . $option . ']"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="greenhouse[rooting][treatment][' . $option . ']"]' => array('checked' => TRUE)
                )
              )
            );
        }
        
        return $form;
    }
    
    function commonGarden(&$form){
        
        function salinity(&$form){
            
            $form['commonGarden']['salinity'] = array(
              '#type' => 'fieldset',
              '#tree' => true
            );

            $form['commonGarden']['salinity']['option'] = array(
              '#type' => 'select',
              '#title' => t('Salinity controlled or uncontrolled'),
              '#options' => array(
                0 => 'Please select Salinity control',
                1 => 'Controlled',
                2 => 'Uncontrolled'
              ),
              '#default_value' => 0,
              '#states' => array(
                'required' => array(
                  ':input[name="studyType"]' => array('value' => '4')
                )
              )
            );

            $form['commonGarden']['salinity']['controlled'] = array(
              '#type' => 'textfield',
              '#title' => t('Controlled Salinity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="commonGarden[salinity][option]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="commonGarden[salinity][option]"]' => array('value' => '1')
                )
              )
            );

            $form['commonGarden']['salinity']['uncontrolled'] = array(
              '#type' => 'textfield',
              '#title' => t('Average Salinity Value:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="commonGarden[salinity][option]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="commonGarden[salinity][option]"]' => array('value' => '2')
                )
              )
            );
            
            return $form;
        }
        
        $form['commonGarden'] = array(
          '#type' => 'fieldset',
          '#title' => t('Common Garden Information:'),
          '#tree' => TRUE,
          '#states' => array(
            'visible' => array(
              ':input[name="studyType"]' => array('value' => '4')
            ),
            'enabled' => array(
              ':input[name="studyType"]' => array('value' => '4')
            )
          )
        );
        
        $form['commonGarden']['irrigation'] = array(
          '#type' => 'fieldset',
          '#tree' => true,
        );
        
        $form['commonGarden']['irrigation']['option'] = array(
          '#type' => 'select',
          '#title' => t('Irrigation type:'),
          '#options' => array(
            0 => 'Please select an irrigation type',
            1 => 'Irrigation from top',
            2 => 'Irrigation from bottom',
            3 => 'Drip Irrigation',
            4 => 'Other',
            5 => 'No Irrigation',
          ),
          '#default_value' => 0,
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '4')
            )
          )
        );
        
        $form['commonGarden']['irrigation']['other'] = array(
          '#type' => 'textfield',
          '#states' => array(
            'visible' => array(
              ':input[name="commonGarden[irrigation][option]"]' => array('value' => '4')
            ),
            'required' => array(
              ':input[name="commonGarden[irrigation][option]"]' => array('value' => '4')
            )
          )
        );
        
        salinity($form);
        
        $form['commonGarden']['bioticEnv'] = array(
          '#type' => 'fieldset',
          '#tree' => true,
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '4')
            )
          )
        );
        
        $form['commonGarden']['bioticEnv']['option'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Biotic Environment'),
          '#options' => drupal_map_assoc(array(
            t('Herbivores'),
            t('Mutulists'),
            t('Pathogens'),
            t('Endophytes'),
            t('Other'),
            t('None'),
          )),
        );
        
        $form['commonGarden']['bioticEnv']['other'] = array(
          '#type' => 'textfield',
          '#title' => t('Please specify Biotic Environment Type:'),
          '#states' => array(
            'visible' => array(
              ':input[name="commonGarden[bioticEnv][option][Other]"]' => array('checked' => TRUE)
            ),
            'required' => array(
              ':input[name="commonGarden[bioticEnv][option][Other]"]' => array('checked' => TRUE)
            )
          )
        );
        
        $form['commonGarden']['season'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Seasons:'),
          '#options' => drupal_map_assoc(array(
            t('Spring'),
            t('Summer'),
            t('Fall'),
            t('Winter'),
          )),
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '4')
            )
          )
        );
        
        $treatment_options = drupal_map_assoc(array(
            t('Seasonal environment'),
            t('Antibiotic regime'),
            t('Chemical administration'),
            t('Disease status'),
            t('Fertilizer regime'),
            t('Fungicide regime'),
            t('Gaseous regime'),
            t('Gravity Growth hormone regime'),
            t('Herbicide regime'),
            t('Mechanical treatment'),
            t('Mineral nutrient regime'),
            t('Non-mineral nutrient regime'),
            t('Salt regime'),
            t('Watering regime'),
            t('Pesticide regime'),
            t('pH regime'),
            t('Other perturbation')
          ));
        
        $form['commonGarden']['treatment'] = array(
          '#type' => 'fieldset',
          '#title' => t('Treatments:'),
          '#states' => array(
            'required' => array(
              ':input[name="studyType"]' => array('value' => '4')
            )
          )
        );
        
        foreach($treatment_options as $key => $option){
            $form['commonGarden']['treatment']["$option"] = array(
              '#type' => 'checkbox',
              '#title' => t("$option")
            );
            $form['commonGarden']['treatment']["$option-description"] = array(
              '#type' => 'textfield',
              '#description' => t("$option Description"),
              '#states' => array(
                'visible' => array(
                  ':input[name="commonGarden[treatment][' . $option . ']"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="commonGarden[treatment][' . $option . ']"]' => array('checked' => TRUE)
                )
              )
            );
        }
        
        return $form;
    }
    
    studyDate('Starting', $form);
    
    studyDate('Ending', $form);
    
    studyLocation($form);

    $form['studyType'] = array(
      '#type' => 'select',
      '#title' => t('Study Type:'),
      '#options' => array(
        0 => 'Please select the type of study',
        1 => 'Natural Population (Landscape)',
        2 => 'Growth Chamber',
        3 => 'Greenhouse',
        4 => 'Experimental/Common Garden',
        5 => 'Plantation',
      ),
      '#default_value' => 0,
      '#required' => true,
    );
    
    naturalPopulation($form);
    
    growthChamber($form);
    
    greenhouse($form);
    
    commonGarden($form);
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");

    return $form;
}

function custom_module_showCustomModuleForm_second_page_validate($form, &$form_state) {
    /*$studyType = $form_state['values']['studyType'];
    
    $CO2 = $form_state['values']['growthChamberCO2'];
    $UncontrolledCO2 = $form_state['values']['growthChamber_CO2Controlled'];
    $ControlledCO2 = $form_state['values']['growthChamber_CO2Controlled'];
    
    $airHumidity = $form_state['values']['growthChamberAirHumidity'];
    $controlledairHumidity = $form_state['values']['growthChamber_AirHumidityControlled'];
    $controlledairHumidity = $form_state['values']['growthChamber_AirHumidityUncontrolled'];
    
    $lightIntensity = $form_state['values']['growthChamberLightIntensity'];
    $controlledLightIntensity = $form_state['values']['growthChamber_LightIntensityControlled'];
    
    
    $soil = $form_state['values']['growthChamberSoil'];
    $soilType = $form_state['values']['growthChamber_SoilType'];
    $soilContainerType = $form_state['values']['growthChamber_SoilContainerType'];
    
    if ($studyType == 'Growth Chamber'){
        
        if ($CO2 == 'Controlled' && $ControlledCO2 == '') {
            form_set_error('Please input a value for controlled CO2');
            
        }
        
        else if ($CO2 == 'Uncontrolled' && $UncontrolledCO2 == ''){
            form_set_error('Please input a value for uncontrolled CO2');
    }
    
        if ($airHumidity == 'Controlled' && $controlledairHumidity == ''){
            form_set_error('Please input a value for controlled air humidity');
        }
        
        elseif($airHumidity == 'Uncontrolled' && $UncontrolledCO2 == ''){
            form_set_error('Please input a value for uncontrolled air humidity');
        }
        
        if ($lightIntensity == 'Controlled' && $controlledLightIntensity == ''){
            form_set_error('Please input a value for light intensity');
        }
        
    
    elseif ($studyType == 'Experimental/Common Garden'){
        
    }
    else{
        
    }
}*/

    }

function custom_module_showCustomModuleForm_second_page_submit($form, &$form_state) {
   /*$startMonth = $form_state['values']['startingDate'][1]['Month'];
   $startYear = $form_state['values']['startingDate'][1]['Year'];
   $startDay = $form_state['values']['startingDate'][1]['Day'];
   
   $endMonth = $form_state['values']['endingDate'][1]['Month'];
   $endYear = $form_state['values']['endingDate'][1]['Year'];
   $endDay = $form_state['values']['endingDate'][1]['Day'];
   
   $location = $form_state['values']['location'];
   $studyType = $form_state['values']['studyType'];*/
    
   $form_state['redirect'] = 'thirdPage';
   
   
   
   
   
   

//    To be implemented
}

function custom_module_showCustomModuleForm_third_page() {
    
    $form['dataType'] = array(
      '#type' => 'select',
      '#title' => t('Please select data type'),
      '#options' => array(
        'Genotype x Phenotype',
        'Genotype',
        'Genotype x Phenotype x Environment',
        'Phenotype x Environment',
        'Genotype x Environment'
      ),
      '#required' => TRUE,
    );
    
    function tree_access(&$form){
        
        $form['tree-access'] = array(
          '#type' => 'fieldset',
          '#title' => t('Tree Accession Information'),
          '#tree' => TRUE
        );

        $form['tree-access']['identifier'] = array(
          '#type' => 'textfield',
          '#title' => t('Identifier'),
          '#required' => TRUE
        );

        $form['tree-access']['location']['type'] = array(
          '#type' => 'select',
          '#title' => t('Location Type'),
          '#options' => array(
            0 => 'Please select a location type',
            1 => 'Latitude/Longitude (WGS 84)',
            3 => 'Latitude/Longitude (NAD 83)',
            4 => 'Latitude/Longitude (ETRS 89)',
            2 => 'Custom Location'
          ),
        );

        $form['tree-access']['location']['latitude'] = array(
          '#type' => 'textfield',
          '#title' => t('Latitude'),
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="tree-access[location][type]"]' => array('value' => '1')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '3')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="tree-access[location][type]"]' => array('value' => '1')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '3')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '4')),
              )
            )
          ),
        );

        $form['tree-access']['location']['longitude'] = array(
          '#type' => 'textfield',
          '#title' => t('Longitude'),
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="tree-access[location][type]"]' => array('value' => '1')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '3')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '4')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="tree-access[location][type]"]' => array('value' => '1')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '3')),
                'or',
                array(':input[name="tree-access[location][type]"]' => array('value' => '4')),
              )
            )
          ),
        );

        $form['tree-access']['location']['custom'] = array(
          '#type' => 'fieldset',
          '#title' => t('Enter a custom location'),
          '#states' => array(
            'visible' => array(
              ':input[name="tree-access[location][type]"]' => array('value' => '2')
            ),
          ),
        );
        
        $form['tree-access']['location']['custom']['country'] = array(
          '#type' => 'textfield',
          '#title' => t('Country:'),
          '#states' => array(
            'required' => array(
              ':input[name="tree-access[location][type]"]' => array('value' => '2')
            )
          )
        );
        
        $form['tree-access']['location']['custom']['region'] = array(
          '#type' => 'textfield',
          '#title' => t('State/Province/Region:'),
        );

        $form['tree-access']['age'] = array(
          '#type' => 'textfield',
          '#title' => t('Age and development Stage'),
          '#required' => TRUE
        );

        $form['tree-access']['tissue'] = array(
          '#type' => 'select',
          '#title' => t('Tissue types'),
          '#options' => array(
            'Tissue 1',
            'Tissue 2'
          ),
        );

        $form['tree-access']['clone'] = array(
          '#type' => 'textfield',
          '#title' => t('Clone and or pedigree information')
        );
        
        return $form;
    }
    
    function phenotype(&$form){
        
        $num_pheno = array();
        
        for($i = 0; $i < 20; $i++){
            $num_pheno[$i] = $i + 1;
        }
        $num_pheno[20] = '>20';

        $form['phenotype'] = array(
          '#type' => 'fieldset',
          '#title' => t('Phenotype Information:'),
          '#tree' => TRUE,
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="dataType"]' => array('value' => '0')),
                'or',
                array(':input[name="dataType"]' => array('value' => '2')),
                'or',
                array(':input[name="dataType"]' => array('value' => '3')),
              )
            ),
            'required' => array(
              array(
                array(':input[name="dataType"]' => array('value' => '0')),
                'or',
                array(':input[name="dataType"]' => array('value' => '2')),
                'or',
                array(':input[name="dataType"]' => array('value' => '3')),
              )
            )
          )
        );

        $form['phenotype']['number'] = array(
          '#type' => 'select',
          '#title' => t('Number of Phenotypes'),
          '#options' => $num_pheno,
        );

        for($i = 0; $i < 20; $i++){

            $visible_values = array();
            array_push($visible_values, array(':input[name="phenotype[number]"]' => array('value' => "$i")));

            for ($j = $i + 1; $j < 20; $j++){
                array_push($visible_values, 'or');
                array_push($visible_values, array(':input[name="phenotype[number]"]' => array('value' => "$j")));
            }

            $phenotype_label = $i + 1;
            $form['phenotype'][$i] = array(
              '#type' => 'fieldset',
              '#title' => t("Phenotype $phenotype_label"),
              '#states' => array(
                'visible' => array($visible_values),
                'required' => array($visible_values)
              )
            );

            $form['phenotype'][$i]['name'] = array(
              '#type' => 'textfield',
              '#title' => t('Name'),
              '#states' => array(
                'visible' => array($visible_values),
                'required' => array($visible_values)
              )
            );

            $form['phenotype'][$i]['phenotype_or_environmental'] = array(
              '#type' => 'select',
              '#title' => t('Phenotype or Environmental Variable:'),
              '#options' => array(
                2 => t('Please identify phenotype or environmental variable'),
                0 => t('Phenotype'),
                1 => t('Environmental Variable'),
              ),
              '#default_value' => 2,
              '#states' => array(
                'visible' => array($visible_values),
                'required' => array($visible_values)
              )
            );

            $form['phenotype'][$i]['type'] = array(
              '#type' => 'select',
              '#title' => t('Type'),
              '#options' => array(
                0 => 'Please select a type',
                1 => 'Binary',
                2 => 'Quantitative',
                3 => 'Qualitative'
              ),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );

            $form['phenotype'][$i]['binary'] = array(
              '#type' => 'fieldset',
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][type]"]' => array('value' => '1')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][type]"]' => array('value' => '1')
                )
              ),
            );

            $form['phenotype'][$i]['binary'][1] = array(
              '#type' => 'textfield',
              '#title' => t('Type 1:'),
            );

            $form['phenotype'][$i]['binary'][2] = array(
              '#type' => 'textfield',
              '#title' => t('Type 2:'),
            );

            $form['phenotype'][$i]['quantitative'] = array(
              '#type' => 'fieldset',
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][type]"]' => array('value' => '2')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][type]"]' => array('value' => '2')
                )
              ),
            );

            $form['phenotype'][$i]['quantitative']['min'] = array(
              '#type' => 'textfield',
              '#title' => t('Minimum value:'),
            );

            $form['phenotype'][$i]['quantitative']['max'] = array(
              '#type' => 'textfield',
              '#title' => t('Maximum value:'),
            );

            $form['phenotype'][$i]['description'] = array(
              '#type' => 'textarea',
              '#title' => t('Please provide a short description of your phenotype:'),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );

            $form['phenotype'][$i]['units'] = array(
              '#type' => 'select',
              '#title' => t('Units:'),
              '#options' => array(
                0 => 'Please select a unit type',
                1 => 'mm',
                2 => 'cm',
                3 => 'm',
                4 => 'Degrees Celsius',
                5 => 'Degrees Fahrenheit',
                6 => 'Other'
              ),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );

            $form['phenotype'][$i]['units-other'] = array(
              '#type' => 'textfield',
              '#title' => t('Define Unit type'),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][units]"]' => array('value' => '6')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][units]"]' => array('value' => '6')
                )
              )
            );
            
            $form['phenotype'][$i]['structure'] = array(
              '#type' => 'textfield',
              '#title' => t('Plant Structure:'),
              '#description' => t('Please choose a term that describes the plant structure the phenotype was measured on.'),
              '#autocomplete_path' => 'structure/autocomplete',
              '#maxlength' => 128,
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );
            
            $form['phenotype'][$i]['structure-custom'] = array(
              '#type' => 'fieldset',
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );
            
            $form['phenotype'][$i]['structure-custom']['check'] = array(
              '#type' => 'checkbox',
              '#title' => t('None of these terms meet my needs'),
              '#required' => false,
            );
            
            $form['phenotype'][$i]['structure-custom']['term'] = array(
              '#type' => 'textfield',
              '#title' => t('Please enter the name of your custom term'),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][structure-custom][check]"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][structure-custom][check]"]' => array('checked' => TRUE)
                ),
              )
            );
            
            $form['phenotype'][$i]['structure-custom']['definition'] = array(
              '#type' => 'textfield',
              '#title' => t('Please enter the definition of your custom term'),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][structure-custom][check]"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][structure-custom][check]"]' => array('checked' => TRUE)
                ),
              )
            );
            
            $form['phenotype'][$i]['developmental'] = array(
              '#type' => 'textfield',
              '#title' => t('Developmental Stage:'),
              '#description' => t('Please choose a term that describes the developmental stage the phenotype was measured on.'),
              '#autocomplete_path' => 'developmental/autocomplete',
              '#maxlength' => 128,
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );
            
            $form['phenotype'][$i]['developmental-custom'] = array(
              '#type' => 'fieldset',
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][phenotype_or_environmental]"]' => array('value' => '0')
                )
              )
            );
            
            $form['phenotype'][$i]['developmental-custom']['check'] = array(
              '#type' => 'checkbox',
              '#title' => t('None of these terms meet my needs'),
              '#required' => false
            );
            
            $form['phenotype'][$i]['developmental-custom']['term'] = array(
              '#type' => 'textfield',
              '#title' => t('Please enter the name of your custom term'),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][developmental-custom][check]"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][developmental-custom][check]"]' => array('checked' => TRUE)
                ),
              )
            );
            
            $form['phenotype'][$i]['developmental-custom']['definition'] = array(
              '#type' => 'textfield',
              '#title' => t('Please enter the definition of your custom term'),
              '#states' => array(
                'visible' => array(
                  ':input[name="phenotype[' . $i . '][developmental-custom][check]"]' => array('checked' => TRUE)
                ),
                'required' => array(
                  ':input[name="phenotype[' . $i . '][developmental-custom][check]"]' => array('checked' => TRUE)
                ),
              )
            );
        }

        $form['phenotype']['upload'] = array(
          '#type' => 'file',
          '#title' => t('Phenotype file'),
          '#title_display' => 'invisible',
          '#states' => array( 
            'visible' => array(
              ':input[name="phenotype[number]"]' => array('value' => '20')
            ),
            'required' => array(
              ':input[name="phenotype[number]"]' => array('value' => '20')
            )
          )
        );
        
        return $form;
    }
    
    function genotype(&$form){
        
        $form['genotype'] = array(
          '#type' => 'fieldset',
          '#title' => t('Genotype Information:'),
          '#tree' => TRUE,
          '#states' => array(
            'visible' => array(
              array(
                array(':input[name="dataType"]' => array('value' => '0')),
                'or',
                array(':input[name="dataType"]' => array('value' => '1')),
                'or',
                array(':input[name="dataType"]' => array('value' => '2')),
                'or',
                array(':input[name="dataType"]' => array('value' => '4')),
              )
            )
          )
        );
        
        $form['genotype']['marker-type'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Marker Type (select all that apply):'),
          '#options' => drupal_map_assoc(array(
            t('SNPs'),
            t('SSRs/cpSSRs'),
            t('Other'),
          ))
        );

        $form['genotype']['SNPs'] = array(
          '#type' => 'fieldset',
          '#title' => t('SNPs Information:'),
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[marker-type][SNPs]"]' => array('checked' => true)
            )
          )
        );

        $form['genotype']['SNPs']['genotyping-design'] = array(
          '#type' => 'select',
          '#title' => t('Define Genotyping Design'),
          '#options' => array(
            0 => 'Please select a Genotyping Design',
            1 => 'GBS',
            2 => 'Targeted Capture',
            3 => 'Whole Genome Resequencing',
            4 => 'RNA-Seq',
            5 => 'Genotyping Array'
          )
        );

        $form['genotype']['SNPs']['GBS'] = array(
          '#type' => 'select',
          '#title' => t('GBS Type'),
          '#options' => array(
            0 => 'Please select a GBS type',
            1 => 'RADSeq',
            2 => 'ddRAD-Seq',
            3 => 'NextRAD',
            4 => 'RAPTURE',
            5 => 'Other'
          ),
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[SNPs][genotyping-design]"]' => array('value' => '1')
            )
          )
        );

        $form['genotype']['SNPs']['GBS-other'] = array(
          '#type' => 'textfield',
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[SNPs][GBS]"]' => array('value' => '5'),
              ':input[name="genotype[SNPs][genotyping-design]"]' => array('value' => '1')
            )
          )
        );

        $form['genotype']['SNPs']['targeted-capture'] = array(
          '#type' => 'select',
          '#title' => t('Targeted Capture Type'),
          '#options' => array(
            0 => 'Please select a Targeted Capture Type',
            1 => 'Exome Capture',
            2 => 'Other'
          ),
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[SNPs][genotyping-design]"]' => array('value' => '2')
            )
          )
        );

        $form['genotype']['SNPs']['targeted-capture-other'] = array(
          '#type' => 'textfield',
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[SNPs][targeted-capture]"]' => array('value' => '2'),
              ':input[name="genotype[SNPs][genotyping-design]"]' => array('value' => '2')
            )
          )
        );

        $form['genotype']['SNPs']['bioproject'] = array(
          '#type' => 'textfield',
          '#title' => 'BioProject ID:'
        );

        $form['genotype']['SNPs']['SNP-file-type'] = array(
          '#type' => 'select',
          '#title' => 'SNP File:',
          '#options' => array(
            0 => 'Please select an SNP file type',
            1 => '.VCF',
            2 => 'Spreadsheet',
          )
        );

        $form['genotype']['SNPs']['SNP-VCF'] = array(
          '#type' => 'file',
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[SNPs][SNP-file-type]"]' => array('value' => '1')
            )
          )
        );

        $form['genotype']['SNPs']['SNP-spreadsheet'] = array(
          '#type' => 'file',
          '#description' => t('Please provide a spreadsheet with the following columns:<br>'
              . '   SNP Name<br>   Type(indel/SNP)<br>   Location<br>   Quality Score<br>   Allele/Reference Allele<br><br>'
              . 'Optional columns:<br>'
              . '   Coverage Depth<br>   Mapping Quality Score<br>'),
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[SNPs][SNP-file-type]"]' => array('value' => '2')
            )
          )
        );

        $form['genotype']['SSRs/cpSSRs'] = array(
          '#type' => 'fieldset',
          '#title' => t('SSRs/cpSSRs Information:'),
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[marker-type][SSRs/cpSSRs]"]' => array('checked' => true)
            )
          )
        );

        $form['genotype']['SSRs/cpSSRs']['define-type'] = array(
          '#type' => 'textfield',
          '#title' => t('Define Type:'),
        );

        $form['genotype']['SSRs/cpSSRs']['load-file'] = array(
          '#type' => 'file',
          '#title' => t('Load File with primer information and marker for each individual genotype:'),
        );

        $form['genotype']['other'] = array(
          '#type' => 'fieldset',
          '#title' => t('Other Marker Type Information:'),
          '#states' => array(
            'visible' => array(
              ':input[name="genotype[marker-type][Other]"]' => array('checked' => true)
            )
          )
        );

        $form['genotype']['other']['define-type'] = array(
          '#type' => 'textfield',
          '#title' => t('Define Type:'),
        );

        $form['genotype']['other']['load-file'] = array(
          '#type' => 'file',
          '#title' => t('Load File:')
        );
        
        return $form;
    };
    
    tree_access($form);
    
    phenotype($form);
    
    genotype($form);
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#title' => t('Submit'),
      '#value' => t('Submit')
    );

    drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");
    
    return $form;
}

function custom_module_showCustomModuleForm_third_page_validate($form, &$form_state){

}

function custom_module_showCustomModuleForm_third_page_submit($form, &$form_state) {
    $form_state['redirect'] = 'fourthPage';
}

function _structure_autocomplete($string){
    $matches = array();
    $result = db_select('chado.cv', 'cv')
        ->fields('cv', array('name', 'definition'))
        ->condition('name', '%' . db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        if ($row->definition != ""){
            $matches[$row->name] = check_plain($row->name . ":  " . $row->definition);
        }
        else{
            $matches[$row->name] = check_plain($row->name . ":  No definition on record");
        }
    }
    
    drupal_json_output($matches);
}

function _development_autocomplete($string){
    $matches = array();
    $result = db_select('chado.cv', 'cv')
        ->fields('cv', array('name', 'definition'))
        ->condition('name', '%' . db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        if ($row->definition != ""){
            $matches[$row->name] = check_plain($row->name . ":  " . $row->definition);
        }
        else{
            $matches[$row->name] = check_plain($row->name . ":  No definition on record");
        }
    }
    
    drupal_json_output($matches);
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', '%' . db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->range(0, 50)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', '%' . db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->range(0, 50)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', '%' . db_like($string) . '%', 'LIKE')
        ->range(0, 50)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function custom_module_showCustomModuleForm_fourth_page(){
    
    /*$form['button'] = array(
      '#type' => 'button',
      '#button_type' => 'button',
      '#title' => t('Button-Title'),
      '#value' => t('Button-Value'),
      '#submit' => array(),
    );*/
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#title' => t('Submit'),
      '#value' => t('Submit')
    );
    
    return $form;
}

function custom_module_showCustomModuleForm_fourth_page_validate($form, &$form_state){

}

function custom_module_showCustomModuleForm_fourth_page_submit($form, &$form_state) {
    $form_state['redirect'] = 'fourthPage';
}