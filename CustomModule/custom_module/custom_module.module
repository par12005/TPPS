<?php

//hook_init
function custom_module_init() {

    // drupal_set_message("Hello");
}

function custom_module_menu() {

    $items = array();

    $items['Hellopage'] = array(
      'title' => 'TGDR Development',
      'description' => 'Hello, Users',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'custom_module_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );

    return $items;
}

//This function is only necessary when using AJAX
function custom_module_ajaxCallHandler() {

    global $user;

    if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'my secret value' . $user->uid)) {
        return MENU_ACCESS_DENIED;
    }

    echo "Hello, " . filter_xss($_GET['name']) . "!";
}

/* This function is what literally shows the form to the user
 * It contains all of the form elements.  They are all defined 
 * in Drupal's API format
 */

function custom_module_showCustomModuleForm() {

    $form = array();

    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => 'Enter Your Name'
    );

    $form['primaryAuthor'] = array(
      '#type' => 'select',
      '#title' => t('Primary Author'),
      '#options' => array(
        0 => t('--Primary Author--'),
        1 => t('Author 1'),
        2 => t('Author 2'),
        3 => t('Author n'),
      ),
      '#default_value' => 0,
      '#description' => t('Some explanation as to who user should select as primary author.'),
    );

    $form['addSecondaryAuthor'] = array(
      '#type' => 'submit',
      '#value' => t('Add Secondary Author'),
      '#submit' => array('secondary_author_function'),
    );

    $form['secondaryAuthor'] = array(
      '#type' => 'select',
      '#title' => t('Secondary Author'),
      '#options' => array(
        0 => t('--Secondary Author--'),
        1 => t('Author 1'),
        2 => t('Author 2'),
        3 => t('Author n'),
      ),
      '#default_value' => 0,
      '#description' => t('Some explanation as to who user should select as secondary author.'),
    );

    $form['organization'] = array(
      '#type' => 'select',
      '#title' => t('Organization'),
      '#options' => array(
        0 => t('--Organization--'),
        1 => t('Organization 1'),
        2 => t('Organization 2'),
        3 => t('Organization 3'),
      ),
      '#default_value' => 0,
      '#description' => t('Some explanation as to what user should select for organization.'),
    );

    $form['study'] = array(
      '#type' => 'select',
      '#title' => t('Please Your Study Type:'),
      '#options' => array(
        0 => t('--Study Type--'),
        1 => t('Common Garden'),
        2 => t('Plantation'),
        3 => t('Natural Population'),
      ),
      '#default_value' => 0,
      '#description' => t('Here, we will provide the user with a short description of the 3 options in order to get an accurate answer.'),
    );

    $form['commonGardenSelect'] = array(
      '#type' => 'select',
      '#title' => t('Sample question only applicable to common garden studies:'),
      '#options' => array(
        0 => t('--Select--'),
      ),
      '#default_value' => 0,
      '#description' => t('One example of the questions asked to somone who performed a common garden study.'),
      //This is the way to add a class to a form element:
      '#attributes' => array('class' => array('commonGardenClass')),
      '#title_attributes' => array('class' => array('commonGardenClass')),
      '#description_attributes' => array('class' => array('commonGardenClass')),
    );

    $form['plantationSelect'] = array(
      '#type' => 'select',
      '#title' => t('Sample question only applicable to plantation studies:'),
      '#options' => array(
        0 => t('--Select--'),
      ),
      '#default_value' => 0,
      '#description' => t('One example of the questions asked to somone who performed a plantation study.'),
      //This is the way to add a class to a form element:
      '#attributes' => array('class' => array('plantationClass')),
    );

    $form['natPopSelect'] = array(
      '#type' => 'select',
      '#title' => t('Sample question only applicable to natural population studies:'),
      '#options' => array(
        0 => t('--Select--'),
      ),
      '#default_value' => 0,
      '#description' => t('One example of the questions asked to somone who performed a natural population study.'),
      //This is the way to add a class to a form element:
      '#attributes' => array('class' => array('natPopClass')),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit'
    );

    $form['#submit'][] = 'custom_module_showCustomModuleForm_submit';

    $form['#suffix'] = '<input type="button" id="submitAjaxButton" value="Submit with Ajax"><br/><div id="msg-display-area"></div>';


    /* This is the convention for adding JS files to your form.
     * Since it is added directly to the form, I would imagine 
     * it is only accessible to this specific form.  
     */
    drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");

    /*
     * This is instantiating a user token.  It will be verified
     * in the JS file and they will not be given acess to data 
     * returned by AJAX if their token is invalid (if not logged
     * in).
     */
    global $user;
    $newToken = drupal_get_token("my secret value" . $user->uid);
    drupal_add_js("var myToken='$newToken'", "inline");

    return $form;
}

function custom_module_showCustomModuleForm_submit($form, &$form_state) {

    if ($form_state['values']['name'] == "") {

        form_set_error("name", "Name cannot be empty");
    }
    else {

        drupal_set_message("Hello, " . $form_state['values']['name'] . "!");
    }
}
