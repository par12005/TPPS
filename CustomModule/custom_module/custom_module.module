<?php

//hook_init
function custom_module_init() {

//    drupal_set_message("Hello");
}

function custom_module_menu() {

    $items = array();

    $items['master'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm_master'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );

    $items['getHello'] = array(
      'page callback' => 'custom_module_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['genus/autocomplete'] = array(
      'title' => 'Autocomplete for genus',
      'page callback' => '_genus_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['structure/autocomplete'] = array(
      'title' => 'Autocomplete for Ontological terms',
      'page callback' => '_structure_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['developmental/autocomplete'] = array(
      'title' => 'Autocomplete for Ontological terms',
      'page callback' => '_development_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['units/autocomplete'] = array(
      'title' => 'Autocomplete for Units',
      'page callback' => '_units_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );

    return $items;
}

function custom_module_ajaxCallHandler() {

    global $user;

    if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'my secret value' . $user->uid)) {
        return MENU_ACCESS_DENIED;
    }

    echo "Hello, " . filter_xss($_GET['name']) . "!";
}

function custom_module_showCustomModuleForm_master($form, &$form_state){
    
    if (!isset($form_state['stage'])){
        $form_state['stage'] = 'Hellopage';
    }
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    //print_r($form_state['stage']);
    
    drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");
    
    return $form;
}

function custom_module_showCustomModuleForm_master_validate($form, &$form_state){
    if ($form_state['triggering_element']['#value'] == 'Back'){
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");
            break;
        
        default:
            break;
    }
}

function custom_module_showCustomModuleForm_master_submit($form, &$form_state){
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    
    switch ($form_state['stage']){
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
                //submit form
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function _species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function _structure_autocomplete($string){
    $matches = array();
    $result = db_select('chado.phenotype_structure_cvterm', 'phenotype_structure_cvterm')
        ->fields('phenotype_structure_cvterm', array('name', 'definition'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        if ($row->definition != ""){
            $matches[$row->name] = check_plain($row->name . ":  " . $row->definition);
        }
        else{
            $matches[$row->name] = check_plain($row->name . ":  No definition on record");
        }
    }
    
    drupal_json_output($matches);
}

function _development_autocomplete($string){
    $matches = array();
    $result = db_select('chado.phenotype_cvterm', 'phenotype_cvterm')
        ->fields('phenotype_cvterm', array('name', 'definition'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        if ($row->definition != ""){
            $matches[$row->name] = check_plain($row->name . ":  " . $row->definition);
        }
        else{
            $matches[$row->name] = check_plain($row->name . ":  No definition on record");
        }
    }
    
    drupal_json_output($matches);
}

function _units_autocomplete($string){
    $list = array('mm', 'cm', 'm', 'Degrees Celsius', 'Degrees Fahrenheit');
    
    $matches = array();
    
    foreach($list as $term){
        if (preg_match("/^$string/", $term) == 1){
            $matches[$term] = check_plain($term);
        }
    }
    
    drupal_json_output($matches);
}

function custom_module_showCustomModuleForm_test_page($form, &$form_state){
    include_once  'test_page.php';
    
    $form = test_page_create_form($form, $form_state);
    
    return $form;
}

function custom_module_showCustomModuleForm_test_page_validate($form, &$form_state){
    include_once 'test_page.php';
    
    test_page_validate_form($form, $form_state);
}

function custom_module_showCustomModuleForm_test_page_submit($form, &$form_state) {
    include_once 'test_page.php';
    
    test_page_submit_form($form, $form_state);
}