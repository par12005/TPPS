<?php

//hook_init
function custom_module_init() {

//    drupal_set_message("Hello");
}

function custom_module_menu() {

    $items = array();

    $items['Hellopage'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['secondPage'] = array(
      'title' => 'TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_module_showCustomModuleForm_second_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'custom_module_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );

    return $items;
}

function custom_module_ajaxCallHandler() {

    global $user;

    if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'my secret value' . $user->uid)) {
        return MENU_ACCESS_DENIED;
    }

    echo "Hello, " . filter_xss($_GET['name']) . "!";
}

function custom_module_showCustomModuleForm() {
    
    $authorArr = array();
    $authorResults = db_query('SELECT contact.contact_id, contact.name FROM chado.contact WHERE contact.type_id = 71 ORDER BY contact.name LIMIT 200');
    
    foreach($authorResults as $r){
        $authorArr[$r->contact_id] = $r->name;
    }

    
    $form['primaryAuthor'] = array(
      '#prefix' => '<div id= primaryauthor>',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#title' => t('Primary Author'),
      '#options' => $authorArr,        
      '#required' => true,
      '#default_value' => 0,
      );
    
    
    $form['#suffix'] = '<input type="button" id="button" value="Add Author"><br/><div></div>';
    
    for($i = 0; $i < 30; $i++){
       if ($i == 0){
            $form['secondaryAuthorForm' . $i] = array(
      '#prefix' => '<div id= secondaryAuthor' . $i . '>',
      '#type' => 'select',
      '#options' => $authorArr,
      '#default_value' => 0,
      );
       
       $form['secondaryAuthorCustomForm' . $i] = array(
      '#suffix' => '</div>',
      '#type' => 'textfield',
      '#disabled' => true,
      '#default_value' => '',
      );   
       }
       else{
       $form['secondaryAuthorForm' . $i] = array(
      '#prefix' => '<div id= secondaryAuthor' . $i . '>',
      '#type' => 'select',
      '#options' => $authorArr,
      );
       
       $form['secondaryAuthorCustomForm' . $i] = array(
      '#suffix' => '</div>',
      '#type' => 'textfield',
      '#disabled' => true,
      '#default_value' => '',
      );
       }
    }
    
    $organizationArr = array();
    $organizationResults = db_query('SELECT contact.contact_id, contact.name FROM chado.contact WHERE contact.type_id = 72 ORDER BY contact.name LIMIT 200');    
    
    foreach($organizationResults as $r){
        $organizationArr[$r->contact_id] = $r->name;
    }
    
    $form['organization'] = array(
      '#type' => 'select',
      '#title' => t('Organization'),
      '#options' => $organizationArr,
      '#required' => true,
    );
 
    $form['publicationStatus'] = array(
      '#type' => 'select',
      '#title' => t('Publication Status'),
      '#options' => array(
        0 => t('--Publication Status--'),
        1 => t('In Preparation'),
        2 => t('Submitted'),
        3 => t('In press'),
        4 => t('Published'),
      ),
      '#required' => true,
    );
    
    $yearArr = Array();
    for($i = 1950; $i <= 2017; $i++){
        array_push($yearArr, $i);
    }                              
    
    $form['year'] = array(
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $yearArr,
      '#required' => true,
    );

     $form['title'] = array(
       '#type' => 'textfield',
       '#title' => t('Title'),
       '#required' => true,
     );
     
     $form['abstract'] = array(
       '#type' => 'textfield',
       '#title' => t('Abstract'),
       '#required' => true,
     );
     
     $journalArr = Array();
     $journalResults = db_query('SELECT DISTINCT series_name FROM chado.pub ORDER BY series_name LIMIT 200');
     
     foreach($journalResults as $r){
         array_push($journalArr, $r->series_name);
     }

     $form['jorunal'] = array(
      '#type' => 'select',
      '#title' => t('Journal'),
      '#options' => $journalArr,
      '#default_value' => 1,
    );
     
     $speciesNumberRange = range(0,15);
     
      $form['speciesNumber'] = array(
      '#type' => 'select',
      '#title' => t('Please Select the Number of Species under Study'),
      '#options' => $speciesNumberRange,
      '#default_value' => 0,
    );
     
      $genusResult = db_query('SELECT DISTINCT genus FROM chado.organism ORDER BY genus LIMIT 200');
      $genusArr = Array();
      
      foreach($genusResult as $r){
          $genusArr[] = $r->genus;
      }
      
      $speciesResult = db_query('SELECT DISTINCT organism_id, species FROM chado.organism ORDER BY species LIMIT 200');
      $speciesArr = array();
          
      foreach($speciesResult as $r){
          $speciesArr[$r->organism_id] = $r->species;
      }
          
      for($i = 0; $i < 15; $i++){
       if ($i == 0){
            $form['genus' . $i] = array(
      '#prefix' => '<div id= genusSpecies' . $i . '>',
      '#type' => 'select',
      '#options' => $genusArr,
      );
       
       $form['species' . $i] = array(
      '#type' => 'select',
      '#options' => array_merge(array(0 => 'Other'), $speciesArr),
      );
       
      $form['customSpecies' . $i] = array(
       '#suffix' => '</div>',
       '#type' => 'textfield',
       '#default_value' => '',
     );
      
       }
       
       else{
       $form['genus' . $i] = array(
      '#prefix' => '<div id= genusSpecies' . $i . '>',
      '#type' => 'select',
      '#options' => $genusArr,
      );
      $form['species' . $i] = array(
      '#type' => 'select',
      '#options' => array_merge(array(0 => 'Other'), $speciesArr),
      );
       }
     $form['customSpecies' . $i] = array(
       '#suffix' => '</div>',
       '#type' => 'textfield',
       '#disabled' => true,
       );  
     
    }

      $form['keywords'] = array(
        '#type' => 'textfield',
        '#title' => t('Keywords'),
        '#description' => t('Please enter keywords separated by commmas'),
        '#required' => true,
        );
      
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        );
      
//      $form['#submit'][] = 'custom_module_showCustomModuleForm';
          
    /* This is the convention for adding JS files to your form.
     * Since it is added directly to the form, I would imagine 
     * it is only accessible to this specific form.  
     */
    drupal_add_js(drupal_get_path('module', 'custom_module') . "/custom_module.js");

    /*
     * This is instantiating a user token.  It will be verified
     * in the JS file and they will not be given acess to data 
     * returned by AJAX if their token is invalid (if not logged
     * in).
     */
    global $user;
    $newToken = drupal_get_token("my secret value" . $user->uid);
    drupal_add_js("var myToken='$newToken'", "inline");

    return $form;
}
 
function custom_module_showCustomModuleForm_validate($form, &$form_state) {
    
//    This should be fixed to prompt the user with multiple error messages
    
//    $empty = 0;
//    $blank = '';                                                                                
//    
//    for ($i = 0; $i < 15; $i++){
//        $genus = $form_state['values']['genus' . $i];
//        $species = $form_state['values']['species' . $i];
//        $customSpecies = $form_state['values']['customSpecies' . $i];
//        $speciesSuccess = false;
//        
//        if ($genus == 0 && $species != 0){
//            form_set_error('Please enter a species for every genus selected');
//        }
//        else if ($genus != 0 && $species == 0){
//            form_set_error('Please enter a genus for every species selected');
//        }
//        
//        else if ($genus == 0 && $customSpecies != ''){
//            form_set_error('Please enter a genus for your inputted species');
//        }
//        
//        else if($genus != 0 && $customSpecies == ''){
//            form_set_error('Please enter a valid species name for your inputted species');
//        }
//        
//        else{
//            $speciesSuccess = true;
//        }
//        
//    }
//    
//    if ($speciesSuccess){
//        form_set_error('Please enter at least one species under study');
//    }
//    else{
//        
//    }
//    
//    $secondaryAuthorArray = Array();
//    
//    for ($i = 0; $i < 30; $i++){
//        if ($form_state['values']['secondaryAuthorForm' . $i] != $empty){
//            array_push($secondaryAuthorArray, $form_state['values']['secondaryAuthorForm' . $i]);
//        }
//        else{
//        }
//        
//        if ($form_state['values']['secondaryAuthorCustomForm' . $i] != $blank)
//        {
//            array_push($secondaryAuthorArray, $form_state['values']['secondaryAuthorCustomForm' . $i]);
//        }
//        
//        else{
//            
//        }
//    }
//    
}

function custom_module_showCustomModuleForm_submit($form, &$form_state) {
    $form_state['redirect'] = 'secondPage';
}

function custom_module_showCustomModuleForm_second_page() {
    
    $form['startDate'] = array(
      '#title' => t('Starting Date'),
      '#required' => True,
      '#type' => 'textfield',
    );
    
    $form['endDate'] = array(
      '#title' => t('End Date'),
      '#required' => True,
      '#type' => 'textfield',
    );
    
    $form['location'] = array(
      '#title' => t('Please input the location or locations in your study'),
      '#required' => True,
      '#type' => 'textfield',
    );
    
    $form['studyType'] = array(
      '#title' => t('Please select the type of study'),
      '#required' => True,
      '#type' => 'select',
      '#options' => array(
        0 => 'Natural Population (Landscape)',
        1 => 'Growth Chamber',
        2 => 'Greenhouse',
        3 => 'Experimental/Common Garden',
        4 => 'Plantation',
      ),
    );
  
    $form['commonGardenIrrigation'] = array(
      '#title' => t('Irrigation'),
      '#required' => True,
      '#type' => 'Select',
      '#options' => array(
        0 => 'Not Modified',
        1 => 'Yes',
      ),
      '#prefix' => '<div id=commonGardenClass>',
      '#suffix' => '</div>',
    );
    
    $form['commonGardenIrrigationType'] = array(
      '#title' => t('Type of Irrigation'),
      '#required' => True,
      '#type' => 'Select',
      '#options' => array(
        0 => 'Type1',
      ),
    );
    
    $form['commonGardenSalinity'] = array(
      '#title' => t('Salinity'),
      '#type' => 'Select',
      '#otpions' => array(
        'Controlled',
        'Uncontrolled'
      ),
      '#required' => True,
      );
    
    $form['commonGardenSalinityValue'] = array(
      '#title' => t('Salinity Value'),
      '#type' => 'Select',
      '#options' => array(
        'No salinity',
        'Some salinity',
        'A lot of salinity',
      ),
    );
    
    $form['commonGardenBioticEnvironment'] = array(
      '#title' => t('Biotic Environment'),
      '#type' => 'Select',
      '#options' => array(
        'Herbivores',
        'Mutulists',
        'Pathogens',
        'Endophytes',
        'Other',
        'None'
      ),
      '#required' => True,
    );
    
    $form['Seasons'] = array(
      '#title' => t('Seaons'),
      '#type' => 'Select',
      '#options' => array(
        'Fall',
        'Winter',
        'Spring',
        'Summer',
      ),
      '#required' => True,
    );
    
    $form['Treatments'] = array(
      '#title' => t('Treatments'),
      '#type' => 'Select',
      '#options' => array(
        'Seasonal environment',
        'Antibiotic regime',
        'Chemical administration',
        'Disease status',
        'Fertilizer regime',
        'Fungicide regime',
        'Gaseous regime',
        'Gravity Growth hormone regime',
        'Herbicide regime',
        'Mechanical treatment',
        'Mineral nutrient regime',
        'Non-mineral nutrient regime',
        'Salt regime',
        'Watering regime',
        'Pesticide regime',
        'pH regime',
        'Other perturbation'
          ),
      '#required' => True,
//      '#suffix' => '</div>',
    );
//    !!!
    return $form;
}

function custom_module_showCustomModuleForm_second_page_validate($form, &$form_state)
{
    
}
function custom_module_showCustomModuleForm_second_page_submit($form, &$form_state){ 
}