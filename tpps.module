<?php
define("TPPS_JS_PATH", '/js/tpps.js');
require_once 'includes/create_record.inc';
require_once 'includes/flatten.inc';
require_once 'includes/init_project.inc';
require_once 'includes/tab_create.inc';
require_once 'includes/completed_display.inc';
require_once 'includes/table_display.inc';
require_once 'includes/compare_files.inc';
require_once 'includes/standard_coord.inc';
require_once 'includes/validate_columns.inc';
require_once 'includes/refresh_landing_page.inc';
require_once 'includes/parse_xlsx.inc';
require_once 'includes/content_no_header.inc';
require_once 'includes/custom_cvterm.inc';
require_once 'includes/submit_email.inc';

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['tpps'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_main'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['user/%user/tpps'] = array(
      'title' => 'TPPS Submissions',
      'page callback' => 'tpps_tab_create',
      'page arguments' => array('user', 1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK
    );
    
    $items['completed-submission'] = array(
      'title' => 'TPPS Completed Submission',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_completed_display'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['tpps-admin-panel'] = array(
      'title' => 'TPPS Admin Panel',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_admin_panel'),
      'access callback' => 'user_access',
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'admin/panel.php'
    );
    
    $items['admin/config/content/tpps'] = array(
      'title' => 'TPPS Settings',
      'description' => 'Configuration for TPPS module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_admin_settings'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'admin/config.php'
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => 'tpps_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => 'tpps_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => 'tpps_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => 'tpps_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => 'tpps_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['attribute/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Attribute',
      'page callback' => 'tpps_attribute_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['units/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Units',
      'page callback' => 'tpps_units_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['structure/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Structure',
      'page callback' => 'tpps_structure_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'tpps_ajax.php'
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'test.php'
    );

    return $items;
}

function tpps_cronapi(){
    $items = array();
    
    $items['tpps_refresh_landing_page'] = array(
      'title' => t('Refresh TPPS landing page view'),
      'callback' => 'tpps_refresh_landing_page',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0 0 * * *'),
        ),
      )
    );
    
    return $items;
}

function tpps_mail($key, &$message, $params){
    if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
    } 
    if (isset($params['body'])) {
        $message['body'][] = $params['body']; 
    }
    if (isset($params['headers']) && is_array($params['headers'])) {   
        $message['headers'] += $params['headers'];
    }
    
    switch ($key){
        case 'user_recieved':
            $message['body'][] = "Congratulations!<br><br>

Your TPPS submission has been received and is pending approval from a TreeGenes administrator! Here's a brief summary of the information you provided:<ul>
    <li>Primary Author: {$params['author']}</li>
    <li>Organization: {$params['org']}</li>
    <li>Publication title: {$params['title']}</li>
    <li>Journal: {$params['journal']}</li>
    <li>Organisms: {$params['organisms']['number']}</li>
";
        for ($i = 1; $i <= $params['organisms']['number']; $i++){
            $message['body'][] = "   <li>Organism $i: {$params['organisms'][$i]}</li>";
        }

        $message['body'][] = 
"   <li>Study Type: {$params['study_type']}</li>
    <li>Data Type: {$params['data_type']}</li></ul>
You can view your submission <a href='{$params['base_url']}/completed-submission?id={$params['accession']}' style='text-decoration: underline;'>here.</a><br>
If you have any questions about your submission, please feel free to contact us <a href='{$params['base_url']}/contactform'>here</a>.<br><br>";
            
            break;
        
        case 'admin_recieved':
            $message['body'][] = "
Attention:<br><br>

User {$params['user_mail']} has completed a TPPS Submission, titled {$params['title']}.<br>
Click <a href='{$params['base_url']}/tpps-admin-panel?accession={$params['accession']}' style='text-decoration: underline;'>here</a> to manage or approve this submission.";
            
            break;
            
        case 'user_rejected':
            $message['body'][] = 
"To whom it may concern:<br><br>

Unfortunately, your submission to TPPS has been rejected. If you would like, you can log into the TreeGenes website and edit your submission <a href='{$params['base_url']}/user/{$params['uid']}/TPPS'>here</a><br><br>

The administrator who rejected your submission provided the following reason:<br>
<blockquote>
{$params['reject-reason']}
</blockquote>";
            break;
        
        case 'user_approved':
            $message['body'][] = 
"Congratulations! Your submission to TPPS has been approved!<br><br>

You may now refer to your submitted data with accession number {$params['accession']}.<br><br>

You can still view your submission from your <a href=\"{$params['base_url']}/completed-submission?id={$params['accession']}\">TPPS Completed Submissions</a> tab.<br>
Your submission should be public on the <a href=\"{$params['base_url']}/tpps_details/main\">TPPS/TGDR Landing Page</a> within the next 24 hours.";
            
            break;

        default:
            break;
    }
}

function tpps_element_info_alter(&$type){
    if (isset($type['textfield']['#maxlength'])){
        $type['textfield']['#maxlength'] = 512;
    }
    //dpm('element_info_alter');
    $type['managed_file']['#process'][] = 'tpps_managed_file_process';
}

function tpps_managed_file_process($element, &$form_state, $form){
    
    if (isset($element['columns'])){
        $fid = $element['#value']['fid'];
        $wrapper = substr($element['#id'], 0, -7) . '-ajax-wrapper';

        $saved_value_parents = $no_header_parents = $element['#parents'];
        $no_header_parents[] = '#value';
        $no_header_parents[] = 'no-header';
        
        $no_header = drupal_array_get_nested_value($form_state['complete form'], $no_header_parents);
        $callback = isset($form_state['triggering_element']['#ajax']['callback']) ? $form_state['triggering_element']['#ajax']['callback'] : NULL;
        if (!$no_header and ($callback != 'tpps_no_header_callback')){
            $end = array_pop($saved_value_parents);
            $saved_value_parents[] = $end . "-no-header";
            $no_header = drupal_array_get_nested_value($form_state['saved_values'][$form_state['stage']], $saved_value_parents);
        }
        
        $element['no-header'] = array(
          '#type' => 'checkbox',
          '#title' => 'My file has no header row',
          '#ajax' => array(
            'wrapper' => $wrapper,
            'callback' => 'tpps_no_header_callback'
          ),
          '#states' => isset($element['#states']) ? $element['#states'] : NULL,
          '#default_value' => $no_header ? $no_header : NULL,
        );
        
        if (!empty($fid) and ($file = file_load($fid))){
            
            $saved_vals = $form_state['saved_values'][$form_state['stage']];
            $element['columns']['#type'] = 'fieldset';
            $element['columns']['#title'] = t('<div class="fieldset-title">Define Data</div>');
            $element['columns']['#collapsible'] = TRUE;
            
            $file_name = $file->uri;
            
            //stop using the file so it can be deleted if the user clicks 'remove'
            file_usage_delete($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
            
            $location = drupal_realpath("$file_name");
            $content = tpps_parse_xlsx($location);
            
            if (!empty($no_header)){
                tpps_content_no_header($content);
            }
            
            $options = $element['columns-options']['#value'];
            
            $first = TRUE;
            
            foreach ($content['headers'] as $item){
                $item_parents = $element['#parents'];
                array_pop($item_parents);
                $item_parents[] = end($element['#parents']) . '-columns';
                $item_parents[] = $item;
                
                $default = drupal_array_get_nested_value($saved_vals, $item_parents);
                //dpm($item_parents);
                
                $element['columns'][$item] = array(
                  '#type' => 'select',
                  '#title' => t($item),
                  '#options' => $options,
                  '#default_value' => $default,
                  '#prefix' => "<td>",
                  '#suffix' => "</td>",
                  '#attributes' => array(
                    'data-toggle' => array('tooltip'),
                    'data-placement' => array('left'),
                    'title' => array("Select the type of data the '$item' column holds")
                  )
                );

                if ($first){
                    $first = FALSE;
                    $element['columns'][$item]['#prefix'] = "<div style='overflow-x:auto'><table border='1'><tbody><tr>" . $element['columns'][$item]['#prefix'];
                }

                if (!empty($no_header)){
                    $element['columns'][$item]['#title'] = '';
                    $element['columns'][$item]['#attributes']['title'] = array("Select the type of data column $item holds");
                }
            }
            
            // display sample data
            $display = "</tr>";
            for ($j = 0; $j < 3; $j++){
                if (isset($content[$j])){
                    $display .= "<tr>";
                    foreach ($content['headers'] as $item){
                        $display .= "<th>{$content[$j][$item]}</th>";
                    }
                    $display .= "</tr>";
                }
            }
            $display .= "</tbody></table></div>";

            $element['columns'][$item]['#suffix'] .= $display;
        }
    }
    
    if (isset($element['empty'])){
        
        $element['empty']['#type'] = 'textfield';
        $element['empty']['#title'] = t('File Upload empty field:');
        $element['empty']['#states'] = isset($element['#states']) ? $element['#states'] : NULL;
        $element['empty']['#description'] = 'By default, TPPS will treat cells with the value "NA" as empty. If you used a different empty value indicator, please provide it here.';
    }
    
    return $element;
}

function tpps_form_alter(&$form, &$form_state, $form_id){
    if ($form['#form_id'] == 'tpps_main'){
        $stage = $form_state['stage'];
        
        if (!isset($form_state['saved_values'][$stage])){
            $form_state['saved_values'][$stage] = array();
        }
        if (!isset($form_state['values'])){
            $form_state['values'] = array();
        }
        
        tpps_leaves($form, $form_state['values'], $form_state['saved_values'][$stage]);
    }
}

function tpps_leaves(&$elements, $vals, $saved_vals){
    foreach($elements as $key => &$element){
        if ($key[0] != '#' and isset($element['#type'])){
            
            $element['#parents'] = array_merge($elements['#parents'], array($key));
            
            //element types that should be loading some default value, usually for the purposes of persistent form data
            $load_defaults = array(
              'textfield',
              'textarea',
              'checkbox',
              'select',
              'managed_file',
            );
            //if element is a type that should pull from 'saved_values', try to load the old value
            if (in_array($element['#type'], $load_defaults) and !isset($element['#default_value']) and isset($saved_vals[$key])){
                $element['#default_value'] = $saved_vals[$key];
            }
            //if element is a select type and still has no default value, then there is no saved value, so the default should be 0
            elseif ($element['#type'] == 'select' and !isset($element['#default_value'])){
                $element['#default_value'] = 0;
            }
            
            //checkboxes elements work a little differently in terms of default values
            if ($element['#type'] == 'checkboxes'){
                $options = $element['#options'];
                //get checkboxes options
                foreach ($options as $option){
                    //if the option does not yet have a default, try to pull from 'saved_values'
                    if (!isset($element[$option]['#default_value']) and isset($saved_vals[$key][$option])){
                        $element[$option]['#default_value'] = $saved_vals[$key][$option];
                    }
                }
            }
            
            if ($element['#type'] == 'fieldset'){
                if (!isset($saved_vals[$key])){
                    $saved_vals[$key] = array();
                }
                if (!isset($vals[$key])){
                    $vals[$key] = array();
                }
                tpps_leaves($element, $vals[$key], $saved_vals[$key]);
            }
        }
    }
    return;
}

function tpps_page_build(&$page){
    
    if (empty($page['content']['system_main']['#form_id']) or $page['content']['system_main']['#form_id'] != 'tpps_main' or empty($page['content']['system_main']['step']['#default_value'])){
        return $page;
    }
    
    $step = $page['content']['system_main']['step']['#default_value'];
    if ($step != 'frontpage' and $step != 'Hellopage' and $step != 'summarypage'){
        $blockObject = block_load('views', 'tpps_status');
        $blockObject->title = 'TPPS Status';
        $blockObject->subject = '';
        $blockObject->region = 'Content';
        $block = _block_get_renderable_array(_block_render_blocks(array($blockObject)));
        $tpps_status = "<div class='block block-system contextual-links-region block-menu tpps-status-block'>{$block['views_tpps_status']['#markup']}</div>";
        drupal_add_region_content('sidebar_second', $tpps_status);
    }
    
    return $page;
}

function tpps_main($form, &$form_state){
    
    require_once 'forms/build/front.php';
    
    global $user;
    $params = drupal_get_query_parameters();
    
    if (!isset($user->mail) and !isset($form_state['stage'])){
        //first access, not logged in
        $form_state['stage'] = 'frontpage';
    
        tpps_front_create_form($form, $form_state);
    
        drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
        
        return $form;
    }
    elseif (!isset($user->mail)){
        //not first access, but not logged in
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (isset($params['accession']) and !isset($form_state['stage'])) {
        //logged in, and with accession in link
        $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $params['accession']);
        $form_state['saved_values'] = $old_form_state['saved_values'];
        $form_state['stage'] = $old_form_state['stage'];
        $form_state['accession'] = $old_form_state['accession'];
        $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
    }
    else {
        //logged in, with plain link
        if (!isset($form_state['stage'])){
            //first access
            $form_state['stage'] = 'frontpage';
    
            tpps_front_create_form($form, $form_state);

            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);

            return $form;
        }
        else {
            //not first access
            if (!isset($form_state['saved_values']['frontpage']['accession']) or (isset($form_state['saved_values']['frontpage']['accession']) and $form_state['saved_values']['frontpage']['accession'] === 'new')){
                //no submissions, or selected to create new submission
                tpps_init_project($form, $form_state);
                variable_set('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession'], $form_state);
            }
            $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession']);
            $form_state['saved_values'] = $old_form_state['saved_values'];
            $form_state['stage'] = $old_form_state['stage'];
            $form_state['accession'] = $old_form_state['accession'];
            $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
        }
    }
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    $form['accession'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['accession'],
    );
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
	global $base_url;
	
	/******************************************
	Add status bar showing completed parts at the top
	*******************************************/
	//dpm($form_state['saved_values']);

	$form['#prefix'] = '<style>
		.tgdr_form_status div {
			display: inline-block;
			padding: 3px;
			margin-right: 10px;
		}
		
		.tgdr_form_status div img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}
		
		.tgdr_form_status {
			padding: 5px;
			background-color: #ffffff;
			border: 1px solid #cccccc;
			border-radius: 4px;
                        margin-bottom: 10px;
		}
                
                .btn-primary[name=op]{
                        margin: 10px 10px 10px 0px;
                }
                
                a.fieldset-title {
                        display: contents;
                }
	</style>';
	$form['#prefix'] .= '<div class="tgdr_form_status">';
	
	/**** Page 1 ****/
	if(isset($form_state['saved_values']['Hellopage']) and $form_state['stage'] != 'Hellopage') {
            $image_fname = 'message-16-ok.png';
	}
        else{
            $image_fname = 'message-16-warning.png';
        }
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Author and Species Information</div>";
	
	/**** Page 2 ****/
        if($form_state['stage'] != 'secondPage' and !isset($form_state['saved_values']['secondPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'secondPage' and $form_state['saved_values']['secondPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Experimental Conditions</div>";	

	/**** Page 3 ****/
	if($form_state['stage'] != 'thirdPage' and !isset($form_state['saved_values']['thirdPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'thirdPage' and $form_state['saved_values']['thirdPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Tree Accession</div>";	
	
	/**** Page 4 ****/
	if($form_state['stage'] != 'fourthPage' and !isset($form_state['saved_values']['fourthPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'fourthPage' and $form_state['saved_values']['fourthPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Submit Data</div>";	
	
	$form['#prefix'] .= '</div>';
	
	/******************************************
	END of status bar code
	*******************************************/
    
    if (!isset($form_state['saved_values']['Hellopage']['primaryAuthor']) or !isset($form_state['saved_values']['Hellopage']['organization'])){
  	$and = db_and();
	$and->condition('value', $user->mail);
	$and->condition('type_id', '50268');
	$contact_id = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('contact_id'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$contact_id = $contact_id['contact_id'];
        $name = db_select('chado.contact', 'contact')
	    ->fields('contact', array('name'))
	    ->condition('contact_id', $contact_id)
	    ->execute()
	    ->fetchAssoc();
	$name = $name['name'];
	$form_state['saved_values']['Hellopage']['primaryAuthor'] = $name;
	$and = db_and();
	$and->condition('contact_id', $contact_id);
	$and->condition('type_id', '72');
	$org = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('value'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$org = $org['value'];
	$form_state['saved_values']['Hellopage']['organization'] = $org;
	//dpm($contact_id);
	//dpm($name);
	//dpm($org);
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            require_once('forms/build/page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            require_once('forms/build/page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            require_once('forms/build/page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case 'fourthPage':
            require_once('forms/build/page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        case 'summarypage':
            require_once 'forms/build/summary.php';
            tpps_summary_create_form($form, $form_state);
            break;
        
        default:
            dpm('Invalid form stage.', 'error');
            break;
    }
    
    $suffix = '
        <script>
        jQuery(document).ready(function(){
            jQuery(\'[data-toggle="tooltip"]\').tooltip();   
        });
        </script>';
    
    if (isset($form['#suffix'])){
        $form['#suffix'] .= $suffix;
    }
    else {
        $form['#suffix'] = $suffix;
    }
    
    drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
    
    return $form;
}

function tpps_main_validate(&$form, &$form_state){
    
    if ($form_state['triggering_element']['#value'] == 'Back' or $form_state['triggering_element']['#value'] == 'Save'){
        
        if ($form_state['stage'] == 'thirdPage'){
            if ($form_state['saved_values']['Hellopage']['organism']['number'] == '1' or $form_state['values']['tree-accession']['check'] == '0'){
                if (($file = file_load($form_state['values']['tree-accession']['file'])) and $form_state['values']['tree-accession']['file'] != 0){
                    file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                }
                
                $form_state['values']['tree-accession']['file-columns'] = array();
                
                foreach ($form['tree-accession']['file']['columns'] as $col => $val){
                    if (isset($form['tree-accession']['file']['columns'][$col]['#value']) and $col[0] != '#'){
                        $form_state['values']['tree-accession']['file-columns'][$col] = $form['tree-accession']['file']['columns'][$col]['#value'];
                    }
                }
            }
            else {
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    if (($file = file_load($form_state['values']['tree-accession']["species-$i"]['file'])) and $form_state['values']['tree-accession']["species-$i"]['file'] != 0){
                        file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                    }
                    
                    $form_state['values']['tree-accession']["species-$i"]['file-columns'] = array();
                    
                    if (isset($form['tree-accession']["species-$i"]['file']['#value']['columns'])){
                        foreach ($form['tree-accession']["species-$i"]['file']['#value']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']['tree-accession']["species-$i"]['file-columns'][$col] = $form['tree-accession']["species-$i"]['file']['#value']['columns'][$col];
                            }
                        }
                    }
                }
            }
        }
        elseif ($form_state['stage'] == 'fourthPage'){
            if (isset($form['organism-1']['genotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    
                    if ($form_state['values']["organism-$i"]['genotype']['marker-type']['Other'] != '0' or $form_state['values']["organism-$i"]['genotype']['marker-type']['SSRs/cpSSRs'] != '0'){
                        if (($file = file_load($form_state['values']["organism-$i"]['genotype']['file'])) and $form_state['values']["organism-$i"]['genotype']['file'] != 0){
                            file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                        }
                        
                        $form_state['values']["organism-$i"]['genotype']['file-columns'] = array();
                        
                        if (isset($form["organism-$i"]['genotype']['file']['#value']['columns'])){
                            foreach ($form["organism-$i"]['genotype']['file']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['genotype']['file-columns'][$col] = $form["organism-$i"]['genotype']['file']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                    if ($form_state['values']["organism-$i"]['genotype']['ref-genome'] == 'manual'){
//                        if (($file = file_load($form_state['values']["organism-$i"]['genotype']['assembly-user'])) and $form_state['values']["organism-$i"]['genotype']['assembly-user'] != 0){
//                            file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
//                        }
//                        
//                        $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'] = array();
//                        
//                        if (isset($form["organism-$i"]['genotype']['assembly-user']['#value']['columns'])){
//                            foreach ($form["organism-$i"]['genotype']['assembly-user']['#value']['columns'] as $col => $val){
//                                if ($col[0] != '#'){
//                                    $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'][$col] = $form["organism-$i"]['genotype']['assembly-user']['#value']['columns'][$col];
//                                }
//                            }
//                        }
                    }
                }
            }
            
            if (isset($form['organism-1']['phenotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    if (($file = file_load($form_state['values']["organism-$i"]['phenotype']['file'])) and $form_state['values']["organism-$i"]['phenotype']['file'] != 0){
                        file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                    }
                    
                    $form_state['values']["organism-$i"]['phenotype']['file-columns'] = array();
                    
                    if (isset($form["organism-$i"]['phenotype']['file']['#value']['columns'])){
                        foreach ($form["organism-$i"]['phenotype']['file']['#value']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']["organism-$i"]['phenotype']['file-columns'][$col] = $form["organism-$i"]['phenotype']['file']['#value']['columns'][$col];
                            }
                        }
                    }
                    
                    if ($form_state['values']["organism-$i"]['phenotype']['check'] != '0'){
                        if (($file = file_load($form_state['values']["organism-$i"]['phenotype']['metadata'])) and $form_state['values']["organism-$i"]['phenotype']['metadata'] != 0){
                            file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                        }
                        
                        $form_state['values']["organism-$i"]['phenotype']['metadata-columns'] = array();
                        
                        if (isset($form["organism-$i"]['phenotype']['metadata']['#value']['columns'])){
                            foreach ($form["organism-$i"]['phenotype']['metadata']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['phenotype']['metadata-columns'][$col] = $form["organism-$i"]['phenotype']['metadata']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            require_once('forms/validate/page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        case 'secondPage':
            require_once('forms/validate/page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        case 'thirdPage':
            require_once('forms/validate/page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        case 'fourthPage':
            require_once('forms/validate/page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        default:
            break;
    }
    
    if (!form_get_errors()){
        $form_state['values']['#cleared'] = TRUE;
        //dpm($form_state['values']['#cleared']);
    }
    else {
        $form_state['values']['#cleared'] = FALSE;
    }
}

function tpps_main_submit($form, &$form_state){
    
    global $user;
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    $persist = TRUE;
    
    if ($form_state['triggering_element']['#value'] == 'Save'){
        dpm('Your information has been saved!');
        
        if (isset($form_state['saved_values']['form_build_id'])){
            $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
        }
        $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
        $form_state['rebuild'] = TRUE;
        
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
        return;
    }
    
    switch ($form_state['stage']){
        case 'frontpage':
            $persist = FALSE;
            $form_state['stage'] = 'Hellopage';
            break;
        
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'fourthPage';
            }
            break;
            
        case 'fourthPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'thirdPage';
            }
            else{
                $form_state['stage'] = 'summarypage';
            }
            break;
            
        case 'summarypage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'fourthPage';
            }
            else{
                variable_del('tpps_incomplete_' . $user->mail . $form_state['accession']);
                $form_state['status'] = 'Pending Approval';
                variable_set('tpps_complete_' . $user->mail . $form_state['accession'], $form_state);
                tpps_submit_email($form, $form_state);
                //drupal_goto('<front>');
                return;
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
    
    if ($persist){
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
    }
}

function tpps_submit_all(&$form_state){
    
    $memory_limit = ini_get('memory_limit');
    if (preg_match('/^(\d+)(.)$/', $memory_limit, $matches)) {
        if ($matches[2] == 'G') {
            $memory_limit = $matches[1] * 1024 * 1024 * 1024;
        } else if ($matches[2] == 'M') {
            $memory_limit = $matches[1] * 1024 * 1024;
        } else if ($matches[2] == 'K') {
            $memory_limit = $matches[1] * 1024; 
        }
    }
    
    $dbxref_id = $form_state['dbxref_id'];
    $accession = $form_state['accession'];

    $values = $form_state['saved_values'];
    $firstpage = $values['Hellopage'];
    $file_rank = 0;

    $project_id = tpps_create_record('project', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));

    $project_dbxref_id = tpps_create_record('project_dbxref', array(
      'project_id' => $project_id,
      'dbxref_id' => $dbxref_id
    ));

    $primary_author_id = tpps_create_record('contact', array(
      'name' => $firstpage['primaryAuthor'],
      'type_id' => '71',
    ));

    $author_string = $firstpage['primaryAuthor'];
    $secondary_author_ids = array();
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){

        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $secondary_author_ids[] = tpps_create_record('contact', array(
              'name' => $firstpage['publication']['secondaryAuthors'][$i],
              'type_id' => '71'
            ));
            $author_string .= "; {$firstpage['publication']['secondaryAuthors'][$i]}";
        }
    }
    elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0){
        $secondary_author_file = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($firstpage['publication']['secondaryAuthors']['file'])->uri),
          'rank' => $file_rank
        ));
        
        $file = file_load($firstpage['publication']['secondaryAuthors']['file']);
        $location = drupal_realpath($file->uri);
        $content = tpps_parse_xlsx($location);
        $column_vals = $firstpage['publication']['secondaryAuthors']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '1'){
                $first_name = $col;
            }
            if ($val == '2'){
                $last_name = $col;
            }
            if ($val == '3'){
                $middle_initial = $col;
            }
        }
        
        for ($i = 0; $i < count($content) - 1; $i++){
            $secondary_author_ids[] = tpps_create_record('contact', array(
              'name' => "{$content[$i][$last_name]}, {$content[$i][$first_name]} {$content[$i][$middle_initial]}",
              'type_id' => '71'
            ));
            $author_string .= "; {$content[$i][$last_name]}, {$content[$i][$first_name]} {$content[$i][$middle_initial]}";
        }
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        $file_rank++;
    }
    
    $publication_id = tpps_create_record('pub', array(
      'title' => $firstpage['publication']['title'],
      'series_name' => $firstpage['publication']['journal'],
      'type_id' => '229',
      'pyear' => $firstpage['publication']['year'],
      'uniquename' => "$author_string {$firstpage['publication']['title']}. {$firstpage['publication']['journal']}; {$firstpage['publication']['year']}"
    ));

    $project_pub_id = tpps_create_record('project_pub', array(
      'project_id' => $project_id,
      'pub_id' => $publication_id
    ));

    $organization_id = tpps_create_record('contact', array(
      'name' => $firstpage['organization'],
      'type_id' => '72',
    ));

    $names = explode(" ", $firstpage['primaryAuthor']);
    $first_name = $names[0];
    $last_name = implode(" ", array_slice($names, 1));

    $pubauthor_ids = array();
    $pubauthor_ids[] = tpps_create_record('pubauthor', array(
      'pub_id' => $publication_id,
      'rank' => '0',
      'surname' => $last_name,
      'givennames' => $first_name
    ));
    
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){
        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $names = explode(" ", $firstpage['publication']['secondaryAuthors'][$i]);
            $first_name = $names[0];
            $last_name = implode(" ", array_slice($names, 1));
            $pubauthor_ids[] = tpps_create_record('pubauthor', array(
              'pub_id' => $publication_id,
              'rank' => "$i",
              'surname' => $last_name,
              'givennames' => $first_name
            ));
        }
    }
    elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0){
        
        $file = file_load($firstpage['publication']['secondaryAuthors']['file']);
        $location = drupal_realpath($file->uri);
        $content = tpps_parse_xlsx($location);
        $column_vals = $firstpage['publication']['secondaryAuthors']['file-columns'];
        $groups = $firstpage['publication']['secondaryAuthors']['file-groups'];
        
        if (!empty($firstpage['publication']['secondaryAuthors']['file-no-header'])){
            tpps_content_no_header($content);
        }
        
        $first_name = $groups['First Name']['1'];
        $last_name = $groups['Last Name']['2'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '3'){
                $middle_initial = $col;
                break;
            }
        }
        
        for ($i = 0; $i < count($content) - 1; $i++){
            $rank = $i + 1;
            $pubauthor_ids[] = tpps_create_record('pubauthor', array(
              'pub_id' => $publication_id,
              'rank' => "$rank",
              'surname' => $content[$i][$last_name],
              'givennames' => $content[$i][$first_name] . " " . $content[$i][$middle_initial]
            ));
        }
    }

    $organism_ids = array();
    $project_organism_ids = array();
    $organism_number = $firstpage['organism']['number'];
    
    $landing_page_species = "";
    for ($i = 1; $i <= $organism_number; $i++){
        $landing_page_species .= $firstpage['organism'][$i] . ", ";
        $parts = explode(" ", $firstpage['organism'][$i]);
        $genus = $parts[0];
        $species = implode(" ", array_slice($parts, 1));
        if (isset($parts[2]) and ($parts[2] == 'var.' or $parts[2] == 'subsp.')){
            $infra = implode(" ", array_slice($parts, 2));
        }
        else {
            $infra = NULL;
        }
        $organism_ids[$i] = tpps_create_record('organism', array(
          'genus' => $genus,
          'species' => $species,
          'infraspecific_name' => $infra
        ));
        $project_organism_ids[$i] = tpps_create_record('project_organism', array(
          'organism_id' => $organism_ids[$i],
          'project_id' => $project_id,
        ));
    }
    $landing_page_species = substr($landing_page_species, 0, -2);
    /***************************
     * Second Page submissions *
     ***************************/

    $secondpage = $values['secondPage'];

    $start = $secondpage['StartingDate']['month'] . " " . $secondpage['StartingDate']['year'];
    $end = $secondpage['EndingDate']['month'] . " " . $secondpage['EndingDate']['year'];

    $start_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '127996',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $start
    ));
    
    $end_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '127997',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $end
    ));
    
    if ($secondpage['studyLocation']['type'] !== '2'){
        $standard_coordinate = tpps_standard_coord($secondpage['studyLocation']['coordinates']);
        $standard_coordinate = explode(',', $standard_coordinate);
        $latitude = $standard_coordinate[0];
        $longitude = $standard_coordinate[1];
        
        $study_location_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '54718',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $latitude
        ));
        
        $study_location_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '54717',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $longitude
        ));
    }
    else{
        $location = $secondpage['studyLocation']['custom'];
        
        $study_location_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '127998',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $location
        ));
    }
    
    $datatype = $secondpage['dataType'];
    
    $datatype_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '54740',
      'value' => $datatype
    ));
    
    $studytype_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    
    $study_type = $studytype_options[$secondpage['studyType']];
    
    $study_type_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '128021',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
      'value' => $study_type
    ));
    
    /******************************************
     * Specific Questions based on study type *
     ******************************************/
    
    switch($secondpage['studyType']){
        case ('1'):
            $natural_population = $secondpage['naturalPopulation'];
            $number_assessions = $natural_population['assessions'];
            $seasons = "";
            foreach ($natural_population['season'] as $key => $item){
                if ($item != '0'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            break;
        case ('2'):
            $growth_chamber = $secondpage['growthChamber'];
            $co2 = $growth_chamber['co2Control'];
            $humidity = $growth_chamber['humidityControl'];
            $light = $growth_chamber['lightControl'];
            $temp_high = $growth_chamber['temp']['high'];
            $temp_low = $growth_chamber['temp']['low'];
            $rooting = $growth_chamber['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($co2['option'] == '1'){
                $co2_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $co2_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['controlled']
                ));
            }
            else{
                $co2_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $co2_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['uncontrolled']
                ));
            }

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $humidity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['uncontrolled']
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $light_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['uncontrolled']
                ));
            }

            $temp_high_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $ph_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['uncontrolled']
                ));
            }

            $treatment_ids = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('3'):
            $greenhouse = $secondpage['greenhouse'];
            $humidity = $greenhouse['humidityControl'];
            $light = $greenhouse['lightControl'];
            $temp_high = $greenhouse['temp']['high'];
            $temp_low = $greenhouse['temp']['low'];
            $rooting = $greenhouse['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $temp_high_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('4'):
            $commonGarden = $secondpage['commonGarden'];
            $salinity = $commonGarden['salinity'];
            $biotic_env = $commonGarden['bioticEnv']['option'];
            $seasons = "";
            $treatments = $commonGarden['treatment'];

            $irrigation_options = array(
              0 => '- Select -',
              1 => 'Irrigation from top',
              2 => 'Irrigation from bottom',
              3 => 'Drip Irrigation',
              4 => 'Other',
              5 => 'No Irrigation',
            );
            $irrigation_type = $irrigation_options[$commonGarden['irrigation']['option']];
            if ($irrigation_type == 'Other'){
                $irrigation_type = $commonGarden['irrigation']['other'];
            }
            
            $irrigation_type_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128016',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $irrigation_type
            ));

            if ($salinity['option'] == '1'){
                $salinity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $salinity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['controlled']
                ));
            }
            else{
                $salinity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $salinity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['uncontrolled']
                ));
            }

            $biotic_env['Other'] = $commonGarden['bioticEnv']['other'];
            $biotic_env_id = array();
            foreach ($biotic_env as $key => $check){
                if ($check == '1'){
                    $biotic_env_id[$key] = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128019',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $key
                    ));
                }
            }

            foreach ($commonGarden['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            $season_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('5'):
            $plantation = $secondpage['plantation'];
            $number_assessions = $plantation['assessions'];
            $seasons = "";
            $treatments = $plantation['treatment'];
            
            foreach ($plantation['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            
            if ($plantation['treatment']['check'] != 0){
                $treatment_id = array();
                $is_description = FALSE;
                $rank = 0;
                foreach ($treatments as $item){
                    if (!$is_description){
                        if ($item == '1'){
                            $record_next = TRUE;
                        }
                        else{
                            $record_next = FALSE;
                        }
                        $is_description = TRUE;
                    }
                    else{
                        if ($record_next){
                            array_push($treatment_ids, tpps_create_record('projectprop', array(
                              'project_id' => $project_id,
                              'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $item,
                              'rank' => $rank
                            )));
                            $rank++;
                        }
                        $is_description = FALSE;
                    }
                }
            }
            break;
        default:
            break;
    }
    /**************************
     * Third Page submissions *
     **************************/
    
    $thirdpage = $values['thirdPage'];
    $fourthpage = $values['fourthPage'];
    $stock_ids = array();
    $stockprop_ids = array();
    
    if ($organism_number == '1' or $thirdpage['tree-accession']['check'] == 0){
        //single file
        $tree_accession_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($thirdpage['tree-accession']['file'])->uri),
          'rank' => $file_rank
        ));
        
        $file = file_load($thirdpage['tree-accession']['file']);
        $location = drupal_realpath($file->uri);
        $content = tpps_parse_xlsx($location);
        $column_vals = $thirdpage['tree-accession']['file-columns'];
        $groups = $thirdpage['tree-accession']['file-groups'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '8'){
                $county_col_name = $col;
            }
            if ($val == '9'){
                $district_col_name = $col;
            }
        }
        
        $id_col_accession_name = $groups['Tree Id']['1'];
        
        if ($organism_number == '1'){
            //only one species
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_ids[$tree_id] = tpps_create_record('stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $organism_ids[1],
                ));
            }
        }
        else {
            //multiple species in one tree accession file -> users must define species and genus columns
            
            //get genus/species column
            if ($groups['Genus and Species']['#type'] == 'separate'){
                $genus_col_name = $groups['Genus and Species']['6'];
                $species_col_name = $groups['Genus and Species']['7'];
            }
            else {
                $org_col_name = $groups['Genus and Species']['10'];
            }
            
            //parse file
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                for ($j = 1; $j <= $organism_number; $j++){
                    //match genus and species to genus and species given on page 1
                    if ($groups['Genus and Species']['#type'] == 'separate'){
                        $genus_full_name = "{$content[$i][$genus_col_name]} {$content[$i][$species_col_name]}";
                    }
                    else {
                        $genus_full_name = "{$content[$i][$org_col_name]}";
                    }
                    
                    if ($firstpage['organism'][$j] == $genus_full_name){
                        //obtain organism id from matching species
                        $id = $organism_ids[$j];
                        break;
                    }
                }
                
                //create record with the new id
                $stock_ids[$tree_id] = tpps_create_record('stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $id,
                ));
            }
        }
        
        if ($groups['Location (latitude/longitude or country/state)']['#type'] == 'gps'){
            $lat_name = $groups['Location (latitude/longitude or country/state)']['4'];
            $long_name = $groups['Location (latitude/longitude or country/state)']['5'];
            
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_id = $stock_ids[$tree_id];
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '54718',
                  'value' => $content[$i][$lat_name]
                ));
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '54717',
                  'value' => $content[$i][$long_name]
                ));
            }
        }
        else {
            $country_col_name = $groups['Location (latitude/longitude or country/state)']['2'];
            $state_col_name = $groups['Location (latitude/longitude or country/state)']['3'];
            
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_id = $stock_ids[$tree_id];
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '128162',
                  'value' => $content[$i][$country_col_name]
                ));
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '128947',
                  'value' => $content[$i][$state_col_name]
                ));
                
                if (isset($county_col_name)){
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128946',
                      'value' => $content[$i][$county_col_name]
                    ));
                }
                
                if (isset($district_col_name)){
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128945',
                      'value' => $content[$i][$district_col_name]
                    ));
                }
            }
        }
        
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        $file_rank++;
    }
    else {
        //multiple files, sorted by species
        for($i = 1; $i <= $organism_number; $i++){
            $tree_accession_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => drupal_realpath(file_load($thirdpage['tree-accession']["species-$i"]['file'])->uri),
              'rank' => $file_rank
            ));
            
            $file = file_load($thirdpage['tree-accession']["species-$i"]['file']);
            $location = drupal_realpath($file->uri);
            $content = tpps_parse_xlsx($location);
            $column_vals = $thirdpage['tree-accession']["species-$i"]['file-columns'];
            $groups = $thirdpage['tree-accession']["species-$i"]['file-groups'];
            
            $id_col_accession_name = $groups['Tree Id']['1'];

            foreach ($column_vals as $col => $val){
                if ($val == '8'){
                    $county_col_name = $col;
                }
                if ($val == '9'){
                    $district_col_name = $col;
                }
            }

            for ($j = 0; $j < count($content) - 1; $j++){
                $tree_id = $content[$j][$id_col_accession_name];
                $stock_ids[$tree_id] = tpps_create_record('stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $organism_ids[$i],
                ));
                
                if ($groups['Location (latitude/longitude or country/state)']['#type'] == 'gps'){
                    $lat_name = $groups['Location (latitude/longitude or country/state)']['4'];
                    $long_name = $groups['Location (latitude/longitude or country/state)']['5'];
                    
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_ids[$tree_id],
                      'type_id' => '54718',
                      'value' => $content[$j][$lat_name]
                    ));

                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_ids[$tree_id],
                      'type_id' => '54717',
                      'value' => $content[$j][$long_name]
                    ));
                }
                else {
                    $country_col_name = $groups['Location (latitude/longitude or country/state)']['2'];
                    $state_col_name = $groups['Location (latitude/longitude or country/state)']['3'];
                    
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128162',
                      'value' => $content[$j][$country_col_name]
                    ));

                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128947',
                      'value' => $content[$j][$state_col_name]
                    ));

                    if (isset($county_col_name)){
                        $stockprop_ids[] = tpps_create_record('stockprop', array(
                          'stock_id' => $stock_id,
                          'type_id' => '128946',
                          'value' => $content[$j][$county_col_name]
                        ));
                    }

                    if (isset($district_col_name)){
                        $stockprop_ids[] = tpps_create_record('stockprop', array(
                          'stock_id' => $stock_id,
                          'type_id' => '128945',
                          'value' => $content[$j][$district_col_name]
                        ));
                    }
                }
            }

            $file->status = FILE_STATUS_PERMANENT;
            $file = file_save($file);
            $file_rank++;
        }
    }
    
    $project_stock_ids = array();
    foreach ($stock_ids as $tree_id => $stock_id){
        $project_stock_ids[] = tpps_create_record('project_stock', array(
          'stock_id' => $stock_id,
          'project_id' => $project_id
        ));
    }
    
    $form_state['file_rank'] = $file_rank;
    
    /***************************
     * Fourth Page submissions *
     ***************************/
    
    for ($i = 1; $i <= $organism_number; $i++){
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $ref_genome = $fourthpage["organism-$i"]['genotype']['ref-genome'];
            
            if ($ref_genome === 'url' or $ref_genome === 'manual' or $ref_genome === 'manual2'){
                //create job for tripal fasta importer
                $class = 'FASTAImporter';
                tripal_load_include_importer_class($class);

                $fasta = $fourthpage["organism-$i"]['genotype']['tripal_fasta'];

                $file_upload = isset($fasta['file']['file_upload']) ? trim($fasta['file']['file_upload']) : 0;
                $file_existing = isset($fasta['file']['file_upload_existing']) ? trim($fasta['file']['file_upload_existing']) : 0;
                $file_remote = isset($fasta['file']['file_remote']) ? trim($fasta['file']['file_remote']) : 0;
                $analysis_id = $fasta['analysis_id'];
                $seqtype = $fasta['seqtype'];
                $organism_id = $organism_ids[$i];
                $re_accession = $fasta['db']['re_accession'];
                $db_id = $fasta['db']['db_id'];

                $run_args = array(
                  'importer_class' => $class,
                  'file_remote' => $file_remote,
                  'analysis_id' => $analysis_id,
                  'seqtype' => $seqtype,
                  'organism_id' => $organism_id,
                  'method' => '2',
                  'match_type' => '0',
                  're_name' => '',
                  're_uname' => '',
                  're_accession' => $re_accession,
                  'db_id' => $db_id,
                  'rel_type' => '',
                  're_subject' => '',
                  'parent_type' => '',
                );

                $file_details = array();

                if ($file_existing){
                    $file_details['fid'] = $file_existing;
                }
                elseif ($file_upload){
                    $file_details['fid'] = $file_upload;
                }
                elseif ($file_remote){
                    $file_details['file_remote'] = $file_remote;
                }

                try {
                    $importer = new $class();
                    $form = array();
                    $importer->formSubmit($form, $form_state);

                    $importer->create($run_args, $file_details);

                    $importer->submitJob();

                } catch (Exception $ex) {
                    drupal_set_message('Cannot submit import: ' . $ex->getMessage(), 'error');
                }
            }
        }
    }
    
    //for simplicity and efficiency, all fourth page submissions take place in the TPPS File Parsing Tripal Job
}

function tpps_file_parsing($form_state){
    
    $fourthpage = $form_state['saved_values']['fourthPage'];
    $firstpage = $form_state['saved_values']['Hellopage'];
    $organism_number = $firstpage['organism']['number'];
    $organism_ids = array();
    $file_rank = $form_state['file_rank'];
    $genotype_group = variable_get('tpps_genotype_group', 10000);
    
    $project_id = tpps_create_record('project', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));
    
    for ($i = 1; $i <= $organism_number; $i++){
        $parts = explode(" ", $firstpage['organism'][$i]);
        $genus = $parts[0];
        $species = implode(" ", array_slice($parts, 1));

        if (isset($parts[2]) and ($parts[2] == 'var.' or $parts[2] == 'subsp.')){
            $infra = implode(" ", array_slice($parts, 2));
        }
        else {
            $infra = NULL;
        }

        $organism_ids[$i] = tpps_create_record('organism', array(
          'genus' => $genus,
          'species' => $species,
          'infraspecific_name' => $infra
        ));
        
        if (isset($fourthpage["organism-$i"]['phenotype'])){
            $phenotype = $fourthpage["organism-$i"]['phenotype'];
            $phenotype_number = $phenotype['number'];
            $phenotype_ids = array();
            $phenotypeprop_ids = array();
            $phenotypes_meta = array();
            
            $phenotype_file_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($phenotype['file'])->uri),
              'rank' => $file_rank
            ));
            $phenotype_file = file_load($phenotype['file']);
            $file_rank++;
            
            for ($j = 1; $j <= $phenotype_number; $j++){
                $name = strtolower($phenotype['phenotypes-meta'][$j]['name']);
                $phenotypes_meta[$name] = array();
                $phenotypes_meta[$name]['attr'] = $phenotype['phenotypes-meta'][$j]['attribute'];
                $phenotypes_meta[$name]['desc'] = $phenotype['phenotypes-meta'][$j]['description'];
                $phenotypes_meta[$name]['unit'] = $phenotype['phenotypes-meta'][$j]['units'];
                if ($phenotype['phenotypes-meta'][$j]['struct-check'] == '1'){
                    $phenotypes_meta[$name]['struct'] = $phenotype['phenotypes-meta'][$j]['structure'];
                }
                if ($phenotype['phenotypes-meta'][$j]['val-check'] == '1'){
                    $phenotypes_meta[$name]['min'] = $phenotype['phenotypes-meta'][$j]['min'];
                    $phenotypes_meta[$name]['max'] = $phenotype['phenotypes-meta'][$j]['max'];
                }
            }
            
            if ($phenotype['check'] == '1'){
                $phenotype_meta_file_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($phenotype['metadata'])->uri),
                  'rank' => $file_rank
                ));
                $file = file_load($phenotype['metadata']);
                $location = drupal_realpath($file->uri);
                $content = tpps_parse_xlsx($location);
                $groups = $phenotype['metadata-groups'];
                $column_vals = $phenotype['metadata-columns'];
                
                $phenotype_name = $groups['Phenotype Id']['1'];
                $phenotype_attr = $groups['Attribute']['2'];
                $phenotype_desc = $groups['Description']['3'];
                $phenotype_unit = $groups['Units']['4'];
                
                foreach ($column_vals as $col => $val){
                    if ($val == '5'){
                        $phenotype_struct = $col;
                    }
                    if ($val == '6'){
                        $phenotype_min = $col;
                    }
                    if ($val == '7'){
                        $phenotype_max = $col;
                    }
                }
                
                for ($j = 0; $j < count($content) - 1; $j++){
                    $name = strtolower($content[$j][$phenotype_name]);
                    $phenotypes_meta[$name] = array();
                    $phenotypes_meta[$name]['attr'] = $content[$j][$phenotype_attr];
                    $phenotypes_meta[$name]['desc'] = $content[$j][$phenotype_desc];
                    $phenotypes_meta[$name]['unit'] = $content[$j][$phenotype_unit];
                    if (isset($phenotype_struct) and isset($content[$j][$phenotype_struct]) and $content[$j][$phenotype_struct] != ''){
                        $phenotypes_meta[$name]['struct'] = $content[$j][$phenotype_struct];
                    }
                    if (isset($phenotype_min) and isset($content[$j][$phenotype_min]) and $content[$j][$phenotype_min] != ''){
                        $phenotypes_meta[$name]['min'] = $content[$j][$phenotype_min];
                    }
                    if (isset($phenotype_max) and isset($content[$j][$phenotype_max]) and $content[$j][$phenotype_max] != ''){
                        $phenotypes_meta[$name]['max'] = $content[$j][$phenotype_max];
                    }
                }
                
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
                $file_rank++;
            }
            
            $location = drupal_realpath($phenotype_file->uri);
            $content = tpps_parse_xlsx($location);
            $groups = $phenotype['file-groups'];
            
            $tree_id_col = $groups['Tree Identifier']['1'];
            $phenotype_name = $groups['Phenotype Name/Identifier']['2'];
            $phenotype_val = $groups['Phenotype Value(s)']['3'];
            
            for ($j = 0; $j < count($content) - 1; $j++){
                $name = strtolower($content[$j][$phenotype_name]);
                $value = $content[$j][$phenotype_val];
                $stock_unique = $content[$j][$tree_id_col];
                
                $attr = db_select('chado.cvterm', 'c')
                    ->fields('c', array('cvterm_id'))
                    ->condition('c.name', db_like($phenotypes_meta[$name]['attr']), 'LIKE')
                    ->execute()
                    ->fetchAssoc();
                $attr_id = $attr['cvterm_id'];
                if (!isset($attr_id) or $attr_id == ''){
                    $attr_id = tpps_custom_cvterm($phenotypes_meta[$name]['attr'], '');
                }
                
                if (isset($phenotypes_meta[$name]['struct'])){
                    $obs = db_select('chado.cvterm', 'c')
                        ->fields('c', array('cvterm_id'))
                        ->condition('c.name', db_like($phenotypes_meta[$name]['struct']), 'LIKE')
                        ->execute()
                        ->fetchAssoc();
                    $observable_id = $obs['cvterm_id'];

                    if (!isset($observable_id) or $observable_id == ''){
                        $observable_id = tpps_custom_cvterm($phenotypes_meta[$name]['struct'], '');
                    }
                }
                else {
                    $observable_id = NULL;
                }
                
                $phenotype_ids[] = tpps_create_record('phenotype', array(
                  'uniquename' => "$stock_unique-$name-$j",
                  'name' => $name,
                  'attr_id' => $attr_id,
                  'observable_id' => $observable_id,
                  'value' => $value
                ));
                
                $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                  'phenotype_id' => end($phenotype_ids),
                  'type_id' => '2871',
                  'value' => $phenotypes_meta[$name]['desc']
                ));
                
                $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                  'phenotype_id' => end($phenotype_ids),
                  'type_id' => '2883',
                  'value' => $phenotypes_meta[$name]['unit']
                ));
                
                if (isset($phenotypes_meta[$name]['min'])){
                    $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                      'phenotype_id' => end($phenotype_ids),
                      'type_id' => '52214',
                      'value' => $phenotypes_meta[$name]['min']
                    ));
                }
                
                if (isset($phenotypes_meta[$name]['max'])){
                    $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                      'phenotype_id' => end($phenotype_ids),
                      'type_id' => '52213',
                      'value' => $phenotypes_meta[$name]['max']
                    ));
                }
            }
            
            $phenotype_file->status = FILE_STATUS_PERMANENT;
            $phenotype_file = file_save($phenotype_file);
        }
        
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $genotype = $fourthpage["organism-$i"]['genotype'];
            $genotype_count = 0;
            
            if ($genotype['ref-genome'] == 'bio'){
                
                $bioproject_id = tpps_create_record('dbxref', array(
                  'db_id' => '176',
                  'accession' => $genotype['BioProject-id']
                ));
                
                $project_dbxref_id = tpps_create_record('project_dbxref', array(
                  'project_id' => $project_id,
                  'dbxref_id' => $bioproject_id,
                ));
                
                $bioproject_assembly_file_ids = array();
                foreach ($genotype['assembly-auto'] as $key => $val){
                    if ($val == '1'){
                        array_push($bioproject_assembly_file_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '2836',
                          'value' => "https://www.ncbi.nlm.nih.gov/nuccore/$key",
                          'rank' => $file_rank
                        )));
                        $file_rank++;
                    }
                }
            }
            elseif ($genotype['ref-genome'] == 'manual' or $genotype['ref-genome'] == 'manual2' or $genotype['ref-genome'] == 'url'){
                if ($genotype['tripal_fasta']['file_upload']){
                    //uploaded new file
                    $assembly_user = $genotype['tripal_fasta']['file_upload'];
                    $assembly_user_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => file_create_url(file_load($assembly_user)->uri),
                      'rank' => $file_rank
                    ));
                    $file = file_load($assembly_user);
                    $file->status = FILE_STATUS_PERMANENT;
                    $file = file_save($file);
                    $file_rank++;
                }
                if ($genotype['tripal_fasta']['file_upload_existing']){
                    //uploaded existing file
                    $assembly_user = $genotype['tripal_fasta']['file_upload_existing'];
                    $assembly_user_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => file_create_url(file_load($assembly_user)->uri),
                      'rank' => $file_rank
                    ));
                    $file = file_load($assembly_user);
                    $file->status = FILE_STATUS_PERMANENT;
                    $file = file_save($file);
                    $file_rank++;
                }
                if ($genotype['tripal_fasta']['file_remote']){
                    //provided url to file
                    $assembly_user = $genotype['tripal_fasta']['file_remote'];
                    $assembly_user_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => $assembly_user,
                      'rank' => $file_rank
                    ));
                    $file_rank++;
                }
            }
            elseif ($genotype['ref-genome'] != 'none') {
                $reference_genome_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '1912',
                  'value' => $genotype['ref-genome']
                ));
            }
            
            if ($genotype['file-type']['Genotype Assay']){
                $genotype_file_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['file'])->uri),
                  'rank' => $file_rank
                ));
                $file_rank++;
                
                $file = file_load($genotype['file']);
                $location = drupal_realpath($file->uri);
                $content = tpps_parse_xlsx($location);
                $groups = $genotype['file-groups'];
                $tree_id_col = $groups['Tree Id']['1'];
                
                //process genotype spreadsheet/assay
                if ($genotype['marker-type']['SNPs']){
                    //if SNPs marker, the file is a Genotype Assay
                    $genotype_cols = $groups['SNP Data']['2'];
                }
                else {
                    //if not SNPs marker, the file is a Genotype spreadsheet, not assay
                    $genotype_cols = $groups['Genotype Data']['2'];
                    $marker = ($genotype['marker-type']['SSRs/cpSSRs']) ? $genotype['SSRs/cpSSRs'] : $genotype['other-marker'];
                }
                
                foreach ($content as $key => $row){
                    if ($key != 'headers'){
                        $tree_id = $row[$tree_id_col];

                        $query = db_select('chado.stock', 's')
                            ->fields('s', array('organism_id'))
                            ->condition('uniquename', $tree_id)
                            ->execute()
                            ->fetchAssoc();
                        $organism_id = $query['organism_id'];

                        if (!isset($last_org_id) or $last_org_id !== $organism_id){
                            //if the last organism id is not present or is different from this one, get a new species code. otherwise, keep the last one to avoid some redundant queries
                            $and = db_and()
                                ->condition('type_id', '52307')
                                ->condition('organism_id', "$organism_id");
                            $species_code = db_select('chado.organismprop', 'o')
                                ->fields('o', array('value'))
                                ->condition($and)
                                ->execute()
                                ->fetchAssoc();
                            $species_code = $species_code['value'];
                        }

                        $genotype_vals = array();
                        foreach ($genotype_cols as $marker_id){
                            $genotype_count++;
                            $marker_value = $row[$marker_id];

                            if ($genotype_count > $genotype_group){
                                $genotype_count = 0;
                                tpps_create_record('genotype', $genotype_vals);
                                $genotype_vals = array();
                            }
                            
                            if ($genotype['marker-type']['SNPs']){
                                $marker_type_id = 1205;
                            }
                            elseif ($genotype['marker-type']['SSRs/cpSSRs']) {
                                if ($genotype['SSRs/cpSSRs'] == 'cpSSR'){
                                    $marker_type_id = 54739;
                                }
                                else {
                                    $marker_type_id = 54733;
                                }
                            }
                            else {
                                //type_id for "other genotype marker" should just be 'genotype'
                                $marker_type_id = 1464;
                            }

                            $genotype_vals[] = array(
                              'name' => "$marker_id-$species_code-$marker_value",
                              'uniquename' => "$marker_id-$species_code-$marker_value",
                              'description' => $marker_value,
                              'type_id' => "$marker_type_id"
                            );
                        }

                        //save the organism id for the next row
                        $last_org_id = $organism_id;
                    }
                }
                tpps_create_record('genotype', $genotype_vals);
                unset($genotype_vals);
                $genotype_count = 0;
                
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
            }

            if ($genotype['file-type']['Assay Design'] and $genotype['marker-type']['SNPs']){
                $genotype_file_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['assay-design'])->uri),
                  'rank' => $file_rank
                ));
                $file = file_load($genotype['assay-design']);
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
                $file_rank++;
            }

            if ($genotype['file-type']['VCF']){
                $genotype_vcf_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['vcf'])->uri),
                  'rank' => $file_rank
                ));
                $file_rank++;
                
                $current_id = $organism_ids[$i];
                $and = db_and()
                    ->condition('type_id', '52307')
                    ->condition('organism_id', "$current_id");
                $species_code = db_select('chado.organismprop', 'o')
                    ->fields('o', array('value'))
                    ->condition($and)
                    ->execute()
                    ->fetchAssoc();
                $species_code = $species_code['value'];
                $marker = 'SNP';
                
                $vcf_file = file_load($genotype['vcf']);
                $location = drupal_realpath($vcf_file->uri);
                $vcf_content = fopen($location, 'r');

                //inserts are WAY faster when done as a group
                $genotype_vals = array();
                $genotypeprop_vals = array();
                $format = "";
                $first = TRUE;

                //dpm('start: ' . date('r'));
                while (($vcf_line = fgets($vcf_content)) !== FALSE){
                    if ($vcf_line[0] != '#'){
                        $genotype_count++;
                        $vcf_line = explode("\t", $vcf_line);
                        $scaffold_id = &$vcf_line[0];
                        $position = &$vcf_line[1];
                        $ref = &$vcf_line[3];
                        $alt = &$vcf_line[4];
                        $qual = &$vcf_line[5];
                        $filter = &$vcf_line[6];
                        $info = &$vcf_line[7];

                        $description = "$ref:$alt";
                        
                        //Tripal Job has issues when all submissions are made at the same time, so break them up into groups of 10,000 genotypes along with their relevant genotypeprops
                        if ($genotype_count > $genotype_group){
                            $genotype_count = 0;
                            tpps_create_record('genotype', $genotype_vals);
                            $genotype_vals = array();
                            tpps_create_record('genotypeprop', $genotypeprop_vals);
                            $genotypeprop_vals = array();
                        }

                        $genotype_vals[] = array(
                          'name' => "$marker-$species_code-$scaffold_id-$position",
                          'uniquename' => "$marker-$species_code-$scaffold_id-$position-$description",
                          'description' => $description,
                          'type_id' => '1205'
                        );

                        if ($first){
                            $first = FALSE;
                            $genotype_id = tpps_create_record('genotype', $genotype_vals[0]);
                            $genotype_vals = array();
                        }

                        if ($format != ""){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '52197',
                              'value' => $format,
                            );
                        }

                        //quality score
                        $genotypeprop_vals[] = array(
                          'genotype_id' => $genotype_id,
                          'type_id' => '2079',
                          'value' => $qual
                        );

                        //filter: pass/fail
                        $genotypeprop_vals[] = array(
                          'genotype_id' => $genotype_id,
                          'type_id' => '52008',
                          'value' => ($filter == '.') ? "P" : "NP"
                        );

                        //break up info column
                        $info_vals = explode(";", $info);
                        foreach($info_vals as $key => $val){
                            $parts = explode("=", $val);
                            unset($info_vals[$key]);
                            $info_vals[$parts[0]] = isset($parts[1]) ? $parts[1] : '';
                        }

                        //allele frequency, assuming that the info code for allele frequency is 'AF'
                        if (isset($info_vals['AF']) and $info_vals['AF'] != ''){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '2496',
                              'value' => $info_vals['AF']
                            );
                        }

                        //depth coverage, assuming that the info code for depth coverage is 'DP'
                        if (isset($info_vals['DP']) and $info_vals['DP'] != ''){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '52046',
                              'value' => $info_vals['DP']
                            );
                        }

                        //number of samples, assuming that the info code for number of samples is 'NS'
                        if (isset($info_vals['NS']) and $info_vals['NS'] != ''){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '128971',
                              'value' => $info_vals['NS']
                            );
                        }
                        $genotype_id++;
                    }
                    elseif (preg_match('/##FORMAT=/', $vcf_line)) {
                        $format .= substr($vcf_line, 9, -1);
                    }
                }
                //insert the last set of values
                tpps_create_record('genotype', $genotype_vals);
                tpps_create_record('genotypeprop', $genotypeprop_vals);
                unset($genotype_vals);
                unset($genotypeprop_vals);
                //dpm('done: ' . date('r'));
                $vcf_file->status = FILE_STATUS_PERMANENT;
                $vcf_file = file_save($vcf_file);
            }
        }
        
        if (isset($fourthpage["organism-$i"]['environment'])){
            $environment = $fourthpage["organism-$i"]['environment'];
            $env_layers_check = $environment['use_layers'];
            $env_layers = $environment['env_layers'];
            $env_number = $environment['number'];
            
            for ($j = 1; $j <= $env_number; $j++){
                $current_env = $environment['env_manual'][$j];
                $name = $current_env['name'];
                $desc = $current_env['description'];
                $unit = $current_env['units'];
                $val = $current_env['value'];
                
                $env_id = tpps_create_record('phenotype', array(
                  'uniquename' => "$name-{$form_state['accession']}-$j",
                  'name' => $name,
                  'value' => $val,
                ));
                
                tpps_create_record('phenotypeprop', array(
                  'phenotype_id' => $env_id,
                  'type_id' => '2871',
                  'value' => $desc
                ));
                
                tpps_create_record('phenotypeprop', array(
                  'phenotype_id' => $env_id,
                  'type_id' => '2883',
                  'value' => $unit,
                ));
            }
        }
    }
    
    return;
}

function tpps_block_info() { 
  //dpm("BLOCK INFO");   
  $blocks['tpps_status'] = array(
    // info: The name of the block.
    'info' => t('TPPS Status'),
  );

  return $blocks;
}

function tpps_block_view_alter(&$data, $block) {
    //dpm($block);
    //dpm($data);
    global $base_url;
    switch ($block->delta) {
        case 'tpps_status':
            //dpm($_REQUEST);

            $css = "
            .tgdr_status_block img {
                    vertical-align: middle;
                    margin-bottom: 4px;
                    margin-right: 2px;
            }		
            ";
            drupal_add_css($css, 'inline');

            $data['subject'] = t('TPPS Status');
            $content = "<div class='tgdr_status_block'>";
            global $user;
            if (isset($_REQUEST['accession'])){
                $accession = $_REQUEST['accession'];
                $form_state = variable_get('tpps_incomplete_' . $user->mail . $accession);
            }
            else {
                $content .= '</div>';
                $data['content'] = t($content);
                break;
            }
            $ok = "<img src='$base_url/misc/message-16-ok.png'>";
            $flat = tpps_flatten($form_state);
            
            foreach ($flat as $item => $val){
                if ($item[0] !== '#'){
                    $item_str = filter_xss(check_plain($item));
                    $val_str = filter_xss(check_plain($val));
                    if (preg_match('/File/', $item) and ($file_name = file_load($val)->filename)){
                        //create links to files
                        $file_url = check_plain(file_create_url(file_load($val)->uri));
                        $val_str = "<a href='$file_url' target='blank'>$file_name</a>";
                    }
                    elseif (preg_match('/Month/', $item)){
                        //skip experiment start/end month
                        continue;
                    }
                    elseif (preg_match('/^(.*)Year/', $item, $matches)){
                        //combine experiment start/end month + year
                        if (isset($flat[$matches[1] . 'Month'])){
                            $item_str = $matches[1] . 'Date';
                            $val_str = "{$flat[$matches[1] . 'Month']} $val_str";
                        }
                        else {
                            continue;
                        }
                    }
                    elseif (preg_match('/Study Location/', $item) and isset($flat['#location_type']) and $flat['#location_type']){
                        //add map capability to location
                        if ($flat['#location_type'] == '2'){
                            $query = $val_str;
                        }
                        elseif ($flat['#location_type'] != '2' and ($standard = tpps_standard_coord($val_str))){
                            $query = $standard;
                        }
                        $val_str = "<a id=\"sidebar_map\" style=\"cursor:pointer\">$val_str</a>";
                        if (isset($query)){
                            $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=AIzaSyDkeQ6KN6HEBxrIoiSCrCHFhIbipycqouY&z=5\\\" allowfullscreen> </iframe></div>";
                            $js = "jQuery(document).ready(function ($) {
                                jQuery(\"#sidebar_map\").click(function() {
                                    jQuery(\"#sidebar_map_wrapper\").remove();
                                    jQuery(\"#sidebar_map\").after( \"<br><div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                                });
                            });";
                            drupal_add_js($js, 'inline');
                        }
                    }
                    $content .= "$ok $item_str: $val_str <br />";
                }
                elseif (preg_match('/#page_(.)_cleared/', $item, $matches)){
                    //break between pages
                    if ($val){
                        $step_arr = array(
                          1 => 'Author and Species Information',
                          2 => 'Experimental Conditions',
                          3 => 'Tree Accession',
                          4 => 'Submit Data'
                        );
                        if ($matches[1] > 1){
                            $content .= '<br />';
                        }
                        $content .= "$ok Step {$matches[1]} - Complete<br />{$step_arr[$matches[1]]}<br /><hr />";
                    }
                    else {
                        //if page not cleared, do not display remaining form state data
                        break;
                    }
                }
            }
            
            $content .= "</div>";
            $data['content'] = t($content);

            break;
        default:
            break;
    }
}
