<?php

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['master'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_master'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['user/%user/TPPS'] = array(
      'title' => 'TPPS Submissions',
      'page callback' => 'tpps_tab_create',
      'page arguments' => array('user', 1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK
    );
    
    $items['completed-submission'] = array(
      'title' => 'TPPS Completed Submission',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_completed_display'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['tpps-admin-panel'] = array(
      'title' => 'TPPS Admin Panel',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_admin_panel'),
      'access callback' => 'user_access',
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['admin/config/content/tpps'] = array(
      'title' => 'TPPS Settings',
      'description' => 'Configuration for TPPS module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_admin_settings'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'tpps_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => '_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['attribute/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Attribute',
      'page callback' => '_attribute_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['units/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Units',
      'page callback' => '_units_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['structure/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Structure',
      'page callback' => '_structure_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    return $items;
}

function tpps_cronapi(){
    $items = array();
    
    $items['tpps_refresh_landing_page'] = array(
      'title' => t('Refresh TPPS landing page view'),
      'callback' => 'tpps_refresh_landing_page',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0 0 * * *'),
        ),
      )
    );
    
    return $items;
}

function tpps_mail($key, &$message, $params){
    if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
    } 
    if (isset($params['body'])) {
        $message['body'][] = $params['body']; 
    }
    if (isset($params['headers']) && is_array($params['headers'])) {   
        $message['headers'] += $params['headers'];
    }
    
    switch ($key){
        case 'user_recieved':
            $message['body'][] = "Congratulations!<br><br>

Your TPPS submission has been received and is pending approval from a TreeGenes administrator! Here's a brief summary of the information you provided:<ul>
    <li>Primary Author: {$params['author']}</li>
    <li>Organization: {$params['org']}</li>
    <li>Publication title: {$params['title']}</li>
    <li>Journal: {$params['journal']}</li>
    <li>Organisms: {$params['organisms']['number']}</li>
";
        for ($i = 1; $i <= $params['organisms']['number']; $i++){
            $message['body'][] = "   <li>Organism $i: {$params['organisms'][$i]}</li>";
        }

        $message['body'][] = 
"   <li>Study Type: {$params['study_type']}</li>
    <li>Data Type: {$params['data_type']}</li></ul>
You can view your submission <a href='{$params['base_url']}/completed-submission?id={$params['accession']}' style='text-decoration: underline;'>here.</a><br>
If you have any questions about your submission, please feel free to contact us <a href='{$params['base_url']}/contactform'>here</a>.<br><br>";
            
            break;
        
        case 'admin_recieved':
            $message['body'][] = "
Attention:<br><br>

User {$params['user_mail']} has completed a TPPS Submission, titled {$params['title']}.<br>
Click <a href='{$params['base_url']}/tpps-admin-panel?accession={$params['accession']}' style='text-decoration: underline;'>here</a> to manage or approve this submission.";
            
            break;
            
        case 'user_rejected':
            $message['body'][] = 
"To whom it may concern:<br><br>

Unfortunately, your submission to TPPS has been rejected. If you would like, you can log into the TreeGenes website and edit your submission <a href='{$params['base_url']}/user/{$params['uid']}/TPPS'>here</a><br><br>

The administrator who rejected your submission provided the following reason:<br>
<blockquote>
{$params['reject-reason']}
</blockquote>";
            break;
        
        case 'user_approved':
            $message['body'][] = 
"Congratulations! Your submission to TPPS has been approved!<br><br>

You may now refer to your submitted data with accession number {$params['accession']}.<br><br>

You can still view your submission from your <a href=\"{$params['base_url']}/completed-submission?id={$params['accession']}\">TPPS Completed Submissions</a> tab.<br>
Your submission should be public on the <a href=\"{$params['base_url']}/tpps_details/main\">TPPS/TGDR Landing Page</a> within the next 24 hours.";
            
            break;

        default:
            break;
    }
}

function tpps_element_info_alter(&$type){
    if (isset($type['textfield']['#maxlength'])){
        $type['textfield']['#maxlength'] = 512;
    }
}

function tpps_tab_create($type, $user, $name = NULL){
    
    global $base_url;
    $email = $user->mail;
    $state_name = 'tpps_incomplete_' . $email;
    $params = drupal_get_query_parameters();
    $final = "";
    $t1 = $t2 = FALSE;
    
    if (isset($params['accession']) and isset($params['action']) and $params['action'] === 'DELETE'){
        $delete_name = $state_name . $params['accession'];
        $results = db_select("public.variable", "variable")
            ->fields('variable')
            ->condition('name', db_like($delete_name), 'LIKE')
            ->execute()
            ->fetchAssoc();
        
        variable_del($results['name']);
        $and = db_and()
            ->condition('accession', $params['accession'])
            ->condition('db_id', 95);
        $results = db_delete('chado.dbxref')
            ->condition($and)
            ->execute();
        
        //dpm($results);
    }
    
    $results = db_select("public.variable", "variable")
        ->fields('variable')
        ->condition('name', db_like($state_name) . '%', 'LIKE')
        ->execute();
    
    $style = 
    '<style>
        .tpps_profile_tab {
            background: #ffffff;
            border: 1px solid #cccccc;
            border-radius: 4px;
            padding: 0px 10px;
        }
    </style>';
    $display = "<label for='tpps_incomplete_table'>Incomplete Submissions</label><div class='tpps_profile_tab'><table id='tpps_incomplete_table' style='width:-webkit-fill-available' border='1'><thead>";
    $display .= "<tr><th>Title</th><th>Primary Author</th><th>Number of Species</th><th>Abstract</th><th>Journal</th><th></th></tr>";
    $display .= "</thead><tbody>";
    
    foreach ($results as $item){
        $name = $item->name;
        $state = variable_get($name, NULL);
        
        $display .= "<tr>";
        
        if (isset($state['saved_values']['Hellopage']['publication']['title'])){
            $title = check_plain($state['saved_values']['Hellopage']['publication']['title']);
            $display .= "<td><a href='$base_url/master?accession={$state['accession']}' style='text-decoration: underline;'>$title</a></td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['primaryAuthor'])){
            $author = check_plain($state['saved_values']['Hellopage']['primaryAuthor']);
            $display .= "<td>$author</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['organism']['number'])){
            $species_number = check_plain($state['saved_values']['Hellopage']['organism']['number']);
            $display .= "<td>$species_number</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['abstract'])){
            $abstract = check_plain($state['saved_values']['Hellopage']['publication']['abstract']);
            if (strlen($abstract) > 103){
                $abstract = check_plain(substr($abstract, 0, 100) . "...");
            }
            $display .= "<td>$abstract</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['journal'])){
            $journal = check_plain($state['saved_values']['Hellopage']['publication']['journal']);
            $display .= "<td>$journal</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['accession'])){
            $display .= "<td style='text-align:center'><input type='submit' id='delete-{$state['accession']}' onclick='";
            $title = (isset($state['saved_values']['Hellopage']['publication']['title'])) ? ' titled ' . $state['saved_values']['Hellopage']['publication']['title'] : '';
            $display .= "if (confirm(\"Attention! \\n\\nAre you sure you want to delete your submission{$title}?\\nThis action cannot be undone, and all of your data will be lost!\")){window.location.href = \"$base_url/user/{$user->uid}/TPPS?accession={$state['accession']}&action=DELETE\"}";
            $display .= "' name='op' class='form-button' value='Delete'></td>";
        }
        else {
            $display .= '<td></td>';
        }
        
        $display .= "</tr>";
    }
    
    if (!isset($name)){
        $display = $style;
    }
    else {
        $display .= "</tbody></table></div><br>";
        $t1 = TRUE;
    }
    
    $final .= $display;
    $state_name = 'tpps_complete_' . $email;
    $name = NULL;
    
    $results = db_select("public.variable", "variable")
        ->fields('variable')
        ->condition('name', db_like($state_name) . '%', 'LIKE')
        ->execute();
    
    $display = "<label for='tpps_complete_table'>Complete Submissions</label><div class='tpps_profile_tab'><table id='tpps_complete_table' style='width:-webkit-fill-available' border='1'><thead>";
    $display .= "<tr><th>Title</th><th>Primary Author</th><th>Number of Species</th><th>Abstract</th><th>Journal</th><th>Status</th></tr>";
    $display .= "</thead><tbody>";
    
    foreach ($results as $item){
        $name = $item->name;
        $state = variable_get($name, NULL);
        
        $display .= "<tr>";
        
        if (isset($state['saved_values']['Hellopage']['publication']['title'])){
            $title = check_plain($state['saved_values']['Hellopage']['publication']['title']);
            $display .= "<td><a href='$base_url/completed-submission?id={$state['accession']}' style='text-decoration: underline;'>$title</a></td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['primaryAuthor'])){
            $author = check_plain($state['saved_values']['Hellopage']['primaryAuthor']);
            $display .= "<td>$author</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['organism']['number'])){
            $species_number = check_plain($state['saved_values']['Hellopage']['organism']['number']);
            $display .= "<td>$species_number</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['abstract'])){
            $abstract = check_plain($state['saved_values']['Hellopage']['publication']['abstract']);
            if (strlen($abstract) > 103){
                $abstract = check_plain(substr($abstract, 0, 100) . "...");
            }
            $display .= "<td>$abstract</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['journal'])){
            $journal = check_plain($state['saved_values']['Hellopage']['publication']['journal']);
            $display .= "<td>$journal</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        $display .= "<td>{$state['status']}</td></tr>";
    }
    
    if (!isset($name)){
        $display = "";
    }
    else {
        $display .= "</tbody></table></div><br>";
        $t2 = TRUE;
    }
    
    if (!$t1 and !$t2){
        $display = $style;
        $display .= "<h2>Could not find any Submissions</h2>";
        $display .= "<p>We could not find any incomplete TPPS Submissions or TPPS Submissions pending approval. If you would like to start a new TPPS Submission, you can start <a href=$base_url/master>here.</a></p>";
    }
    
    $final .= $display;
    
    return $final;
}

function tpps_completed_display($form, $form_state){
    
    global $user;
    global $base_url;
    $params = drupal_get_query_parameters();
    $accession = $params['id'];
    $link = "$base_url/tpps_details/accession/$accession";
    
    $old_form_state = variable_get('tpps_complete_' . $user->mail . $accession);
    $values = $old_form_state['saved_values'];
    
    $css = "
    .tgdr_complete_submission {
        background: #ffffff;
        border: 1px solid #cccccc;
        border-radius: 4px;
        padding: 0px 10px;
    }		
    ";
    drupal_add_css($css, 'inline');
    
    $display = "<label for='tpps_$accession'>{$values['Hellopage']['publication']['title']}</label><p>You can view the TPPS Details page with completed and approved TPPS and TGDR data <a href=\"$link\">here</a></p>";
    
    $display .= tpps_table_display($old_form_state);
    
    $form['a'] = array(
      '#type' => 'hidden',
      '#suffix' => $display
    );
    
    return $form;
}

function tpps_table_display($state){
    
    $accession = $state['saved_values']['fourthPage']['accession'];
    $display = "<div class='tpps_complete_submission'><table id='tpps_$accession' style='width:-webkit-fill-available' border='1'><thead>";
    //$display .= "<tr><th>Field</th><th>Value</th>";
    $display .= "</thead><tbody>";
    
    $flat = tpps_flatten($state);
    
    foreach ($flat as $key => $val){
        if ($key[0] !== '#'){
            $key_str = filter_xss(check_plain($key));
            $val_str = filter_xss(check_plain($val));

            if (preg_match('/File/', $key) and ($file_name = file_load($val)->filename)){
                //create links to files
                $file_url = check_plain(file_create_url(file_load($val)->uri));
                $val_str = "<a href='$file_url' target='blank'>$file_name</a>";
            }
            elseif (preg_match('/Month/', $key)){
                //skip experiment start/end month
                continue;
            }
            elseif (preg_match('/^(.*)Year/', $key, $matches)){
                //combine experiment start/end month + year
                if (isset($flat[$matches[1] . 'Month'])){
                    $key_str = $matches[1] . 'Date';
                    $val_str = "{$flat[$matches[1] . 'Month']} $val_str";
                }
                else {
                    continue;
                }
            }
            elseif (preg_match('/Study Location/', $key) and isset($flat['#location_type']) and $flat['#location_type']){
                //add map capability to location
                if ($flat['#location_type'] == '2'){
                    $query = $val_str;
                }
                elseif ($flat['#location_type'] != '2' and ($standard = tpps_standard_coord($val_str))){
                    $query = $standard;
                }
                $val_str = "<a id=\"sidebar_map\" style=\"cursor:pointer\">$val_str</a>";
                if (isset($query)){
                    $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=AIzaSyDkeQ6KN6HEBxrIoiSCrCHFhIbipycqouY&z=5\\\" allowfullscreen> </iframe></div>";
                    $js = "jQuery(document).ready(function ($) {
                        jQuery(\"#sidebar_map\").click(function() {
                            jQuery(\"#sidebar_map_wrapper\").remove();
                            jQuery(\"#sidebar_map\").after( \"<br><div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                        });
                    });";
                    drupal_add_js($js, 'inline');
                }
            }

            $display .= "<tr><td>$key_str</td><td>$val_str</td></tr>";
        }
    }
    
    $display .= "</tbody></table></div><br>";
    
    return $display;
}

function tpps_flatten($state){
    $data = isset($state['saved_values']) ? $state['saved_values'] : NULL;
    
    if (!$data){
        return;
    }
    unset($data['frontpage']);
    unset($data['summarypage']);
    unset($data['form_build_id']);
    
    $page_1 = &$data['Hellopage'];
    $pub = &$page_1['publication'];
    $org = &$page_1['organism'];
    
    if (isset($page_1['#cleared']) and $page_1['#cleared']){
        $data['#page_1_cleared'] = TRUE;
    }
    else {
        $data['#page_1_cleared'] = FALSE;
    }
    $data['Publication Title'] = isset($pub['title']) ? $pub['title'] : NULL;
    $data['Primary Author'] = isset($page_1['primaryAuthor']) ? $page_1['primaryAuthor'] : NULL;
    $data['Organization'] = isset($page_1['organization']) ? $page_1['organization'] : NULL;
    $data['Publication Status'] = isset($pub['status']) ? $pub['status'] : NULL;
    $data['Publication Year'] = isset($pub['year']) ? $pub['year'] : NULL;
    $data['Publication Abstract'] = isset($pub['abstract']) ? $pub['abstract'] : NULL;
    $data['Publication Journal'] = isset($pub['journal']) ? $pub['journal'] : NULL;
    
    if (isset($pub['secondaryAuthors']['number'])){
        $data['#number_secondary_authors'] = $pub['secondaryAuthors']['number'];
        for ($i = 1; $i < $data['#number_secondary_authors']; $i++){
            if (isset($pub['secondaryAuthors']["$i"]) and $pub['secondaryAuthors']["$i"] != ''){
                $data["Secondary Author $i"] = $pub['secondaryAuthors']["$i"];
            }
        }
        if ($pub['secondaryAuthors']['check'] and $pub['secondaryAuthors']['file']){
            $data["Secondary Authors File"] = $pub['secondaryAuthors']['file'];
            $data['#secondary_authors_file_no_header'] = isset($pub['secondaryAuthors']['no-header']) ? $pub['secondaryAuthors']['no-header'] : NULL;
        }
    }
    
    if (isset($org['number'])){
        $data['#number_organisms'] = $org['number'];
        for ($i = 1; $i <= $data['#number_organisms']; $i++){
            if (isset($org["$i"]) and $org["$i"] != ''){
                $data["Species $i"] = $org["$i"];
            }
        }
    }
    unset($data['Hellopage']);
    
    $page_2 = &$data['secondPage'];
    $loc = &$page_2['studyLocation'];
    
    if (isset($page_2['#cleared']) and $page_2['#cleared']){
        $data['#page_2_cleared'] = TRUE;
    }
    else {
        $data['#page_2_cleared'] = FALSE;
    }
    $data['Experiment Starting Month'] = isset($page_2['StartingDate']['month']) ? $page_2['StartingDate']['month'] : NULL;
    $data['Experiment Starting Year'] = isset($page_2['StartingDate']['year']) ? $page_2['StartingDate']['year'] : NULL;
    $data['Experiment Ending Month'] = isset($page_2['EndingDate']['month']) ? $page_2['EndingDate']['month'] : NULL;
    $data['Experiment Ending Year'] = isset($page_2['EndingDate']['year']) ? $page_2['EndingDate']['year'] : NULL;
    $data['#location_type'] = (isset($loc['type']) and $loc['type']) ? $loc['type'] : NULL;
    
    if ($data['#location_type'] == '2' and isset($loc['custom'])){
        $data['Study Location'] = $loc['custom'];
    }
    elseif ($data['#location_type'] and isset($loc['coordinates'])){
        $data['Study Location'] = $loc['coordinates'];
    }
    
    if ($page_2['dataType']){
        $data_type_options = array(
          1 => 'Genotype x Phenotype',
          2 => 'Genotype',
          3 => 'Genotype x Phenotype x Environment',
          4 => 'Phenotype x Environment',
          5 => 'Genotype x Environment'
        );
        if (isset($data_type_options[$page_2['dataType']])){
            $data['Data Type'] = $data_type_options[$page_2['dataType']];
        }
    }
    
    if ($page_2['studyType']){
        $study_type_options = array(
          1 => 'Natural Population (Landscape)',
          2 => 'Growth Chamber',
          3 => 'Greenhouse',
          4 => 'Experimental/Common Garden',
          5 => 'Plantation',
        );
        if (isset($study_type_options[$page_2['studyType']])){
            $data['Study Type'] = $study_type_options[$page_2['studyType']];
        }
        
        switch ($page_2['studyType']){
            case 1:
                if (isset($page_2['naturalPopulation'])){
                    $nat_pop = &$page_2['naturalPopulation'];
                    $data['Seasons Assessed'] = '';
                    foreach ($nat_pop['season'] as $key => $item){
                        if (isset($item) and $item != '0'){
                            $data['Seasons Assessed'] .= $item . ' ';
                        }
                    }
                    if (isset($nat_pop['assessions']) and $nat_pop['assessions']){
                        $data['Average number of assessions'] = $nat_pop['assessions'];
                    }
                }
                break;
                
            case 2:
                if (isset($page_2['growthChamber'])){
                    $growth = &$page_2['growthChamber'];
                    $root = &$growth['rooting'];
                    $treatment = &$root['treatment'];

                    if (isset($growth['co2Control']['option']) and $growth['co2Control']['option'] and $growth['co2Control']['option'] == '1'){
                        $data['CO2 Control'] = 'Controlled';
                        $data['CO2 Value'] = isset($growth['co2Control']['controlled']) ? $growth['co2Control']['controlled']: NULL;
                    }
                    elseif (isset($growth['co2Control']['option']) and $growth['co2Control']['option']){
                        $data['CO2 Control'] = 'Uncontrolled';
                        $data['CO2 Value'] = isset($growth['co2Control']['uncontrolled']) ? $growth['co2Control']['uncontrolled'] : NULL;
                    }

                    if (isset($growth['humidityControl']['option']) and $growth['humidityControl']['option'] and $growth['humidityControl']['option'] == '1'){
                        $data['Humidity Control'] = 'Controlled';
                        $data['Humidity Value'] = isset($growth['humidityControl']['controlled']) ? $growth['humidityControl']['controlled']: NULL;
                    }
                    elseif (isset($growth['humidityControl']['option']) and $growth['humidityControl']['option']){
                        $data['Humidity Control'] = 'Uncontrolled';
                        $data['Humidity Value'] = isset($growth['humidityControl']['uncontrolled']) ? $growth['humidityControl']['uncontrolled'] : NULL;
                    }

                    if (isset($growth['lightControl']['option']) and $growth['lightControl']['option'] and $growth['lightControl']['option'] == '1'){
                        $data['Light Intensity Control'] = 'Controlled';
                        $data['Light Intensity Value'] = isset($growth['lightControl']['controlled']) ? $growth['lightControl']['controlled']: NULL;
                    }
                    elseif (isset($growth['lightControl']['option']) and $growth['lightControl']['option']){
                        $data['Light Intensity Control'] = 'Uncontrolled';
                        $data['Light Intensity Value'] = isset($growth['lightControl']['uncontrolled']) ? $growth['lightControl']['uncontrolled'] : NULL;
                    }

                    $data['Average High Temperature'] = isset($growth['temp']['high']) ? $growth['temp']['high'] : NULL;
                    $data['Average Low Temperature'] = isset($growth['temp']['low']) ? $growth['temp']['low'] : NULL;

                    if (isset($root['option'])){
                        $rooting_options = array(
                          1 => 'Aeroponics',
                          2 => 'Hydroponics',
                          3 => 'Soil',
                        );
                        if (isset($rooting_options[$growth['rooting']['option']])){
                            $data['Rooting Type'] = $rooting_options[$growth['rooting']['option']];
                        }

                        if (isset($data['Rooting Type']) and $data['Rooting Type'] == 'Soil'){
                            $soil_options = array(
                              1 => 'Sand',
                              2 => 'Peat',
                              3 => 'Clay',
                              4 => 'Mixed',
                              5 => 'Other'
                            );
                            if (isset($soil_options[$root['soil']['type']])){
                                $data['Soil Type'] = $soil_options[$root['soil']['type']];
                            }

                            if (isset($data['Soil Type']) and $data['Soil Type'] == 'Other'){
                                $data['Custom Soil Type'] = $root['soil']['other'];
                            }

                            $data['Soil Container Type'] = isset($root['soil']['container']) ? $root['soil']['container'] : NULL;
                        }
                    }

                    if (isset($root['ph']['option']) and $root['ph']['option']){
                        $data['pH Control'] = 'Controlled';
                        $data['pH Value'] = isset($root['ph']['controlled']) ? $root['ph']['controlled'] : NULL;
                    }
                    else {
                        $data['pH Control'] = 'Uncontrolled';
                        $data['pH Value'] = isset($root['ph']['uncontrolled']) ? $root['ph']['uncontrolled'] : NULL;
                    }

                    if (isset($treatment)){
                        $selected = false;
                        $description = false;

                        foreach ($treatment as $field => $value){
                            if (!$description){
                                $description = true;
                                $selected = $value;
                                continue;
                            }
                            elseif ($selected == '1'){
                                $treatment_name = substr($field, 0, -12);
                                $data["Treatment: $treatment_name description"] = isset($value) ? $value : NULL;
                            }
                            $description = false;
                        }
                    }
                }
                break;
                
            case 3:
                if (isset($page_2['greenhouse'])){
                    $green = &$page_2['greenhouse'];
                    $root = &$green['rooting'];
                    $treatment = &$root['treatment'];

                    if (isset($green['humidityControl']['option']) and $green['humidityControl']['option'] and $green['humidityControl']['option'] == '1'){
                        $data['Humidity Control'] = 'Controlled';
                        $data['Humidity Value'] = isset($green['humidityControl']['controlled']) ? $green['humidityControl']['controlled']: NULL;
                    }
                    elseif (isset($green['humidityControl']['option']) and $green['humidityControl']['option']){
                        $data['Humidity Control'] = 'Uncontrolled';
                    }

                    if (isset($green['lightControl']['option']) and $green['lightControl']['option'] and $green['lightControl']['option'] == '1'){
                        $data['Light Intensity Control'] = 'Controlled';
                        $data['Light Intensity Value'] = isset($green['lightControl']['controlled']) ? $green['lightControl']['controlled']: NULL;
                    }
                    elseif (isset($green['lightControl']['option']) and $green['lightControl']['option']){
                        $data['Light Intensity Control'] = 'Uncontrolled';
                    }

                    $data['Average High Temperature'] = isset($green['temp']['high']) ? $green['temp']['high'] : NULL;
                    $data['Average Low Temperature'] = isset($green['temp']['low']) ? $green['temp']['low'] : NULL;

                    if (isset($root['option'])){
                        $rooting_options = array(
                          1 => 'Aeroponics',
                          2 => 'Hydroponics',
                          3 => 'Soil',
                        );
                        if (isset($rooting_options[$green['rooting']['option']])){
                            $data['Rooting Type'] = $rooting_options[$green['rooting']['option']];
                        }

                        if (isset($data['Rooting Type']) and $data['Rooting Type'] == 'Soil'){
                            $soil_options = array(
                              1 => 'Sand',
                              2 => 'Peat',
                              3 => 'Clay',
                              4 => 'Mixed',
                              5 => 'Other'
                            );
                            if (isset($soil_options[$root['soil']['type']])){
                                $data['Soil Type'] = $soil_options[$root['soil']['type']];
                            }

                            if (isset($data['Soil Type']) and $data['Soil Type'] == 'Other'){
                                $data['Custom Soil Type'] = $root['soil']['other'];
                            }

                            $data['Soil Container Type'] = isset($root['soil']['container']) ? $root['soil']['container'] : NULL;
                        }
                    }

                    if (isset($root['ph']['option']) and $root['ph']['option']){
                        $data['pH Control'] = 'Controlled';
                        $data['pH Value'] = isset($root['ph']['controlled']) ? $root['ph']['controlled'] : NULL;
                    }
                    else {
                        $data['pH Control'] = 'Uncontrolled';
                    }

                    if (isset($treatment)){
                        $selected = false;
                        $description = false;

                        foreach ($treatment as $field => $value){
                            if (!$description){
                                $description = true;
                                $selected = $value;
                                continue;
                            }
                            elseif ($selected == '1'){
                                $treatment_name = substr($field, 0, -12);
                                $data["Treatment: $treatment_name description"] = isset($value) ? $value : NULL;
                            }
                            $description = false;
                        }
                    }
                }
                break;
                
            case 4:
                if (isset($page_2['commonGarden'])){
                    $garden = &$page_2['commonGarden'];

                    if (isset($garden['irrigation']['option']) and $garden['irrigation']['option']){
                        $irrigation_options = array(
                          1 => 'Irrigation from top',
                          2 => 'Irrigation from bottom',
                          3 => 'Drip Irrigation',
                          4 => 'Other',
                          5 => 'No Irrigation',
                        );
                        if (isset($irrigation_options[$garden['irrigation']['option']])){
                            $data['Irrigation Type'] = $irrigation_options[$garden['irrigation']['option']];
                        }

                        if (isset($data['Irrigation Type']) and $data['Irrigation Type'] == 'Other'){
                            $data['Custom Irrigation Type'] = $garden['irrigation']['other'];
                        }
                    }

                    if (isset($garden['salinity']['option']) and $garden['salinity']['option'] and $garden['salinity']['option'] == '1'){
                        $data['Salinity Control'] = 'Controlled';
                        $data['Salinity Value'] = isset($garden['salinity']['controlled']) ? $garden['salinity']['controlled']: NULL;
                    }
                    elseif (isset($garden['salinity']['option']) and $garden['salinity']['option']){
                        $data['Salinity Control'] = 'Uncontrolled';
                        $data['Salinity Value'] = isset($garden['salinity']['uncontrolled']) ? $garden['salinity']['uncontrolled']: NULL;
                    }

                    $biotic_envs = array();
                    foreach ($garden['bioticEnv']['option'] as $key => $val){
                        if ($val){
                            $biotic_envs[] = $key;
                        }
                    }
                    $data['Biotic Environment'] = (isset($biotic_envs) and count($biotic_envs) > 1) ? implode(', ', $biotic_envs) : NULL;

                    if (isset($garden['bioticEnv']['option']['Other']) and $garden['bioticEnv']['option']['Other'] and isset($garden['bioticEnv']['other']) and $garden['bioticEnv']['other'] != ''){
                        $data['Custom Biotic Environment'] = $garden['bioticEnv']['other'];
                    }

                    $seasons = array();
                    foreach ($garden['season'] as $key => $item){
                        if (isset($item) and $item != '0'){
                            $seasons[] = $item;
                        }
                    }
                    $data['Seasons Assessed'] = (isset($seasons) and count($seasons) > 1) ? implode(', ', $seasons) : NULL;

                    if (isset($garden['treatment']['check']) and $garden['treatment']['check']){
                        $treatment = &$garden['treatment'];
                        $selected = false;
                        $description = false;

                        foreach ($treatment as $field => $value){
                            if ($field != 'check'){
                                if (!$description){
                                    $description = true;
                                    $selected = $value;
                                    continue;
                                }
                                elseif (isset($selected) and $selected == '1'){
                                    $treatment_name = substr($field, 0, -12);
                                    $data["Treatment: $treatment_name description"] = $value;
                                }
                                $description = false;
                            }
                        }
                    }
                }
                break;
                
            case 5:
                if (isset($page_2['plantation'])){
                    $plant = &$page_2['naturalPopulation'];
                    $data['Seasons Assessed'] = '';
                    foreach ($plant['season'] as $key => $item){
                        if (isset($item) and $item != '0'){
                            $data['Seasons Assessed'] .= $item . ' ';
                        }
                    }
                    
                    if (isset($plant['assessions']) and $plant['assessions']){
                        $data['Average number of assessions'] = $plant['assessions'];
                    }
                    
                    if (isset($plant['treatment']['check']) and $plant['treatment']['check']){
                        $treatment = &$plant['treatment'];
                        $selected = false;
                        $description = false;

                        foreach ($treatment as $field => $value){
                            if ($field != 'check'){
                                if (!$description){
                                    $description = true;
                                    $selected = $value;
                                    continue;
                                }
                                elseif (isset($selected) and $selected == '1'){
                                    $treatment_name = substr($field, 0, -12);
                                    $data["Treatment: $treatment_name description"] = $value;
                                }
                                $description = false;
                            }
                        }
                    }
                }
                break;

            default:
                break;
        }
    }
    unset($data['secondPage']);
    
    $page_3 = &$data['thirdPage'];
    
    if (isset($page_3['#cleared']) and $page_3['#cleared']){
        $data['#page_3_cleared'] = TRUE;
    }
    else {
        $data['#page_3_cleared'] = FALSE;
    }
    $page_3 = &$data['thirdPage']['tree-accession'];
    if (isset($page_3['check']) and $page_3['check']){
        for ($i = 1; $i <= $data['#number_organisms']; $i++){
            if (isset($page_3["species-$i"]['file']) and $page_3["species-$i"]['file']){
                $organism_name = $data["Species $i"];
                $data["$organism_name Accession File"] = $page_3["species-$i"]['file'];
            }
        }
    }
    elseif (isset($page_3['file']) and $page_3['file']){
        $data['Tree Accession File'] = $page_3['file'];
    }
    unset($data['thirdPage']);
    
    $page_4 = &$data['fourthPage'];
    
    if (isset($page_4['#cleared']) and $page_4['#cleared']){
        $data['#page_4_cleared'] = TRUE;
    }
    else {
        $data['#page_4_cleared'] = FALSE;
    }
    for ($i = 1; $i <= $data['#number_organisms']; $i++){
        if (isset($page_4["organism-$i"])){
            $org = &$page_4["organism-$i"];
            $org_name = isset($data["Species $i"]) ? $data["Species $i"] : NULL;
            
            if (isset($org['phenotype'])){
                $pheno = &$org['phenotype'];
                
                if (isset($pheno['number'])){
                    $data['#number_phenotypes'] = $pheno['number'];
                    for ($j = 1; $j < $data['#number_phenotypes']; $j++){
                        $fields = array(
                          'name' => 'Name',
                          'attribute' => 'Attribute',
                          'description' => 'Description',
                          'units' => 'Units'
                        );
                        if (isset($pheno["$j"]['struct-check']) and $pheno["$j"]['struct-check']){
                            $fields['structure'] = 'Structure';
                        }
                        if (isset($pheno["$j"]['val-check']) and $pheno["$j"]['val-check']){
                            $fields['min'] = 'Minimum Value';
                            $fields['max'] = 'Maximum Value';
                        }
                        
                        foreach ($fields as $field => $field_string){
                            if (isset($pheno["$j"][$field]) and $pheno["$j"][$field] != ''){
                                $data["$org_name Phenotype $j $field_string"] = $pheno[$j][$field];
                            }
                        }
                    }
                }
                
                if (isset($pheno['check']) and $pheno['check'] and isset($pheno['metadata']) and $pheno['metadata']){
                    $data["$org_name Phenotype Metadata File"] = $pheno['metadata'];
                }
                
                if (isset($pheno['file']) and $pheno['file']){
                    $data["$org_name Phenotype File"] = $pheno['file'];
                }
            }
            
            if (isset($org['genotype'])){
                $geno = &$org['genotype'];
                $file_type = &$geno['file-type'];
                
                $marker_types = array();
                foreach ($geno['marker-type'] as $key => $val){
                    if ($val){
                        $marker_types[] = $key;
                    }
                }
                $data["$org_name Genotype Marker Types"] = isset($marker_types) ? implode(', ', $marker_types) : NULL;
                
                if (isset($geno['marker-type']['SNPs']) and $geno['marker-type']['SNPs']){
                    $snp = $geno['SNPs'];
                    if (isset($snp['genotyping-design']) and $snp['genotyping-design']){
                        $geno_design_options = array(
                          1 => 'GBS',
                          2 => 'Targeted Capture',
                          3 => 'Whole Genome Resequencing',
                          4 => 'RNA-Seq',
                          5 => 'Genotyping Array'
                        );
                        if (isset($geno_design_options[$snp['genotyping-design']])){
                            $data["$org_name Genotyping Design"] = $geno_design_options[$snp['genotyping-design']];
                        }
                        
                        if (isset($data["$org_name Genotyping Design"]) and $data["$org_name Genotyping Design"] == 'GBS' and isset($snp['GBS']) and $snp['GBS']){
                            $gbs_options = array(
                              1 => 'RADSeq',
                              2 => 'ddRAD-Seq',
                              3 => 'NextRAD',
                              4 => 'RAPTURE',
                              5 => 'Other'
                            );
                            if (isset($gbs_options[$snp['GBS']])){
                                $data["$org_name GBS Type"] = $gbs_options[$snp['GBS']];
                            }
                            
                            if (isset($data["$org_name GBS Type"]) and $data["$org_name GBS Type"] == 'Other' and isset($snp['GBS-other']) and $snp['GBS-other'] != ''){
                                $data["$org_name Custom GBS Type"] = $snp['GBS-other'];
                            }
                        }
                        
                        if (isset($data["$org_name Genotyping Design"]) and $data["$org_name Genotyping Design"] == 'Targeted Capture' and isset($snp['targeted-capture']) and $snp['targeted-capture']){
                            $targeted_capture_options = array(
                              1 => 'Exome Capture',
                              2 => 'Other'
                            );
                            if (isset($targeted_capture_options[$snp['targeted-capture']])){
                                $data["$org_name Targeted Capture Type"] = $targeted_capture_options[$snp['targeted-capture']];
                            }
                            
                            if (isset($data["$org_name Targeted Capture Type"]) and $data["$org_name Targeted Capture Type"] == 'Other' and isset($snp['targeted-capture-other']) and $snp['targeted-capture-other'] != ''){
                                $data["$org_name Custom Targeted Capture Type"] = $snp['targeted-capture-other'];
                            }
                        }
                    }
                }
                if (isset($geno['marker-type']['SSRs/cpSSRs']) and $geno['marker-type']['SSRs/cpSSRs'] and isset($geno['SSRs/cpSSRs']) and $geno['SSRs/cpSSRs'] != ''){
                    $data["$org_name SSRs/cpSSRs Type"] = $geno['SSRs/cpSSRs'];
                }
                if (isset($geno['marker-type']['Other']) and $geno['marker-type']['Other'] and isset($geno['other-marker']) and $geno['other-marker'] != ''){
                    $data["$org_name Other Marker Type"] = $geno['other-marker'];
                }
                
                if (isset($geno['ref-genome']) and $geno['ref-genome'] === 'bio' and isset($geno['BioProject-id']) and $geno['BioProject-id'] != ''){
                    $data["$org_name BioProject Id"] = $geno['BioProject-id'];
                    
                    if (isset($geno['assembly-auto']) and gettype($geno['assembly-auto']) === 'array'){
                        $count = 1;
                        foreach ($geno['assembly-auto'] as $id => $check){
                            if (isset($check) and $check){
                                $data["$org_name Linked Accession $count"] = $id;
                                $count++;
                            }
                        }
                    }
                }
                elseif (isset($geno['ref-genome']) and ($geno['ref-genome'] === 'manual' or $geno['ref-genome'] === 'manual2') and isset($geno['tripal_fasta']['file']['file_upload']) and isset($geno['tripal_fasta']['file']['file_upload_existing']) and ($geno['tripal_fasta']['file']['file_upload'] or $geno['tripal_fasta']['file']['file_upload_existing'])){
                    if ($geno['tripal_fasta']['file']['file_upload']){
                        $data["$org_name Uploaded Reference File"] = $geno['tripal_fasta']['file']['file_upload'];
                    }
                    if ($geno['tripal_fasta']['file']['file_upload_existing']){
                        $data["$org_name Reference File"] = $geno['tripal_fasta']['file']['file_upload_existing'];
                    }
                }
                elseif (isset($geno['ref-genome']) and $geno['ref-genome'] === 'url' and isset($geno['tripal_fasta']['file']['file_remote']) and $geno['tripal_fasta']['file']['file_remote']){
                    $data["$org_name Website of reference file"] = $geno['tripal_fasta']['file']['file_remote'];
                }
                elseif (isset($geno['ref-genome']) and $geno['ref-genome']){
                    $data["$org_name Reference Genome"] = $geno['ref-genome'];
                }
                
                if (isset($file_type['Genotype Assay']) and $file_type['Genotype Assay'] and isset($geno['file']) and $geno['file']){
                    $data["$org_name Genotype Assay File"] = $geno['file'];
                }
                
                if (isset($file_type['Assay Design']) and $file_type['Assay Design'] and isset($geno['assay-design']) and $geno['assay-design']){
                    $data["$org_name Genotype Assay Design File"] = $geno['assay-design'];
                }
                
                if (isset($file_type['VCF']) and $file_type['VCF'] and isset($geno['vcf']) and $geno['vcf']){
                    $data["$org_name Genotype VCF File"] = $geno['vcf'];
                }
            }
        }
    }
    unset($data['fourthPage']);
    
    $data['#dbxref_id'] = isset($state['dbxref_id']) ? $state['dbxref_id'] : NULL;
    $data['#accession'] = isset($state['accession']) ? $state['accession'] : NULL;
    $data['#status'] = isset($state['status']) ? $state['status'] : NULL;
    
    foreach ($data as $key => $val){
        if (!isset($val) or $val === ''){
            unset($data[$key]);
        }
    }
    
    return $data;
}

function tpps_init_project($form, &$form_state){
    
    //Get next dbxref_id and accession # for project
    $and = db_and()
        ->condition('d.accession', db_like('TGDR') . '%', 'LIKE')
        ->condition('d.db_id', '95');
    
    $accession_results = db_select('chado.dbxref', 'd')
        ->fields('d', array('accession'))
        ->condition($and)
        ->orderBy('d.accession', 'DESC')
        ->range(0,1)
        ->execute()
        ->fetchAssoc();
    
    if ($accession_results){
        $accession = $accession_results['accession'];
    }
    
    if ($accession === NULL){
        $accession = "TGDR001";
    }
    else {
        $accession = substr($accession, 4) + 1;
    }
    
    while (strlen($accession) < 3){
        $accession = "0" . $accession;
    }
    if (substr($accession, 0, 4) != 'TGDR'){
        $accession = "TGDR" . $accession;
    }
    
    //make new record in temp table
    $values = array(
      'db_id' => '95',
      'accession' => $accession
    );
    
    $dbxref_id = db_insert('chado.dbxref')
        ->fields($values)
        ->execute();
    
    $form_state['dbxref_id'] = $dbxref_id;
    $form_state['accession'] = $accession;
    $form_state['saved_values']['frontpage']['accession'] = $accession;
    
    //project will be created when name is provided, after the first page is complete.
    return $dbxref_id;
}

function tpps_create_record($table, array $values){
    if (isset($values[0]) and gettype($values[0]) === "array"){
        $is_multi = TRUE;
    }
    else {
        $is_multi = FALSE;
    }
    
    $default_fields = array();
    $insert = NULL;
    
    if ($is_multi){
        $unique_columns = tpps_get_unique_columns($table);
        foreach ($values as $key => $record){
            if (($existing_key = tpps_record_exists($table, $record, $unique_columns))){
                unset($values[$key]);
            }
        }
        if ($values == array()){
            return;
        }
    }
    else{
        //check record exists
        if (($existing_key = tpps_record_exists($table, $values))){
            //if it does, do not attempt to re-write it.
            //drupal_set_message(t('Error: Record already exists.'), 'error');
            return $existing_key;
        }
    }
    
    $fields = db_query("select column_name from INFORMATION_SCHEMA.columns where table_name='$table' and table_schema='chado'");
    $set_fields = array();
    
    if ($is_multi){
        while (($field = $fields->fetchAssoc())){
            $key = $field['column_name'];
            $top = reset($values);
            if (!isset($top[$key])){
                $default_fields[] = $key;
                foreach ($values as $index => $record){
                    unset($values[$index][$key]);
                }
            }
            else {
                $set_fields[] = $key;
            }
        }
    }
    else {
        //get default values
        while (($field = $fields->fetchAssoc())){
            $key = $field['column_name'];
            if (!isset($values[$key])){
                $default_fields[] = $key;
                unset($values[$key]);
            }
            else {
                $set_fields[] = $key;
            }
        }
    }
    
    //print_r($default_fields);
//    dpm($table);
//    dpm($values);
//    dpm($default_fields);
    if ($is_multi){
        $insert = db_insert("chado.$table")
            ->useDefaults($default_fields)
            ->fields($set_fields);
        foreach ($values as $record){
            $insert->values($record);
        }
        $insert->execute();
        return;
    }
    else {
        //Insert the record
        $insert = db_insert("chado.$table")
            ->useDefaults($default_fields)
            ->fields($set_fields)
            ->values($values)
            ->execute();

        return $insert;
    }
}

function tpps_record_exists($table, array $values, $unique_columns = NULL){
    
    if (!isset($unique_columns)){
        $unique_columns = tpps_get_unique_columns($table);
        if (!isset($unique_columns)){
            return FALSE;
        }
    }
    
    $results = db_select("chado.$table", 't')
        ->fields('t');
    
    $and = db_and();
    foreach ($unique_columns as $field){
        if (isset($values[$field]) and $values[$field] != ''){
            $and->condition($field, "$values[$field]");
        }
    }
    
    $results = $results->condition($and)
        ->execute()
        ->fetchAssoc();
    
    if ($results){
        $primary = tpps_get_primary_key($table);
        return $results[$primary];
    }
    
    return FALSE;
}

function tpps_get_unique_columns($table){
    
    $result = db_query("select indexdef from pg_indexes where tablename = '$table' and schemaname = 'chado' and indexdef LIKE '%UNIQUE%' and indexname NOT LIKE '%_pkey';")
        ->fetchAssoc();
    
    if ($result){
        $result = preg_split('/(\(|\))/',$result['indexdef']);
        $result = explode(', ', $result[1]);
        return $result;
    }
    else {
        return NULL;
    }
}

function tpps_get_primary_key($table){
    
    $result = db_query("select indexdef from pg_indexes where tablename = '$table' and schemaname = 'chado' and indexdef LIKE '%UNIQUE%' and indexname LIKE '%_pkey';")
    ->fetchAssoc();
    
    if ($result){
        $result = preg_split('/(\(|\))/',$result['indexdef']);
        return $result[1];
    }
    else {
        return NULL;
    }
}

function tpps_custom_cvterm($term, $definition){
    
    $dbxref = db_query('select d.accession from chado.dbxref d where d.db_id=95 and d.accession ~ \'^\\d+$\' order by cast(d.accession as bigint) desc');
    
    foreach ($dbxref as $row){
        $accession = $row->accession + 1;
        break;
    }
    
    if (!isset($accession)){
        $accession = 1;
    }
    
    $dbxref = db_insert('chado.dbxref')
        ->useDefaults(array(
          'version',
          'description',
          'dbxref_id'
        ))
        ->fields(array(
          'db_id' => '95',
          'accession' => "$accession"
        ))
        ->execute();
    
    $cvterm = db_insert('chado.cvterm')
        ->useDefaults(array(
          'cvterm_id',
          'is_obsolete',
          'is_relationshiptype'
        ))
        ->fields(array(
          'cv_id' => '61',
          'name' => $term,
          'definition' => $definition,
          'dbxref_id' => $dbxref
        ))
        ->execute();
    
    return $cvterm;
}

function tpps_compare_files($fid_1, $fid_2, $file_1_id_name, $file_2_id_name){
    
    $file_1 = file_load($fid_1);
    $file_2 = file_load($fid_2);
    
    $file_1_name = $file_1->uri;
    $file_2_name = $file_2->uri;
    
    $file_1_location = drupal_realpath("$file_1_name");
    $file_2_location = drupal_realpath("$file_2_name");
    $file_1_content = parse_xlsx($file_1_location);
    $file_2_content = parse_xlsx($file_2_location);
    
    if (gettype($file_1_id_name) == 'integer'){
        $file_1_id_name = $file_1_content['headers'][$file_1_id_name];
        $last_row = array();
        foreach($file_1_content['headers'] as $num => $val){
            $last_row[$val] = $val;
        }
        $file_1_content[] = $last_row;
    }
    if (gettype($file_2_id_name) == 'integer'){
        $file_2_id_name = $file_2_content['headers'][$file_2_id_name];
        $last_row = array();
        foreach($file_2_content['headers'] as $num => $val){
            $last_row[$val] = $val;
        }
        $file_2_content[] = $last_row;
    }
    
    $missing_ids = array();
    
    for ($i = 0; $i < count($file_1_content) - 1; $i++){
        $row = $file_1_content[$i];
        
        $needle_id = $row[$file_1_id_name];
        $found = FALSE;
        
        for ($j = 0; $j < count($file_2_content) - 1; $j++){
            if ($needle_id === $file_2_content[$j][$file_2_id_name]){
                $found = TRUE;
                break;
            }
        }
        
        if (!$found){
            array_push($missing_ids, $needle_id);
        }
    }
    
    return $missing_ids;
}

function tpps_standard_coord($raw_coordinate){
    
    $matches = array();
    $valid = TRUE;

    if (preg_match('/(([0-9]+)° ?([0-9]+)\' ?([0-9|\.]+)" ?([N|S])),? ?(([0-9]+)° ?([0-9]+)\' ?([0-9|\.]+)" ?([E|W]))/', $raw_coordinate, $matches)){
        $lat = $matches[2] + ($matches[3] / 60) + ($matches[4] / 3600);
        $long = $matches[7] + ($matches[8] / 60) + ($matches[9] / 3600);
    }
    elseif (preg_match('/(([0-9]+)° ?([0-9|\.]+)\' ?([N|S])),? ?(([0-9]+)° ?([0-9|\.]+)\' ?([E|W]))/', $raw_coordinate, $matches)){
        $lat = $matches[2] + ($matches[3] / 60);
        $long = $matches[6] + ($matches[7] / 60);
    }
    elseif (preg_match('/([0-9|\.]+), ?[\+|-]?([0-9|\.]+)/', $raw_coordinate, $matches)){
        $lat = $matches[1];
        $long = $matches[2];
    }
    elseif (preg_match('/([0-9|\.]+)°? ?([N|S]),? ?([0-9|\.]+)°? ?([E|W])/', $raw_coordinate, $matches)){
        $lat = $matches[1];
        $long = $matches[3];
    }
    else {
        $valid = FALSE;
    }

    if (preg_match('/(-).+,/', $raw_coordinate, $matches) and $valid){
        $lat = $lat * -1;
    }
    if (preg_match('/,.*(-)/', $raw_coordinate, $matches) and $valid){
        $long = $long * -1;
    }

    if (preg_match('/([N|S]).+([E|W])/', $raw_coordinate, $matches) and $valid){
        if ($matches[1] == 'S'){
            $lat = $lat * -1;
        }
        if ($matches[2] == 'W'){
            $long = $long * -1;
        }
    }
    
    if ($valid){
        return "$lat,$long";
    }
    else {
        return FALSE;
    }
}

function tpps_file_validate_columns(&$form_state, $required_groups, $file_element){
    $cols = $file_element['#value']['columns'];
    
    $parents = $file_element['#parents'];
    $new_end = end($parents) . "-columns";
    $group_path = array_pop($parents) . "-groups";
    $values = &$form_state['values'];
    foreach ($parents as $item){
        $values = &$values[$item];
    }
    //initialize form column values in form state
    $values[$new_end] = array();
    //hold onto the location of the columns in form state
    $state_column_values = &$values[$new_end];
    
    $error_parts = explode(':', $file_element['#title']);
    $error_prompt = $error_parts[0];
    
    $groups = array();
    $required_groups_flat = array();
    foreach($required_groups as $group => $combinations){
        $groups[$group] = array();
        $required_groups_flat[$group] = array();
        foreach ($combinations as $name => $combination){
            $required_groups_flat[$group] = array_merge($required_groups_flat[$group], $combination);
        }
    }
    
    foreach ($cols as $name => $type){
        $state_column_values[$name] = $type;
        foreach ($required_groups_flat as $group => $types){
            if (in_array($type, $types)){
                $groups[$group][$type] = $name;
                break;
            }
        }
    }
    
    foreach($required_groups as $group => $combinations){
        $group_valid = FALSE;
        foreach ($combinations as $name => $combination){
            $combination_valid = TRUE;
            foreach ($combination as $type){
                if (!isset($groups[$group][$type])){
                    $combination_valid = FALSE;
                    break;
                }
            }
            if ($combination_valid){
                $groups[$group]['#type'] = $name;
                $group_valid = TRUE;
                break;
            }
        }
        
        if (!$group_valid){
            form_set_error($file_element['#name'] . "[columns][$group", "$error_prompt: Please specify a column or columns that hold $group.");
        }
    }
    
    $values[$group_path] = $groups;
    
    return $groups;
}

function tpps_page_build(&$page){
    
    //dpm($page['content']['system_main']['step']['#default_value']);
    if (!isset($page['content']['system_main']['form_id']['#value']) or $page['content']['system_main']['form_id']['#value'] != 'tpps_master'){
        return $page;
    }
    
    if (isset($page['content']['system_main']['step']) and $page['content']['system_main']['step']['#default_value'] != 'frontpage' and $page['content']['system_main']['step']['#default_value'] != 'Hellopage'){
        $blockObject = block_load('views', 'tpps_status');
        $blockObject->title = ($page['content']['system_main']['step']['#default_value'] != 'summarypage') ? 'TPPS Status' : '';
        $blockObject->subject = '';
        $blockObject->region = 'Content';
        $block = _block_get_renderable_array(_block_render_blocks(array($blockObject)));
        $tpps_status = $block['views_tpps_status']['#markup'];
        if ($page['content']['system_main']['step']['#default_value'] != 'summarypage'){
            $tpps_status = "<div class='block block-system contextual-links-region block-menu tpps-status-block'>$tpps_status</div>";
            drupal_add_region_content('sidebar_second', $tpps_status);
        }
        else {
            $tpps_status = "<div id='tpps-status'></br>$tpps_status</div>";
            drupal_add_region_content('content', $tpps_status);
        }
    }
    
    return $page;
}

function tpps_master($form, &$form_state){
    
    global $user;
    $params = drupal_get_query_parameters();
    
    if (!isset($user->mail) and !isset($form_state['stage'])){
        //first access, not logged in
        $form_state['stage'] = 'frontpage';
    
        front_create_form($form, $form_state);
    
        drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
        
        return $form;
    }
    elseif (!isset($user->mail)){
        //not first access, but not logged in
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (isset($params['accession']) and !isset($form_state['stage'])) {
        //logged in, and with accession in link
        $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $params['accession']);
        $form_state['saved_values'] = $old_form_state['saved_values'];
        $form_state['stage'] = $old_form_state['stage'];
        $form_state['accession'] = $old_form_state['accession'];
        $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
    }
    else {
        //logged in, with plain link
        if (!isset($form_state['stage'])){
            //first access
            $form_state['stage'] = 'frontpage';
    
            front_create_form($form, $form_state);

            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");

            return $form;
        }
        else {
            //not first access
            if (!isset($form_state['saved_values']['frontpage']['accession']) or (isset($form_state['saved_values']['frontpage']['accession']) and $form_state['saved_values']['frontpage']['accession'] === 'new')){
                //no submissions, or selected to create new submission
                tpps_init_project($form, $form_state);
                variable_set('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession'], $form_state);
            }
            $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession']);
            $form_state['saved_values'] = $old_form_state['saved_values'];
            $form_state['stage'] = $old_form_state['stage'];
            $form_state['accession'] = $old_form_state['accession'];
            $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
        }
    }
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    $form['accession'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['accession'],
    );
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
	global $base_url;
	
	/******************************************
	Add status bar showing completed parts at the top
	*******************************************/
	//dpm($form_state['saved_values']);

	$form['#prefix'] = '<style>
		.tgdr_form_status div {
			display: inline-block;
			padding: 3px;
			margin-right: 10px;
		}
		
		.tgdr_form_status div img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}
		
		.tgdr_form_status {
			padding: 5px;
			background-color: #ffffff;
			border: 1px solid #cccccc;
			border-radius: 4px;
                        margin-bottom: 10px;
		}
                
                .btn-primary[name=op]{
                        margin: 10px 10px 10px 0px;
                }
                
                a.fieldset-title {
                        display: contents;
                }
	</style>';
	$form['#prefix'] .= '<div class="tgdr_form_status">';
	
	/**** Page 1 ****/
	if(isset($form_state['saved_values']['Hellopage']) and $form_state['stage'] != 'Hellopage') {
            $image_fname = 'message-16-ok.png';
	}
        else{
            $image_fname = 'message-16-warning.png';
        }
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Author and Species Information</div>";
	
	/**** Page 2 ****/
        if($form_state['stage'] != 'secondPage' and !isset($form_state['saved_values']['secondPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'secondPage' and $form_state['saved_values']['secondPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Experimental Conditions</div>";	

	/**** Page 3 ****/
	if($form_state['stage'] != 'thirdPage' and !isset($form_state['saved_values']['thirdPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'thirdPage' and $form_state['saved_values']['thirdPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Tree Accession</div>";	
	
	/**** Page 4 ****/
	if($form_state['stage'] != 'fourthPage' and !isset($form_state['saved_values']['fourthPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'fourthPage' and $form_state['saved_values']['fourthPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Submit Data</div>";	
	
	$form['#prefix'] .= '</div>';
	
	/******************************************
	END of status bar code
	*******************************************/
    
    if (!isset($form_state['saved_values']['Hellopage']['primaryAuthor']) or !isset($form_state['saved_values']['Hellopage']['organization'])){
  	$and = db_and();
	$and->condition('value', $user->mail);
	$and->condition('type_id', '50268');
	$contact_id = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('contact_id'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$contact_id = $contact_id['contact_id'];
        $name = db_select('chado.contact', 'contact')
	    ->fields('contact', array('name'))
	    ->condition('contact_id', $contact_id)
	    ->execute()
	    ->fetchAssoc();
	$name = $name['name'];
	$form_state['saved_values']['Hellopage']['primaryAuthor'] = $name;
	$and = db_and();
	$and->condition('contact_id', $contact_id);
	$and->condition('type_id', '72');
	$org = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('value'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$org = $org['value'];
	$form_state['saved_values']['Hellopage']['organization'] = $org;
	//dpm($contact_id);
	//dpm($name);
	//dpm($org);
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        case 'summarypage':
            summary_create_form($form, $form_state);
            break;
        
        default:
            dpm('Invalid form stage.', 'error');
            break;
    }
    
    $suffix = '
        <script>
        jQuery(document).ready(function(){
            jQuery(\'[data-toggle="tooltip"]\').tooltip();   
        });
        </script>';
    
    if (isset($form['#suffix'])){
        $form['#suffix'] .= $suffix;
    }
    else {
        $form['#suffix'] = $suffix;
    }
    
    drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
    
    return $form;
}

function tpps_master_validate(&$form, &$form_state){
    
    if ($form_state['triggering_element']['#value'] == 'Back' or $form_state['triggering_element']['#value'] == 'Save'){
        
        if ($form_state['stage'] == 'thirdPage'){
            if ($form_state['saved_values']['Hellopage']['organism']['number'] == '1' or $form_state['values']['tree-accession']['check'] == '0'){
                if (($file = file_load($form_state['values']['tree-accession']['file'])) and $form_state['values']['tree-accession']['file'] != 0){
                    file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                }
                
                $form_state['values']['tree-accession']['file-columns'] = array();
                
                foreach ($form['tree-accession']['file']['columns'] as $col => $val){
                    if (isset($form['tree-accession']['file']['columns'][$col]['#value']) and $col[0] != '#'){
                        $form_state['values']['tree-accession']['file-columns'][$col] = $form['tree-accession']['file']['columns'][$col]['#value'];
                    }
                }
            }
            else {
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    if (($file = file_load($form_state['values']['tree-accession']["species-$i"]['file'])) and $form_state['values']['tree-accession']["species-$i"]['file'] != 0){
                        file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                    }
                    
                    $form_state['values']['tree-accession']["species-$i"]['file-columns'] = array();
                    
                    if (isset($form['tree-accession']["species-$i"]['file']['#value']['columns'])){
                        foreach ($form['tree-accession']["species-$i"]['file']['#value']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']['tree-accession']["species-$i"]['file-columns'][$col] = $form['tree-accession']["species-$i"]['file']['#value']['columns'][$col];
                            }
                        }
                    }
                }
            }
        }
        elseif ($form_state['stage'] == 'fourthPage'){
            if (isset($form['organism-1']['genotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    
                    if ($form_state['values']["organism-$i"]['genotype']['marker-type']['Other'] != '0' or $form_state['values']["organism-$i"]['genotype']['marker-type']['SSRs/cpSSRs'] != '0'){
                        if (($file = file_load($form_state['values']["organism-$i"]['genotype']['file'])) and $form_state['values']["organism-$i"]['genotype']['file'] != 0){
                            file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                        }
                        
                        $form_state['values']["organism-$i"]['genotype']['file-columns'] = array();
                        
                        if (isset($form["organism-$i"]['genotype']['file']['#value']['columns'])){
                            foreach ($form["organism-$i"]['genotype']['file']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['genotype']['file-columns'][$col] = $form["organism-$i"]['genotype']['file']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                    if ($form_state['values']["organism-$i"]['genotype']['ref-genome'] == 'manual'){
//                        if (($file = file_load($form_state['values']["organism-$i"]['genotype']['assembly-user'])) and $form_state['values']["organism-$i"]['genotype']['assembly-user'] != 0){
//                            file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
//                        }
//                        
//                        $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'] = array();
//                        
//                        if (isset($form["organism-$i"]['genotype']['assembly-user']['#value']['columns'])){
//                            foreach ($form["organism-$i"]['genotype']['assembly-user']['#value']['columns'] as $col => $val){
//                                if ($col[0] != '#'){
//                                    $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'][$col] = $form["organism-$i"]['genotype']['assembly-user']['#value']['columns'][$col];
//                                }
//                            }
//                        }
                    }
                }
            }
            
            if (isset($form['organism-1']['phenotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    if (($file = file_load($form_state['values']["organism-$i"]['phenotype']['file'])) and $form_state['values']["organism-$i"]['phenotype']['file'] != 0){
                        file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                    }
                    
                    $form_state['values']["organism-$i"]['phenotype']['file-columns'] = array();
                    
                    if (isset($form["organism-$i"]['phenotype']['file']['#value']['columns'])){
                        foreach ($form["organism-$i"]['phenotype']['file']['#value']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']["organism-$i"]['phenotype']['file-columns'][$col] = $form["organism-$i"]['phenotype']['file']['#value']['columns'][$col];
                            }
                        }
                    }
                    
                    if ($form_state['values']["organism-$i"]['phenotype']['check'] != '0'){
                        if (($file = file_load($form_state['values']["organism-$i"]['phenotype']['metadata'])) and $form_state['values']["organism-$i"]['phenotype']['metadata'] != 0){
                            file_usage_add($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
                        }
                        
                        $form_state['values']["organism-$i"]['phenotype']['metadata-columns'] = array();
                        
                        if (isset($form["organism-$i"]['phenotype']['metadata']['#value']['columns'])){
                            foreach ($form["organism-$i"]['phenotype']['metadata']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['phenotype']['metadata-columns'][$col] = $form["organism-$i"]['phenotype']['metadata']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        default:
            break;
    }
    
    if (!form_get_errors()){
        $form_state['values']['#cleared'] = TRUE;
        //dpm($form_state['values']['#cleared']);
    }
    else {
        $form_state['values']['#cleared'] = FALSE;
    }
}

function tpps_master_submit($form, &$form_state){
    
    global $user;
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    $persist = TRUE;
    
    if ($form_state['triggering_element']['#value'] == 'Save'){
        dpm('Your information has been saved!');
        
        if (isset($form_state['saved_values']['form_build_id'])){
            $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
        }
        $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
        $form_state['rebuild'] = TRUE;
        
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
        return;
    }
    
    switch ($form_state['stage']){
        case 'frontpage':
            $persist = FALSE;
            $form_state['stage'] = 'Hellopage';
            break;
        
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'fourthPage';
            }
            break;
            
        case 'fourthPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'thirdPage';
            }
            else{
                $form_state['stage'] = 'summarypage';
            }
            break;
            
        case 'summarypage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'fourthPage';
            }
            else{
                variable_del('tpps_incomplete_' . $user->mail . $form_state['accession']);
                $form_state['status'] = 'Pending Approval';
                variable_set('tpps_complete_' . $user->mail . $form_state['accession'], $form_state);
                tpps_submit_email($form, $form_state);
                //drupal_goto('<front>');
                return;
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
    
    if ($persist){
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
    }
}

function tpps_submit_email($form, $form_state){
    
    global $user;
    global $base_url;
    $admin = variable_get('tpps_admin_email', "treegenesdb@gmail.com");
    
    $params = array();
    
    $to = $user->mail;
    $from = variable_get('site_mail', '');
    $params['subject'] = "TPPS Submission Received: {$form_state['saved_values']['Hellopage']['publication']['title']}";
    
    $study_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    $data_options = array(
      '- Select -',
      'Genotype x Phenotype',
      'Genotype',
      'Genotype x Phenotype x Environment',
      'Phenotype x Environment',
      'Genotype x Environment'
    );
    
    $params['author'] = $form_state['saved_values']['Hellopage']['primaryAuthor'];
    $params['org'] = $form_state['saved_values']['Hellopage']['organization'];
    $params['title'] = $form_state['saved_values']['Hellopage']['publication']['title'];
    $params['journal'] = $form_state['saved_values']['Hellopage']['publication']['journal'];
    $params['organisms'] = $form_state['saved_values']['Hellopage']['organism'];
    $params['study_type'] = $study_options[$form_state['saved_values']['secondPage']['studyType']];
    $params['data_type'] = $data_options[$form_state['saved_values']['secondPage']['dataType']];
    $params['accession'] = $form_state['accession'];
    $params['base_url'] = $base_url;
    $params['body'] = '';
    
    $params['headers'][] = 'MIME-Version: 1.0';
    $params['headers'][] = 'Content-type: text/html; charset=iso-8859-1';
    
    drupal_mail('tpps', 'user_recieved', $to, user_preferred_language($user), $params, $from, TRUE);
    
    $params['user_mail'] = $user->mail;
    
    drupal_mail('tpps', 'admin_recieved', $admin, user_preferred_language($user), $params, $from, TRUE);
    
    return;
}

function submit_all(&$form_state){
    
    $memory_limit = ini_get('memory_limit');
    if (preg_match('/^(\d+)(.)$/', $memory_limit, $matches)) {
        if ($matches[2] == 'G') {
            $memory_limit = $matches[1] * 1024 * 1024 * 1024;
        } else if ($matches[2] == 'M') {
            $memory_limit = $matches[1] * 1024 * 1024;
        } else if ($matches[2] == 'K') {
            $memory_limit = $matches[1] * 1024; 
        }
    }
    
    $dbxref_id = $form_state['dbxref_id'];
    $accession = $form_state['accession'];

    $values = $form_state['saved_values'];
    $firstpage = $values['Hellopage'];
    $file_rank = 0;

    $project_id = tpps_create_record('project', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));

    $project_dbxref_id = tpps_create_record('project_dbxref', array(
      'project_id' => $project_id,
      'dbxref_id' => $dbxref_id
    ));

    $primary_author_id = tpps_create_record('contact', array(
      'name' => $firstpage['primaryAuthor'],
      'type_id' => '71',
    ));

    $author_string = $firstpage['primaryAuthor'];
    $secondary_author_ids = array();
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){

        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $secondary_author_ids[] = tpps_create_record('contact', array(
              'name' => $firstpage['publication']['secondaryAuthors'][$i],
              'type_id' => '71'
            ));
            $author_string .= "; {$firstpage['publication']['secondaryAuthors'][$i]}";
        }
    }
    elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0){
        $secondary_author_file = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($firstpage['publication']['secondaryAuthors']['file'])->uri),
          'rank' => $file_rank
        ));
        
        $file = file_load($firstpage['publication']['secondaryAuthors']['file']);
        $location = drupal_realpath($file->uri);
        $content = parse_xlsx($location);
        $column_vals = $firstpage['publication']['secondaryAuthors']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '1'){
                $first_name = $col;
            }
            if ($val == '2'){
                $last_name = $col;
            }
            if ($val == '3'){
                $middle_initial = $col;
            }
        }
        
        for ($i = 0; $i < count($content) - 1; $i++){
            $secondary_author_ids[] = tpps_create_record('contact', array(
              'name' => "{$content[$i][$last_name]}, {$content[$i][$first_name]} {$content[$i][$middle_initial]}",
              'type_id' => '71'
            ));
            $author_string .= "; {$content[$i][$last_name]}, {$content[$i][$first_name]} {$content[$i][$middle_initial]}";
        }
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        $file_rank++;
    }
    
    $publication_id = tpps_create_record('pub', array(
      'title' => $firstpage['publication']['title'],
      'series_name' => $firstpage['publication']['journal'],
      'type_id' => '229',
      'pyear' => $firstpage['publication']['year'],
      'uniquename' => "$author_string {$firstpage['publication']['title']}. {$firstpage['publication']['journal']}; {$firstpage['publication']['year']}"
    ));

    $project_pub_id = tpps_create_record('project_pub', array(
      'project_id' => $project_id,
      'pub_id' => $publication_id
    ));

    $organization_id = tpps_create_record('contact', array(
      'name' => $firstpage['organization'],
      'type_id' => '72',
    ));

    $names = explode(" ", $firstpage['primaryAuthor']);
    $first_name = $names[0];
    $last_name = implode(" ", array_slice($names, 1));

    $pubauthor_ids = array();
    $pubauthor_ids[] = tpps_create_record('pubauthor', array(
      'pub_id' => $publication_id,
      'rank' => '0',
      'surname' => $last_name,
      'givennames' => $first_name
    ));
    
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){
        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $names = explode(" ", $firstpage['publication']['secondaryAuthors'][$i]);
            $first_name = $names[0];
            $last_name = implode(" ", array_slice($names, 1));
            $pubauthor_ids[] = tpps_create_record('pubauthor', array(
              'pub_id' => $publication_id,
              'rank' => "$i",
              'surname' => $last_name,
              'givennames' => $first_name
            ));
        }
    }
    elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0){
        
        $file = file_load($firstpage['publication']['secondaryAuthors']['file']);
        $location = drupal_realpath($file->uri);
        $content = parse_xlsx($location);
        $column_vals = $firstpage['publication']['secondaryAuthors']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '1'){
                $first_name = $col;
            }
            if ($val == '2'){
                $last_name = $col;
            }
            if ($val == '3'){
                $middle_initial = $col;
            }
        }
        
        for ($i = 0; $i < count($content) - 1; $i++){
            $rank = $i + 1;
            $pubauthor_ids[] = tpps_create_record('pubauthor', array(
              'pub_id' => $publication_id,
              'rank' => "$rank",
              'surname' => $content[$i][$last_name],
              'givennames' => $content[$i][$first_name] . " " . $content[$i][$middle_initial]
            ));
        }
    }

    $organism_ids = array();
    $project_organism_ids = array();
    $organism_number = $firstpage['organism']['number'];
    
    $landing_page_species = "";
    for ($i = 1; $i <= $organism_number; $i++){
        $landing_page_species .= $firstpage['organism'][$i] . ", ";
        $parts = explode(" ", $firstpage['organism'][$i]);
        $genus = $parts[0];
        $species = implode(" ", array_slice($parts, 1));
        if (isset($parts[2]) and ($parts[2] == 'var.' or $parts[2] == 'subsp.')){
            $infra = implode(" ", array_slice($parts, 2));
        }
        else {
            $infra = NULL;
        }
        $organism_ids[$i] = tpps_create_record('organism', array(
          'genus' => $genus,
          'species' => $species,
          'infraspecific_name' => $infra
        ));
        $project_organism_ids[$i] = tpps_create_record('project_organism', array(
          'organism_id' => $organism_ids[$i],
          'project_id' => $project_id,
        ));
    }
    $landing_page_species = substr($landing_page_species, 0, -2);
    /***************************
     * Second Page submissions *
     ***************************/

    $secondpage = $values['secondPage'];

    $start = $secondpage['StartingDate']['month'] . " " . $secondpage['StartingDate']['year'];
    $end = $secondpage['EndingDate']['month'] . " " . $secondpage['EndingDate']['year'];

    $start_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '127996',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $start
    ));
    
    $end_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '127997',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $end
    ));
    
    if ($secondpage['studyLocation']['type'] !== '2'){
        $standard_coordinate = tpps_standard_coord($secondpage['studyLocation']['coordinates']);
        $standard_coordinate = explode(',', $standard_coordinate);
        $latitude = $standard_coordinate[0];
        $longitude = $standard_coordinate[1];
        
        $study_location_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '54718',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $latitude
        ));
        
        $study_location_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '54717',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $longitude
        ));
    }
    else{
        $location = $secondpage['studyLocation']['custom'];
        
        $study_location_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '127998',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $location
        ));
    }
    
    $datatype_options = array(
      '0' => '- Select -',
      '1' => 'Genotype x Phenotype',
      '2' => 'Genotype',
      '3' => 'Genotype x Phenotype x Environment',
      '4' => 'Phenotype x Environment',
      '5' => 'Genotype x Environment'
    );
    
    $datatype = $datatype_options[$secondpage['dataType']];
    
    $datatype_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '54740',
      'value' => $datatype
    ));
    
    $studytype_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    
    $study_type = $studytype_options[$secondpage['studyType']];
    
    $study_type_id = tpps_create_record('projectprop', array(
      'project_id' => $project_id,
      'type_id' => '128021',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
      'value' => $study_type
    ));
    
    /******************************************
     * Specific Questions based on study type *
     ******************************************/
    
    switch($secondpage['studyType']){
        case ('1'):
            $natural_population = $secondpage['naturalPopulation'];
            $number_assessions = $natural_population['assessions'];
            $seasons = "";
            foreach ($natural_population['season'] as $key => $item){
                if ($item != '0'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            break;
        case ('2'):
            $growth_chamber = $secondpage['growthChamber'];
            $co2 = $growth_chamber['co2Control'];
            $humidity = $growth_chamber['humidityControl'];
            $light = $growth_chamber['lightControl'];
            $temp_high = $growth_chamber['temp']['high'];
            $temp_low = $growth_chamber['temp']['low'];
            $rooting = $growth_chamber['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($co2['option'] == '1'){
                $co2_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $co2_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['controlled']
                ));
            }
            else{
                $co2_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $co2_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['uncontrolled']
                ));
            }

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $humidity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['uncontrolled']
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $light_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['uncontrolled']
                ));
            }

            $temp_high_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $ph_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['uncontrolled']
                ));
            }

            $treatment_ids = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('3'):
            $greenhouse = $secondpage['greenhouse'];
            $humidity = $greenhouse['humidityControl'];
            $light = $greenhouse['lightControl'];
            $temp_high = $greenhouse['temp']['high'];
            $temp_low = $greenhouse['temp']['low'];
            $rooting = $greenhouse['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $temp_high_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('4'):
            $commonGarden = $secondpage['commonGarden'];
            $salinity = $commonGarden['salinity'];
            $biotic_env = $commonGarden['bioticEnv']['option'];
            $seasons = "";
            $treatments = $commonGarden['treatment'];

            $irrigation_options = array(
              0 => '- Select -',
              1 => 'Irrigation from top',
              2 => 'Irrigation from bottom',
              3 => 'Drip Irrigation',
              4 => 'Other',
              5 => 'No Irrigation',
            );
            $irrigation_type = $irrigation_options[$commonGarden['irrigation']['option']];
            if ($irrigation_type == 'Other'){
                $irrigation_type = $commonGarden['irrigation']['other'];
            }
            
            $irrigation_type_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128016',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $irrigation_type
            ));

            if ($salinity['option'] == '1'){
                $salinity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $salinity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['controlled']
                ));
            }
            else{
                $salinity_control_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $salinity_value_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['uncontrolled']
                ));
            }

            $biotic_env['Other'] = $commonGarden['bioticEnv']['other'];
            $biotic_env_id = array();
            foreach ($biotic_env as $key => $check){
                if ($check == '1'){
                    $biotic_env_id[$key] = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128019',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $key
                    ));
                }
            }

            foreach ($commonGarden['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            $season_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('5'):
            $plantation = $secondpage['plantation'];
            $number_assessions = $plantation['assessions'];
            $seasons = "";
            $treatments = $plantation['treatment'];
            
            foreach ($plantation['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            
            if ($plantation['treatment']['check'] != 0){
                $treatment_id = array();
                $is_description = FALSE;
                $rank = 0;
                foreach ($treatments as $item){
                    if (!$is_description){
                        if ($item == '1'){
                            $record_next = TRUE;
                        }
                        else{
                            $record_next = FALSE;
                        }
                        $is_description = TRUE;
                    }
                    else{
                        if ($record_next){
                            array_push($treatment_ids, tpps_create_record('projectprop', array(
                              'project_id' => $project_id,
                              'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $item,
                              'rank' => $rank
                            )));
                            $rank++;
                        }
                        $is_description = FALSE;
                    }
                }
            }
            break;
        default:
            break;
    }
    /**************************
     * Third Page submissions *
     **************************/
    
    $thirdpage = $values['thirdPage'];
    $fourthpage = $values['fourthPage'];
    $stock_ids = array();
    $stockprop_ids = array();
    
    if ($organism_number == '1' or $thirdpage['tree-accession']['check'] == 0){
        //single file
        $tree_accession_id = tpps_create_record('projectprop', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($thirdpage['tree-accession']['file'])->uri),
          'rank' => $file_rank
        ));
        
        $file = file_load($thirdpage['tree-accession']['file']);
        $location = drupal_realpath($file->uri);
        $content = parse_xlsx($location);
        $column_vals = $thirdpage['tree-accession']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '4'){
                $lat_name = $col;
            }
            if ($val == '1'){
                $id_col_accession_name = $col;
            }
            if ($val == '5'){
                $long_name = $col;
            }
            if ($val == '2'){
                $country_col_name = $col;
            }
            if ($val == '3'){
                $state_col_name = $col;
            }
            if ($val == '8'){
                $county_col_name = $col;
            }
            if ($val == '9'){
                $district_col_name = $col;
            }
        }
        
        if ($organism_number == '1'){
            //only one species
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_ids[$tree_id] = tpps_create_record('stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $organism_ids[1],
                ));
            }
        }
        else {
            //multiple species in one tree accession file -> users must define species and genus columns
            
            //get genus column
            foreach ($column_vals as $col => $val){
                if ($val == '6'){
                    $genus_col_name = $col;
                }
                if ($val == '7'){
                    $species_col_name = $col;
                }
                if ($val == '10'){
                    $org_col_name = $col;
                }
            }
            
            //parse file
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                for ($j = 1; $j <= $organism_number; $j++){
                    //match genus and species to genus and species given on page 1
                    if ($firstpage['organism'][$j] == "{$content[$i][$genus_col_name]} {$content[$i][$species_col_name]}" or $firstpage['organism'][$j] == "{$content[$i][$org_col_name]}"){
                        //obtain organism id from matching species
                        $id = $organism_ids[$j];
                        break;
                    }
                }
                
                //create record with the new id
                $stock_ids[$tree_id] = tpps_create_record('stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $id,
                ));
            }
        }
        
        if (isset($lat_name) and isset($long_name)){
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_id = $stock_ids[$tree_id];
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '54718',
                  'value' => $content[$i][$lat_name]
                ));
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '54717',
                  'value' => $content[$i][$long_name]
                ));
            }
        }
        else {
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_id = $stock_ids[$tree_id];
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '128162',
                  'value' => $content[$i][$country_col_name]
                ));
                
                $stockprop_ids[] = tpps_create_record('stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '128947',
                  'value' => $content[$i][$state_col_name]
                ));
                
                if (isset($county_col_name)){
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128946',
                      'value' => $content[$i][$county_col_name]
                    ));
                }
                
                if (isset($district_col_name)){
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128945',
                      'value' => $content[$i][$district_col_name]
                    ));
                }
            }
        }
        
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        $file_rank++;
    }
    else {
        //multiple files, sorted by species
        for($i = 1; $i <= $organism_number; $i++){
            $tree_accession_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => drupal_realpath(file_load($thirdpage['tree-accession']["species-$i"]['file'])->uri),
              'rank' => $file_rank
            ));
            
            $file = file_load($thirdpage['tree-accession']["species-$i"]['file']);
            $location = drupal_realpath($file->uri);
            $content = parse_xlsx($location);
            $column_vals = $thirdpage['tree-accession']["species-$i"]['file-columns'];

            foreach ($column_vals as $col => $val){
                if ($val == '4'){
                    $lat_name = $col;
                }
                if ($val == '1'){
                    $id_col_accession_name = $col;
                }
                if ($val == '5'){
                    $long_name = $col;
                }
                if ($val == '2'){
                    $country_col_name = $col;
                }
                if ($val == '3'){
                    $state_col_name = $col;
                }
                if ($val == '8'){
                    $county_col_name = $col;
                }
                if ($val == '9'){
                    $district_col_name = $col;
                }
            }

            for ($j = 0; $j < count($content) - 1; $j++){
                $tree_id = $content[$j][$id_col_accession_name];
                $stock_ids[$tree_id] = tpps_create_record('stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $organism_ids[$i],
                ));
                
                if (isset($lat_name) and isset($long_name)){
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_ids[$tree_id],
                      'type_id' => '54718',
                      'value' => $content[$j][$lat_name]
                    ));

                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_ids[$tree_id],
                      'type_id' => '54717',
                      'value' => $content[$j][$long_name]
                    ));
                }
                else {
                    
                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128162',
                      'value' => $content[$j][$country_col_name]
                    ));

                    $stockprop_ids[] = tpps_create_record('stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128947',
                      'value' => $content[$j][$state_col_name]
                    ));

                    if (isset($county_col_name)){
                        $stockprop_ids[] = tpps_create_record('stockprop', array(
                          'stock_id' => $stock_id,
                          'type_id' => '128946',
                          'value' => $content[$j][$county_col_name]
                        ));
                    }

                    if (isset($district_col_name)){
                        $stockprop_ids[] = tpps_create_record('stockprop', array(
                          'stock_id' => $stock_id,
                          'type_id' => '128945',
                          'value' => $content[$j][$district_col_name]
                        ));
                    }
                }
            }

            $file->status = FILE_STATUS_PERMANENT;
            $file = file_save($file);
            $file_rank++;
        }
    }
    
    $project_stock_ids = array();
    foreach ($stock_ids as $tree_id => $stock_id){
        $project_stock_ids[] = tpps_create_record('project_stock', array(
          'stock_id' => $stock_id,
          'project_id' => $project_id
        ));
    }
    
    $form_state['file_rank'] = $file_rank;
    
    /***************************
     * Fourth Page submissions *
     ***************************/
    
    for ($i = 1; $i <= $organism_number; $i++){
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $ref_genome = $fourthpage["organism-$i"]['genotype']['ref-genome'];
            
            if ($ref_genome === 'url' or $ref_genome === 'manual' or $ref_genome === 'manual2'){
                //create job for tripal fasta importer
                $class = 'FASTAImporter';
                tripal_load_include_importer_class($class);

                $fasta = $fourthpage["organism-$i"]['genotype']['tripal_fasta'];

                $file_upload = isset($fasta['file']['file_upload']) ? trim($fasta['file']['file_upload']) : 0;
                $file_existing = isset($fasta['file']['file_upload_existing']) ? trim($fasta['file']['file_upload_existing']) : 0;
                $file_remote = isset($fasta['file']['file_remote']) ? trim($fasta['file']['file_remote']) : 0;
                $analysis_id = $fasta['analysis_id'];
                $seqtype = $fasta['seqtype'];
                $organism_id = $organism_ids[$i];
                $re_accession = $fasta['db']['re_accession'];
                $db_id = $fasta['db']['db_id'];

                $run_args = array(
                  'importer_class' => $class,
                  'file_remote' => $file_remote,
                  'analysis_id' => $analysis_id,
                  'seqtype' => $seqtype,
                  'organism_id' => $organism_id,
                  'method' => '2',
                  'match_type' => '0',
                  're_name' => '',
                  're_uname' => '',
                  're_accession' => $re_accession,
                  'db_id' => $db_id,
                  'rel_type' => '',
                  're_subject' => '',
                  'parent_type' => '',
                );

                $file_details = array();

                if ($file_existing){
                    $file_details['fid'] = $file_existing;
                }
                elseif ($file_upload){
                    $file_details['fid'] = $file_upload;
                }
                elseif ($file_remote){
                    $file_details['file_remote'] = $file_remote;
                }

                try {
                    $importer = new $class();
                    $form = array();
                    $importer->formSubmit($form, $form_state);

                    $importer->create($run_args, $file_details);

                    $importer->submitJob();

                } catch (Exception $ex) {
                    drupal_set_message('Cannot submit import: ' . $ex->getMessage(), 'error');
                }
            }
        }
    }
    
    //for simplicity and efficiency, all fourth page submissions take place in the TPPS File Parsing Tripal Job
}

function tpps_refresh_landing_page(){
    
    $and = db_and()
        ->condition('schemaname', 'chado')
        ->condition('tablename', 'plusgeno_view')
        ->condition('indexname', 'tpps_cron');
    
    $query = db_select('pg_indexes', 'i')
        ->fields('i')
        ->condition($and)
        ->execute();
    
    $result = $query->fetchAssoc();
    
    if (!$result){
        db_query('create unique index tpps_cron on chado.plusgeno_view (project_id)');
    }
    
    db_query('refresh materialized view concurrently chado.plusgeno_view');
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function _species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function _phenotype_autocomplete($string){
    $matches = array();
    
    $result = db_select('chado.phenotype', 'phenotype')
        ->fields('phenotype', array('name'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _attribute_autocomplete($string){
    $matches = array();
    
    $attributes = db_select('chado.phenotype', 'p')
        ->distinct()
        ->fields('p', array('attr_id'));
    
    $and = db_and()
        ->condition('c.cvterm_id', $attributes, 'IN')
        ->condition('c.name', db_like($string) . '%', 'LIKE');
    
    $result = db_select('chado.cvterm', 'c')
        ->fields('c', array('name'))
        ->condition($and)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _units_autocomplete($string){
    $matches = array();
    
    $and = db_and()
        ->condition('type_id', '2842')
        ->condition('value', db_like($string) . '%', 'LIKE');
    
    $result = db_select('chado.phenotypeprop', 'p')
        ->distinct()
        ->fields('p', array('value'))
        ->condition($and)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->value] = check_plain($row->value);
    }
    
    drupal_json_output($matches);
}

function _structure_autocomplete($string){
    $matches = array();
    
    $structures = db_select('chado.phenotype', 'p')
        ->distinct()
        ->fields('p', array('observable_id'));
    
    $and = db_and()
        ->condition('c.cvterm_id', $structures, 'IN')
        ->condition('c.name', db_like($string) . '%', 'LIKE');
    
    $result = db_select('chado.cvterm', 'c')
        ->fields('c', array('name', 'definition'))
        ->condition($and)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name . ': ' . $row->definition);
    }
    
    drupal_json_output($matches);
}

function parse_xlsx($location){
    
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = drupal_realpath("public://tpps_xlsx");
    
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;

    foreach ($xlrows as $xlrow) {
        $arr = array();
        
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if (!isset($headers)) {
            $headers = $arr;
            $content['headers'] = $headers;
        } 
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content[] = $row;
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function tpps_content_no_header(&$content){
    $top_row = $content['headers'];
    $headers = array();
    for ($i = 0; $i < count($content['headers']); $i++){
        $headers[$i] = $i;
    }
    $other_rows = array_slice($content, 1);

    foreach ($other_rows as $row_num => $row){
        $new_row = array();
        for ($i = 0; $i < count($row); $i++){
            $new_row[$i] = $row[$top_row[$i]];
        }
        $other_rows[$row_num] = $new_row;
    }
    array_unshift($other_rows, $top_row);

    $content = $other_rows;
    $content['headers'] = $headers;
}

function front_create_form(&$form, $form_state){
    
    global $base_url;
    global $user;
    
    if (isset($user->mail)){
        //logged in
        $options_arr = array();
        $options_arr['new'] = 'Create new TPPS Submission';
        
        $results = db_select("public.variable", "variable")
            ->fields('variable', array('name'))
            ->condition('name', db_like('tpps_incomplete_' . $user->mail) . '%', 'LIKE')
            ->execute();
        
        foreach ($results as $item){
            $name = $item->name;
            $state = variable_get($name, NULL);
            
            if ($state != NULL and isset($state['saved_values']['Hellopage']['publication']['title'])){
                $title = ($state['saved_values']['Hellopage']['publication']['title'] != NULL) ? $state['saved_values']['Hellopage']['publication']['title'] : "No Title";
                $tgdr_id = $state['accession'];
                $options_arr["$tgdr_id"] = "$title";
            }
            else {
                if (isset($state) and !isset($state['saved_values']['Hellopage'])){
                    variable_del($name);
                    $and = db_and()
                        ->condition('accession', $state['accession'])
                        ->condition('db_id', 95);
                    $results = db_delete('chado.dbxref')
                        ->condition($and)
                        ->execute();
                }
            }
        }
        
        if (count($options_arr) > 1){
            //has submissions
            $form['accession'] = array(
              '#type' => 'select',
              '#title' => t('Would you like to load an old TPPS submission, or create a new one?'),
              '#options' => $options_arr,
              '#default_value' => isset($form_state['saved_values']['frontpage']['accession']) ? $form_state['saved_values']['frontpage']['accession'] : 'new',
            );
        }
    }
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Continue to TPPS'),
    );
    
    $prefix_text = 
"<div>
Welcome to TPPS!<br><br>
The Tripal PopGen Submit (TPPS) workflow provides researchers with a streamlined submission interface for studies resulting from any combination of genotype, phenotype, and environmental data for georeferenced forest trees.  TPPS will guide users through questions about their study design and data in order to collect information on trees, genotypes, and phenotypes if applicable.  Phenotypic, genotypic, and environmental descriptors will be mapped to ontologies where possible and the collected metadata will enable this information to be displayed in <a href='$base_url/cartogratree' target='blank'>CartograTree</a>.  An accession number will be provided to the user following successful completion that uniquely identifies this study in the database.  This number should be used in the manuscript describing this work.  Specific flat-files and metadata associated with this identifier can be accessed by the public with this information.<br><br>
To get started, you will need to have a few things handy:<br>
<ul>
    <li>An enabled and approved TreeGenes account - you can create one <a href='$base_url/user/register'>here</a>. There may be a waiting period to have your account approved by a TreeGenes administrator.</li>
    <li>Information about the paper connected to your study, and the organisms being studied. This must include at least the following:
        <ul>
            <li>Primary author of the publication</li>
            <li>Organization of the Primary Author</li>
            <li>Publication year</li>
            <li>Publication title</li>
            <li>Publication abstract</li>
            <li>Journal the publication can be found in</li>
            <li>Genus and species of the organism(s) being studied</li>
        </ul>
    </li>
    <li>Metadata about the study itself. This must include at least the following:
        <ul>
            <li>Dates when the study took place (month, year)</li>
            <li>The location of the study (coordinates or country/region)</li>
            <li>Type of study (natural population, growth chamber, common garden, etc.)</li>
            <li>Type of data collected (some combination of genotype, phenotype, and environmental)</li>
            <li>Relevant quantitative information based on the type of study, such as the seasons of a natural population study, or the soil pH of a growth chamber study</li>
        </ul>
    </li>
    <li>Geographic locations of the trees (for common garden studies, this would be the location of the source tree). This should be a spreadsheet with a column for tree identifiers and column(s) for the location of each tree.</li>
    <li>Genotypic and/or phenotypic data and metadata (depending on the type(s) of data collected).</li>
</ul>
If you would like to submit your data, you can click the button 'Continue to TPPS' below!<br><br>
</div>";
    
    if (isset($form['accession'])){
        $form['accession']['#prefix'] = $prefix_text;
    }
    else {
        $form['Next']['#prefix'] = $prefix_text;
    }
    
    return $form;
}

function summary_create_form(&$form, $form_state){
    
    $form['Back'] = array(
      '#type' => 'submit',
      '#value' => t('Back'),
    );
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
    
    return $form;
}

function tpps_admin_settings($form, &$form_state){
    
    $authors = variable_get('tpps_author_files_dir', 'tpps_authors');
    $accession = variable_get('tpps_accession_files_dir', 'tpps_accession');
    $genotype = variable_get('tpps_genotype_files_dir', 'tpps_genotype');
    $phenotype = variable_get('tpps_phenotype_files_dir', 'tpps_phenotype');
    
    $form['tpps_admin_email'] = array(
      '#type' => 'textfield',
      '#title' => t('TPPS Admin Email Address'),
      '#default_value' => variable_get('tpps_admin_email', 'treegenesdb@gmail.com'),
    );
    
    $form['tpps_author_files_dir'] = array(
      '#type' => 'textfield', 
      '#title' => t('Author files:'),
      '#default_value' => $authors,
      '#description' => t("Currently points to " . drupal_realpath("public://$authors") . '.'),
      '#prefix' => t('<h1>File Upload locations</h1>' . 'All file locations are relative to the "public://" file stream. Your current "public://" file stream points to "' . drupal_realpath('public://') . '".<br><br>')
    );
    
    $form['tpps_accession_files_dir'] = array(
      '#type' => 'textfield', 
      '#title' => t('Tree Accession files:'),
      '#default_value' => $accession,
      '#description' => t("Currently points to " . drupal_realpath("public://$accession") . '.')
    );
    
    $form['tpps_genotype_files_dir'] = array(
      '#type' => 'textfield', 
      '#title' => t('Genotype files:'),
      '#default_value' => $genotype,
      '#description' => t("Currently points to " . drupal_realpath("public://$genotype") . '.')
    );
    
    $form['tpps_phenotype_files_dir'] = array(
      '#type' => 'textfield',
      '#title' => t('Phenotype files:'),
      '#default_value' => $phenotype,
      '#description' => t("Currently points to " . drupal_realpath("public://$phenotype") . '.')
    );
    
    return system_settings_form($form);
}

function tpps_admin_settings_validate($form, &$form_state){
    foreach ($form_state['values'] as $key => $value){
        if (substr($key, -10) == '_files_dir'){
            $location = "public://$value";
            if (!file_prepare_directory($location, FILE_CREATE_DIRECTORY)){
                form_set_error("$key", "Error: path must be valid and current user must have permissions to access that path.");
            }
        }
        elseif ($key == 'tpps_admin_email'){
            if (!valid_email_address($value)){
                form_set_error("$key", "Error: please enter a valid email address.");
            }
        }
    }
}

function tpps_admin_panel($form, &$form_state){
    
    global $user;
    $params = drupal_get_query_parameters();
    $accession = $params['accession'];
    
    if (!isset($user->roles[3]) or $user->roles[3] !== 'administrator'){
        drupal_access_denied();
        return $form;
    }
    else {
        $results = db_select('variable', 'v')
            ->fields('v', array('name'))
            ->condition('v.name', db_like("tpps_complete_") . '%' . db_like("$accession"), 'LIKE')
            ->execute()
            ->fetchAssoc();
        $var_name = $results['name'];
        $submission_state = variable_get($var_name);
        $display = tpps_table_display($submission_state);
        
        $form['form_table'] = array(
          '#type' => 'hidden',
          '#value' => $var_name,
          '#suffix' => $display
        );
        
        $form['approve-check'] = array(
          '#type' => 'checkbox',
          '#title' => t('This submission has been reviewed and approved.')
        );
        
        $form['reject-reason'] = array(
          '#type' => 'textarea',
          '#title' => t('Reason for rejection:'),
          '#states' => array(
            'invisible' => array(
              ':input[name="approve-check"]' => array('checked' => TRUE)
            )
          )
        );
        
        $form['REJECT'] = array(
          '#type' => 'submit',
          '#value' => t('Reject'),
          '#states' => array(
            'invisible' => array(
              ':input[name="approve-check"]' => array('checked' => TRUE)
            )
          )
        );
        
        $form['APPROVE'] = array(
          '#type' => 'submit',
          '#value' => t('Approve'),
          '#states' => array(
            'visible' => array(
              ':input[name="approve-check"]' => array('checked' => TRUE)
            )
          )
        );
        
        return $form;
    }
}

function tpps_admin_panel_validate($form, &$form_state){
    if ($form_state['submitted'] == '1'){
        if ($form_state['values']['reject-reason'] == '' and $form_state['triggering_element']['#value'] == 'Reject'){
            form_set_error('reject-reason', 'Please explain why the submission was rejected.');
        }
    }
}

function tpps_admin_panel_submit($form, &$form_state){
    
    global $base_url;

    $var_name = $form_state['values']['form_table'];
    $suffix = substr($var_name, 14);
    $to = substr($var_name, 14, -7);
    $state = variable_get($var_name);
    $params = array();

    $from = variable_get('site_mail', '');
    $params['subject'] = "TPPS Submission Rejected: {$state['saved_values']['Hellopage']['publication']['title']}";
    $params['uid'] = user_load_by_name($to)->uid;
    $params['reject-reason'] = $form_state['values']['reject-reason'];
    $params['base_url'] = $base_url;
    $params['title'] = $state['saved_values']['Hellopage']['publication']['title'];
    $params['body'] = '';

    $params['headers'][] = 'MIME-Version: 1.0';
    $params['headers'][] = 'Content-type: text/html; charset=iso-8859-1';

    if ($form_state['triggering_element']['#value'] == 'Reject'){
        
        drupal_mail('tpps', 'user_rejected', $to, user_preferred_language(user_load_by_name($to)), $params, $from, TRUE);
        variable_del($var_name);
        unset($state['status']);
        variable_set('tpps_incomplete_' . $suffix, $state);
        dpm('Submission Rejected. Message has been sent to user.');
        drupal_goto('<front>');
    }
    else{
        global $user;
        $uid = $user->uid;
        $includes = array();
        $includes[] = module_load_include('module', 'tpps');
        
        $params['subject'] = "TPPS Submission Approved: {$state['saved_values']['Hellopage']['publication']['title']}";
        $params['accession'] = $state['accession'];
        
        $state['status'] = 'Approved';
        variable_set($var_name, $state);
        submit_all($state);
        $args = array($state);
        $jid = tripal_add_job("TPPS File Parsing - {$state['accession']}", 'tpps', 'tpps_file_parsing', $args, $uid, 10, $includes, TRUE);
        $state['job_id'] = $jid;
        
        dpm('Submission Approved! Message has been sent to user.');
        drupal_mail('tpps', 'user_approved', $to, user_preferred_language(user_load_by_name($to)), $params, $from, TRUE);
    }
}

function tpps_file_parsing($form_state){
    
    $fourthpage = $form_state['saved_values']['fourthPage'];
    $firstpage = $form_state['saved_values']['Hellopage'];
    $organism_number = $firstpage['organism']['number'];
    $organism_ids = array();
    $file_rank = $form_state['file_rank'];
    
    $project_id = tpps_create_record('project', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));
    
    for ($i = 1; $i <= $organism_number; $i++){
        $parts = explode(" ", $firstpage['organism'][$i]);
        $genus = $parts[0];
        $species = implode(" ", array_slice($parts, 1));

        if (isset($parts[2]) and ($parts[2] == 'var.' or $parts[2] == 'subsp.')){
            $infra = implode(" ", array_slice($parts, 2));
        }
        else {
            $infra = NULL;
        }

        $organism_ids[$i] = tpps_create_record('organism', array(
          'genus' => $genus,
          'species' => $species,
          'infraspecific_name' => $infra
        ));
        
        if (isset($fourthpage["organism-$i"]['phenotype'])){
            $phenotype = $fourthpage["organism-$i"]['phenotype'];
            $phenotype_number = $phenotype['number'];
            $phenotype_ids = array();
            $phenotypeprop_ids = array();
            $phenotypes_meta = array();
            
            $phenotype_file_id = tpps_create_record('projectprop', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($phenotype['file'])->uri),
              'rank' => $file_rank
            ));
            $phenotype_file = file_load($phenotype['file']);
            $file_rank++;
            
            for ($j = 1; $j <= $phenotype_number; $j++){
                $name = strtolower($phenotype['phenotypes-meta'][$j]['name']);
                $phenotypes_meta[$name] = array();
                $phenotypes_meta[$name]['attr'] = $phenotype['phenotypes-meta'][$j]['attribute'];
                $phenotypes_meta[$name]['desc'] = $phenotype['phenotypes-meta'][$j]['description'];
                $phenotypes_meta[$name]['unit'] = $phenotype['phenotypes-meta'][$j]['units'];
                if ($phenotype['phenotypes-meta'][$j]['struct-check'] == '1'){
                    $phenotypes_meta[$name]['struct'] = $phenotype['phenotypes-meta'][$j]['structure'];
                }
                if ($phenotype['phenotypes-meta'][$j]['val-check'] == '1'){
                    $phenotypes_meta[$name]['min'] = $phenotype['phenotypes-meta'][$j]['min'];
                    $phenotypes_meta[$name]['max'] = $phenotype['phenotypes-meta'][$j]['max'];
                }
            }
            
            if ($phenotype['check'] == '1'){
                $phenotype_meta_file_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($phenotype['metadata'])->uri),
                  'rank' => $file_rank
                ));
                $file = file_load($phenotype['metadata']);
                $location = drupal_realpath($file->uri);
                $content = parse_xlsx($location);
                $groups = $phenotype['metadata-groups'];
                $column_vals = $phenotype['metadata-columns'];
                
                $phenotype_name = $groups['Phenotype Id']['1'];
                $phenotype_attr = $groups['Attribute']['2'];
                $phenotype_desc = $groups['Description']['3'];
                $phenotype_unit = $groups['Units']['4'];
                
                foreach ($column_vals as $col => $val){
                    if ($val == '5'){
                        $phenotype_struct = $col;
                    }
                    if ($val == '6'){
                        $phenotype_min = $col;
                    }
                    if ($val == '7'){
                        $phenotype_max = $col;
                    }
                }
                
                for ($j = 0; $j < count($content) - 1; $j++){
                    $name = strtolower($content[$j][$phenotype_name]);
                    $phenotypes_meta[$name] = array();
                    $phenotypes_meta[$name]['attr'] = $content[$j][$phenotype_attr];
                    $phenotypes_meta[$name]['desc'] = $content[$j][$phenotype_desc];
                    $phenotypes_meta[$name]['unit'] = $content[$j][$phenotype_unit];
                    if (isset($phenotype_struct) and isset($content[$j][$phenotype_struct]) and $content[$j][$phenotype_struct] != ''){
                        $phenotypes_meta[$name]['struct'] = $content[$j][$phenotype_struct];
                    }
                    if (isset($phenotype_min) and isset($content[$j][$phenotype_min]) and $content[$j][$phenotype_min] != ''){
                        $phenotypes_meta[$name]['min'] = $content[$j][$phenotype_min];
                    }
                    if (isset($phenotype_max) and isset($content[$j][$phenotype_max]) and $content[$j][$phenotype_max] != ''){
                        $phenotypes_meta[$name]['max'] = $content[$j][$phenotype_max];
                    }
                }
                
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
                $file_rank++;
            }
            
            $location = drupal_realpath($phenotype_file->uri);
            $content = parse_xlsx($location);
            $groups = $phenotype['file-groups'];
            
            $tree_id_col = $groups['Tree Identifier']['1'];
            $phenotype_name = $groups['Phenotype Name/Identifier']['2'];
            $phenotype_val = $groups['Phenotype Value(s)']['3'];
            
            for ($j = 0; $j < count($content) - 1; $j++){
                $name = strtolower($content[$j][$phenotype_name]);
                $value = $content[$j][$phenotype_val];
                $stock_unique = $content[$j][$tree_id_col];
                
                $attr = db_select('chado.cvterm', 'c')
                    ->fields('c', array('cvterm_id'))
                    ->condition('c.name', db_like($phenotypes_meta[$name]['attr']), 'LIKE')
                    ->execute()
                    ->fetchAssoc();
                $attr_id = $attr['cvterm_id'];
                if (!isset($attr_id) or $attr_id == ''){
                    $attr_id = tpps_custom_cvterm($phenotypes_meta[$name]['attr'], '');
                }
                
                if (isset($phenotypes_meta[$name]['struct'])){
                    $obs = db_select('chado.cvterm', 'c')
                        ->fields('c', array('cvterm_id'))
                        ->condition('c.name', db_like($phenotypes_meta[$name]['struct']), 'LIKE')
                        ->execute()
                        ->fetchAssoc();
                    $observable_id = $obs['cvterm_id'];

                    if (!isset($observable_id) or $observable_id == ''){
                        $observable_id = tpps_custom_cvterm($phenotypes_meta[$name]['struct'], '');
                    }
                }
                else {
                    $observable_id = NULL;
                }
                
                $phenotype_ids[] = tpps_create_record('phenotype', array(
                  'uniquename' => "$stock_unique-$name-$j",
                  'name' => $name,
                  'attr_id' => $attr_id,
                  'observable_id' => $observable_id,
                  'value' => $value
                ));
                
                $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                  'phenotype_id' => end($phenotype_ids),
                  'type_id' => '2871',
                  'value' => $phenotypes_meta[$name]['desc']
                ));
                
                $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                  'phenotype_id' => end($phenotype_ids),
                  'type_id' => '2883',
                  'value' => $phenotypes_meta[$name]['unit']
                ));
                
                if (isset($phenotypes_meta[$name]['min'])){
                    $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                      'phenotype_id' => end($phenotype_ids),
                      'type_id' => '52214',
                      'value' => $phenotypes_meta[$name]['min']
                    ));
                }
                
                if (isset($phenotypes_meta[$name]['max'])){
                    $phenotypeprop_ids[] = tpps_create_record('phenotypeprop', array(
                      'phenotype_id' => end($phenotype_ids),
                      'type_id' => '52213',
                      'value' => $phenotypes_meta[$name]['max']
                    ));
                }
            }
            
            $phenotype_file->status = FILE_STATUS_PERMANENT;
            $phenotype_file = file_save($phenotype_file);
        }
        
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $genotype = $fourthpage["organism-$i"]['genotype'];
            $genotype_count = 0;
            
            if ($genotype['ref-genome'] == 'bio'){
                
                $bioproject_id = tpps_create_record('dbxref', array(
                  'db_id' => '176',
                  'accession' => $genotype['BioProject-id']
                ));
                
                $project_dbxref_id = tpps_create_record('project_dbxref', array(
                  'project_id' => $project_id,
                  'dbxref_id' => $bioproject_id,
                ));
                
                $bioproject_assembly_file_ids = array();
                foreach ($genotype['assembly-auto'] as $key => $val){
                    if ($val == '1'){
                        array_push($bioproject_assembly_file_ids, tpps_create_record('projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '2836',
                          'value' => "https://www.ncbi.nlm.nih.gov/nuccore/$key",
                          'rank' => $file_rank
                        )));
                        $file_rank++;
                    }
                }
            }
            elseif ($genotype['ref-genome'] == 'manual' or $genotype['ref-genome'] == 'manual2' or $genotype['ref-genome'] == 'url'){
                if ($genotype['tripal_fasta']['file_upload']){
                    //uploaded new file
                    $assembly_user = $genotype['tripal_fasta']['file_upload'];
                    $assembly_user_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => file_create_url(file_load($assembly_user)->uri),
                      'rank' => $file_rank
                    ));
                    $file = file_load($assembly_user);
                    $file->status = FILE_STATUS_PERMANENT;
                    $file = file_save($file);
                    $file_rank++;
                }
                if ($genotype['tripal_fasta']['file_upload_existing']){
                    //uploaded existing file
                    $assembly_user = $genotype['tripal_fasta']['file_upload_existing'];
                    $assembly_user_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => file_create_url(file_load($assembly_user)->uri),
                      'rank' => $file_rank
                    ));
                    $file = file_load($assembly_user);
                    $file->status = FILE_STATUS_PERMANENT;
                    $file = file_save($file);
                    $file_rank++;
                }
                if ($genotype['tripal_fasta']['file_remote']){
                    //provided url to file
                    $assembly_user = $genotype['tripal_fasta']['file_remote'];
                    $assembly_user_id = tpps_create_record('projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => $assembly_user,
                      'rank' => $file_rank
                    ));
                    $file_rank++;
                }
            }
            elseif ($genotype['ref-genome'] != 'none') {
                $reference_genome_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '1912',
                  'value' => $genotype['ref-genome']
                ));
            }
            
            if ($genotype['file-type']['Genotype Assay']){
                $genotype_file_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['file'])->uri),
                  'rank' => $file_rank
                ));
                //process genotype assay
                
                
                $file = file_load($genotype['file']);
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
                $file_rank++;
            }

            if ($genotype['file-type']['Assay Design'] and $genotype['marker-type']['SNPs']){
                $genotype_file_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['assay-design'])->uri),
                  'rank' => $file_rank
                ));
                $file = file_load($genotype['assay-design']);
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
                $file_rank++;
            }

            if ($genotype['file-type']['VCF']){
                $genotype_vcf_id = tpps_create_record('projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['vcf'])->uri),
                  'rank' => $file_rank
                ));
                $file_rank++;

                $current_id = $organism_ids[$i];
                $and = db_and()
                    ->condition('type_id', '52307')
                    ->condition('organism_id', "$current_id");
                $species_code = db_select('chado.organismprop', 'o')
                    ->fields('o', array('value'))
                    ->condition($and)
                    ->execute()
                    ->fetchAssoc();
                $species_code = $species_code['value'];
                $marker = 'SNP';

                $vcf_file = file_load($genotype['vcf']);
                $location = drupal_realpath($vcf_file->uri);
                $vcf_content = fopen($location, 'r');

                //inserts are WAY faster when done as a group
                $genotype_vals = array();
                $genotypeprop_vals = array();
                $format = "";
                $first = TRUE;

                //dpm('start: ' . date('r'));
                while (($vcf_line = fgets($vcf_content)) !== FALSE){
                    if ($vcf_line[0] != '#'){
                        $genotype_count++;
                        $vcf_line = explode("\t", $vcf_line);
                        $scaffold_id = &$vcf_line[0];
                        $position = &$vcf_line[1];
                        $ref = &$vcf_line[3];
                        $alt = &$vcf_line[4];
                        $qual = &$vcf_line[5];
                        $filter = &$vcf_line[6];
                        $info = &$vcf_line[7];

                        $description = "$ref:$alt";
                        
                        //Tripal Job has issues when all submissions are made at the same time, so break them up into groups of 10,000 genotypes along with their relevant genotypeprops
                        if ($genotype_count > 10000){
                            $genotype_count = 0;
                            tpps_create_record('genotype', $genotype_vals);
                            $genotype_vals = array();
                            tpps_create_record('genotypeprop', $genotypeprop_vals);
                            $genotypeprop_vals = array();
                        }

                        $genotype_vals[] = array(
                          'name' => "$marker-$species_code-$scaffold_id-$position",
                          'uniquename' => "$marker-$species_code-$scaffold_id-$position-$description",
                          'description' => $description,
                          'type_id' => '1205'
                        );

                        if ($first){
                            $first = FALSE;
                            $genotype_id = tpps_create_record('genotype', $genotype_vals[0]);
                            $genotype_vals = array();
                        }

                        if ($format != ""){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '52197',
                              'value' => $format,
                            );
                        }

                        //quality score
                        $genotypeprop_vals[] = array(
                          'genotype_id' => $genotype_id,
                          'type_id' => '2079',
                          'value' => $qual
                        );

                        //filter: pass/fail
                        $genotypeprop_vals[] = array(
                          'genotype_id' => $genotype_id,
                          'type_id' => '52008',
                          'value' => ($filter == '.') ? "P" : "NP"
                        );

                        //break up info column
                        $info_vals = explode(";", $info);
                        foreach($info_vals as $key => $val){
                            $parts = explode("=", $val);
                            unset($info_vals[$key]);
                            $info_vals[$parts[0]] = isset($parts[1]) ? $parts[1] : '';
                        }

                        //allele frequency, assuming that the info code for allele frequency is 'AF'
                        if (isset($info_vals['AF']) and $info_vals['AF'] != ''){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '2496',
                              'value' => $info_vals['AF']
                            );
                        }

                        //depth coverage, assuming that the info code for depth coverage is 'DP'
                        if (isset($info_vals['DP']) and $info_vals['DP'] != ''){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '52046',
                              'value' => $info_vals['DP']
                            );
                        }

                        //number of samples, assuming that the info code for number of samples is 'NS'
                        if (isset($info_vals['NS']) and $info_vals['NS'] != ''){
                            $genotypeprop_vals[] = array(
                              'genotype_id' => $genotype_id,
                              'type_id' => '128971',
                              'value' => $info_vals['NS']
                            );
                        }
                        $genotype_id++;
                    }
                    elseif (preg_match('/##FORMAT=/', $vcf_line)) {
                        $format .= substr($vcf_line, 9, -1);
                    }
                }
                //insert the last set of values
                tpps_create_record('genotype', $genotype_vals);
                tpps_create_record('genotypeprop', $genotypeprop_vals);
                unset($genotype_vals);
                unset($genotypeprop_vals);
                //dpm('done: ' . date('r'));
                $vcf_file->status = FILE_STATUS_PERMANENT;
                $vcf_file = file_save($vcf_file);
            }
        }
    }
    
    return;
}

function tpps_test_page($form, &$form_state){
    
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => 'Next',
    );
    
    return $form;
}

function tpps_test_page_validate($form, &$form_state){
    
    
    form_set_error('Next', 'error');
//    for ($i = 0; $i < 2000; $i++){
//        $file = file_load($i);
//        if ($file){
//            //dpm($i);
//            //dpm($file->uri);
//            if (preg_match('/tpps/', $file->filename)){
//                dpm($i);
//                dpm($file->filename);
//                //file_delete($file);
//            }
//        }
//    }
    
}

function tpps_test_page_submit($form, &$form_state) {
    
}

function tpps_block_info() { 
  //dpm("BLOCK INFO");   
  $blocks['tpps_status'] = array(
    // info: The name of the block.
    'info' => t('TPPS Status'),
  );

  return $blocks;
}

/***********************
This was supposed to be the function to display the block
But as usual with Drupal, things work and things just don't
work.
***********************/
function ttps_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  //dpm("TPPS Block executed");
  //$block = array();
  
  /*
  switch ($delta) {
    case 'tpps_status':
      // Create your block content here
		$block['subject'] = t('My last 3 news');
		$block['content'] = t('This is the content');
		
		break;
   }
  return $block;]
  */
}

function tpps_block_view_alter(&$data, $block) {
    //dpm($block);
    //dpm($data);
    global $base_url;
    switch ($block->delta) {
        case 'tpps_status':
            //dpm($_REQUEST);

            $css = "
            .tgdr_status_block img {
                    vertical-align: middle;
                    margin-bottom: 4px;
                    margin-right: 2px;
            }		
            ";
            drupal_add_css($css, 'inline');

            $data['subject'] = t('TPPS Status');
            $content = "<div class='tgdr_status_block'>";
            global $user;
            if (isset($_REQUEST['accession'])){
                $accession = $_REQUEST['accession'];
                $form_state = variable_get('tpps_incomplete_' . $user->mail . $accession);
            }
            else {
                $content .= '</div>';
                $data['content'] = t($content);
                break;
            }
            $ok = "<img src='$base_url/misc/message-16-ok.png'>";
            $flat = tpps_flatten($form_state);
            
            foreach ($flat as $item => $val){
                if ($item[0] !== '#'){
                    $item_str = filter_xss(check_plain($item));
                    $val_str = filter_xss(check_plain($val));
                    if (preg_match('/File/', $item) and ($file_name = file_load($val)->filename)){
                        //create links to files
                        $file_url = check_plain(file_create_url(file_load($val)->uri));
                        $val_str = "<a href='$file_url' target='blank'>$file_name</a>";
                    }
                    elseif (preg_match('/Month/', $item)){
                        //skip experiment start/end month
                        continue;
                    }
                    elseif (preg_match('/^(.*)Year/', $item, $matches)){
                        //combine experiment start/end month + year
                        if (isset($flat[$matches[1] . 'Month'])){
                            $item_str = $matches[1] . 'Date';
                            $val_str = "{$flat[$matches[1] . 'Month']} $val_str";
                        }
                        else {
                            continue;
                        }
                    }
                    elseif (preg_match('/Study Location/', $item) and isset($flat['#location_type']) and $flat['#location_type']){
                        //add map capability to location
                        if ($flat['#location_type'] == '2'){
                            $query = $val_str;
                        }
                        elseif ($flat['#location_type'] != '2' and ($standard = tpps_standard_coord($val_str))){
                            $query = $standard;
                        }
                        $val_str = "<a id=\"sidebar_map\" style=\"cursor:pointer\">$val_str</a>";
                        if (isset($query)){
                            $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=AIzaSyDkeQ6KN6HEBxrIoiSCrCHFhIbipycqouY&z=5\\\" allowfullscreen> </iframe></div>";
                            $js = "jQuery(document).ready(function ($) {
                                jQuery(\"#sidebar_map\").click(function() {
                                    jQuery(\"#sidebar_map_wrapper\").remove();
                                    jQuery(\"#sidebar_map\").after( \"<br><div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                                });
                            });";
                            drupal_add_js($js, 'inline');
                        }
                    }
                    $content .= "$ok $item_str: $val_str <br />";
                }
                elseif (preg_match('/#page_(.)_cleared/', $item, $matches)){
                    //break between pages
                    if ($val){
                        $step_arr = array(
                          1 => 'Author and Species Information',
                          2 => 'Experimental Conditions',
                          3 => 'Tree Accession',
                          4 => 'Submit Data'
                        );
                        if ($matches[1] > 1){
                            $content .= '<br />';
                        }
                        $content .= "$ok Step {$matches[1]} - Complete<br />{$step_arr[$matches[1]]}<br /><hr />";
                    }
                    else {
                        //if page not cleared, do not display remaining form state data
                        break;
                    }
                }
            }
            
            $content .= "</div>";
            $data['content'] = t($content);

            break;
        default:
            break;
    }
}
