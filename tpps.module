<?php

/**
 * @file
 * Core of the TPPS module.
 */

define("TPPS_MAJOR_VERSION", 1);
define("TPPS_MINOR_VERSION", 2);
define('TPPS_JS_PATH', '/js/tpps.js');
define('TPPS_CSS_PATH', '/css/tpps.css');
define('TPPS_PAGE_1', 1);
define('TPPS_PAGE_2', 2);
define('TPPS_PAGE_3', 3);
define('TPPS_PAGE_4', 4);
define('RESET_CACHE', TRUE);

define("TPPS_TEMP_XLSX", "temporary://tpps_xlsx");
define("TPPS_TEMP_ZIP", "temporary://tpps_zip");
define("TPPS_OLS_BASE", "http://www.ebi.ac.uk/ols/api/");
// Custom cache bin is used to allow to clear only modules cached data
// instead of whole cache clearing which could cause longer server
// response while cache is warming up.
define('TPPS_CACHE_BIN', 'cache_tpps');
// To avoid duplication we just get this path at the very beginning.
define('TPPS_MODULE_PATH', drupal_get_path('module', 'tpps'));
define('TPPS_IMAGES_PATH', TPPS_MODULE_PATH . '/images/');
define('TPPS_AJAX_URL', 'ajax/tpps');

// Page3. Accession file columns.
define('TPPS_COLUMN_PLANT_IDENTIFIER', 1);
define('TPPS_COLUMN_COUNTRY', 2);
define('TPPS_COLUMN_STATE', 3);
define('TPPS_COLUMN_LATITUDE', 4);
define('TPPS_COLUMN_LONGITUDE', 5);
define('TPPS_COLUMN_GENUS', 6);
define('TPPS_COLUMN_SPECIES', 7);
define('TPPS_COLUMN_COUNTY', 8);
define('TPPS_COLUMN_DISTRICT', 9);
define('TPPS_COLUMN_GENUS_AND_SPECIES', 10);
define('TPPS_COLUMN_SOURCE_PLANT_IDENTIFIER', 11);
define('TPPS_COLUMN_POPULATION_GROUP', 12);
define('TPPS_COLUMN_CLONE_NUMBER', 13);

// Submission Statuses.
define('TPPS_SUBMISSION_STATUS_INCOMPLETE', 'Incomplete');
define('TPPS_SUBMISSION_STATUS_PENDING_APPROVAL', 'Pending Approval');
define('TPPS_SUBMISSION_STATUS_APPROVED', 'Approved');
define('TPPS_SUBMISSION_STATUS_SUBMISSION_JOB_RUNNING', 'Submission Job Running');
// Special statuses:
define(
  'TPPS_SUBMISSION_STATUS_APPROVED_DELAYED',
  'Approved - Delayed Submission Release'
);

// Values of the 'Define Experimental Design' field.
define('TPPS_GENOTYPING_DESIGN_GBS', 1);
define('TPPS_GENOTYPING_DESIGN_TARGETED_CAPTURE', 2);
define('TPPS_GENOTYPING_DESIGN_WHOLE_GENOME_RESEQUENCING', 3);
define('TPPS_GENOTYPING_DESIGN_RNA_SEQ', 4);
define('TPPS_GENOTYPING_DESIGN_GENOTYPING_ARRAY', 5);

// Values of the 'GBS Type' field.
define('TPPS_GBS_TYPE_RADSEQ', 1);
define('TPPS_GBS_TYPE_DDRAD_SEQ', 2);
define('TPPS_GBS_TYPE_NEXTRAD', 3);
define('TPPS_GBS_TYPE_RAPTURE', 4);
define('TPPS_GBS_TYPE_OTHER', 5);

// Values of the 'Genotyping Type' field.
define('TPPS_GENOTYPING_TYPE_GENOTYPING_ASSAY', 'Genotyping Assay');
define('TPPS_GENOTYPING_TYPE_GENOTYPING', 'Genotyping');

// Values of the 'Genotyping file type' field.
define(
  'TPPS_GENOTYPING_FILE_TYPE_SNP_ASSAY_FILE_AND_ASSAY_DESIGN_FILE',
  'SNP Assay file and Assay design file'
);
define('TPPS_GENOTYPING_FILE_TYPE_VCF', 'VCF');

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Page 2. Field "Data Types" options.
// See tpps_form_get_data_type_options().
define('TPPS_DATA_TYPE_GENOTYPE', 'Genotype');
define('TPPS_DATA_TYPE_PHENOTYPE', 'Phenotype');
define('TPPS_DATA_TYPE_ENVIRONMENT', 'Environment');
define('TPPS_DATA_TYPE_G_P', 'Genotype x Phenotype');
define('TPPS_DATA_TYPE_G_E', 'Genotype x Environment');
define('TPPS_DATA_TYPE_P_E', 'Phenotype x Environment');
define('TPPS_DATA_TYPE_G_P_E', 'Genotype x Phenotype x Environment');

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Page 2. Field "Experimental Design" options.
// See tpps_form_get_experimental_design_options().
//
// Natural Population (Landscape).
define('TPPS_EXP_DESIGN_NATURAL_POPULATION', 1);
// Growth Chamber.
define('TPPS_EXP_DESIGN_GROWTH_CHAMBER', 2);
// Greenhouse.
define('TPPS_EXP_DESIGN_GREENHOUSE', 3);
// Experimental/Common Garden.
define('TPPS_EXP_DESIGN_EXPERIMENTAL', 4);
// Plantation.
define('TPPS_EXP_DESIGN_PLANTATION', 5);

module_load_include('inc', 'tpps', 'includes/common');

// WARNING:
// Must be called after common.inc was loaded.
// Always enabled on dev-server and could be enabled on live-site.
if (!is_live_site() || variable_get('tpps_debug_mode', FALSE)) {
  ini_set('display_errors', 1);
  ini_set('display_startup_errors', 1);
  error_reporting(E_ALL);
}

module_load_include('inc', 'tpps', 'includes/array');
require_once 'includes/display.inc';
require_once 'includes/chado_utils.inc';
require_once 'includes/init_project.inc';
require_once 'includes/standard_coord.inc';
require_once 'includes/file_utils.inc';
require_once 'includes/submit_email.inc';
require_once 'includes/accession_coordinates.inc';
module_load_include('inc', 'tpps', 'includes/submissions');
require_once 'includes/zenodo.inc';
require_once 'includes/match_trees.inc';
require_once 'includes/ncbi_utils.inc';
// All steps helper functions.
module_load_include('inc', 'tpps', 'includes/form');
module_load_include('inc', 'tpps', 'includes/form_utils');
module_load_include('inc', 'tpps', 'includes/details');
module_load_include('inc', 'tpps', 'includes/cvterm_utils');
// [VS]
module_load_include('inc', 'tpps', 'includes/submission_file');
require_once 'includes/phenotype_synonym.inc';
require_once 'includes/phenotype_unit.inc';
require_once 'includes/easy_report.inc';
// [/VS]
require_once 'api/tpps.api.inc';
require_once 'includes/easy_report.inc';

/**
 * Implements hook_menu().
 */
function tpps_menu() {
  $items['admin/config/content/tppsc'] = [
    'title' => 'TPPSC Settings',
    'description' => 'Configuration for TPPSC module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_admin_settings'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_NORMAL_ITEM,
    'file path' => drupal_get_path('module', 'tpps'),
    'file' => 'admin/config.php',
  ];
  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  // VCF Files Pre Validation AJAX-callbacks.
  foreach (['tpps', 'tppsc'] as $form_type) {
    // Dynamically generated paths: 'tpps', 'tppsc'.
    $items[$form_type] = [
      'title' => ($form_type == 'tppsc'
        ? 'Internal TPPS pipeline' : 'Tripal Plant PopGen Submit'),
      'page callback' => 'drupal_get_form',
      'page arguments' => [$form_type . '_main'],
      // TPPSc only. TPPS see below.
      'access callback' => 'tpps_access',
      'access arguments' => ['access tpps form'],
    ];
    if ($form_type == 'tpps') {
      $items[$form_type]['access arguments'] = ['access content'];
      unset($items[$form_type]['access callback']);
    }
    // Dynamically generated paths: 'tpps/%', 'tppsc/%'.
    $items[$form_type . '/%'] = [
      'title' => ($form_type == 'tppsc'
        ? 'Internal TPPS pipeline' : 'Tripal Plant PopGen Submit'),
      'page callback' => 'drupal_get_form',
      'page arguments' => [$form_type . '_main', 1],
      'access callback' => 'tpps_access',
      'access arguments' => ['access tpps form', 1],
    ];
  }
  $items['tpps/%/pre-validate'] = [
    'title' => 'TPPS File Pre-Validation',
    // File: includes/form_utils.inc.
    'page callback' => 'tpps_pre_validate_init',
    'page arguments' => [1],
    'access callback' => 'tpps_access',
    'access arguments' => ['access tpps form', 1],
    'type' => MENU_CALLBACK,
  ];
  $items['tpps/%/pre-validate/%/status'] = [
    'title' => 'TPPS File Pre-Validation',
    'page callback' => 'tpps_pre_validate_status',
    'page arguments' => [1, 3],
    'access callback' => 'tpps_access',
    'access arguments' => ['access tpps form', 1],
    'type' => MENU_CALLBACK,
  ];

  // This will return information about a study's Accession tree ids vs VCF tree ids
  // First % = accession
  // Second % = organism_index (1 or 2 or 3 etc) @TODO
  $items['tpps/%/compare-accession-file-vs-vcf-file-tree-ids'] = array(
    'title' => 'TPPS Accession VCF Tree Ids',
    'page callback' => 'tpps_compare_accession_file_vs_vcf_file_tree_ids',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  // This will return information about a study's Accession tree ids
  // First % = accession
  // Second % = organism_index (1 or 2 or 3 etc) @TODO
  $items['tpps/%/accession-file-tree-ids'] = [
    'title' => 'TPPS Accession Tree Ids',
    'page callback' => 'tpps_accession_file_tree_ids',
    'page arguments' => [1],
    'access arguments' => ['access content'],
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  ];


  // This will return information about a study's VCF tree ids
  // First % = accession
  // Second % = organism_index (1 or 2 or 3 etc) @TODO
  $items['tpps/%/vcf-tree-ids'] = array(
    'title' => 'TPPS VCF Tree Ids',
    'page callback' => 'tpps_vcf_tree_ids',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  // This will return information about a study's VCF markers
  // First % = accession
  // Second % = organism_index (1 or 2 or 3 etc) @TODO
  $items['tpps/%/vcf-markers'] = array(
    'title' => 'TPPS VCF Markers',
    'page callback' => 'tpps_vcf_markers',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  // This will return information about a study's VCF markers
  // First % = accession
  // Second % = organism_index (1 or 2 or 3 etc) @TODO
  $items['tpps/%/snps-assay-markers'] = array(
    'title' => 'TPPS SNPs Assay Markers',
    'page callback' => 'tpps_snps_assay_markers',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  // AJAX-callback. See /js/tpps_page_4_curation_tool.js.
  // First % = accession
  $items['tpps/%/assay-design-markers'] = [
    'title' => 'TPPS SNPs Design Markers',
    'page callback' => 'tpps_assay_design_markers',
    // Submission accession. Format: TGDRxxxx.
    'page arguments' => [1],
    'access arguments' => ['access content'],
    // @TODO Send secret key to restrict access.
    'type' => MENU_CALLBACK,
  ];

  // This will return information about a study's VCF markers vs
  // First % = accession
  // Second % = organism_index (1 or 2 or 3 etc) @TODO
  $items['tpps/%/compare-vcf-markers-vs-snps-assay-markers'] = array(
    'title' => 'TPPS Accession VCF Tree Ids',
    'page callback' => 'tpps_compare_vcf_markers_vs_snps_assay_markers',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  $items['tpps/%/edit-publication'] = array(
    'title' => 'TPPS Edit Publication Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_submission_edit_publication', 1),
    'access callback' => 'tpps_access',
    // @TODO Must be 'edit ... submission' permission.
    'access arguments' => array('view own tpps submission', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  $items['user/%/tpps'] = array(
    'title' => 'TPPS Submissions',
    'page callback' => 'tpps_tab_create',
    'page arguments' => array(1),
    'access callback' => 'tpps_access',
    'access arguments' => array('user tpps submissions', 1),
    'type' => MENU_LOCAL_TASK,
  );
  // @TODO Change URL to 'tpps/submission/%/delete' to be more REST API.
  // @TODO Major. Very dangerous because allows to remove without confirmation.
  // So XSS could be used to remove any study by sending link to someone who
  // has 'tpps delete submission' permission.
  $items['tpps-submission/%/delete'] = [
    'title' => 'TPPS Delete Submission',
    'type' => MENU_CALLBACK,
    'page callback' => 'tpps_submission_delete_callback',
    'page arguments' => [1],
    'access callback' => 'tpps_access',
    'access arguments' => ['tpps delete submission', 1],
  ];

  $items['completed-submission/%'] = [
    'title' => 'TPPS Completed Submission',
    'page callback' => 'tpps_completed_display',
    'page arguments' => [1],
    'access callback' => 'tpps_access',
    'access arguments' => ['view own tpps submission', 1],
    'type' => MENU_NORMAL_ITEM,
  ];

  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  // TPPS Admin Panel.
  $items['tpps-admin-panel'] = [
    'title' => 'TPPS Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_admin_panel'],
    'access callback' => 'tpps_access',
    'access arguments' => ['approve tpps submissions'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pages/admin/panel.inc',
  ];
  // @TODO Create common URL for admin tasks like this and send operation as
  // a part of URL or GET-parameter.
  $items['tpps-admin-panel/refresh-genotypes-materialized-views'] = [
    'title' => 'TPPS Refresh Genotypes Materialized Views',
    'page callback' => 'tpps_manage_generate_all_materialized_views',
    'access callback' => 'tpps_access',
    'access arguments' => ['approve tpps submissions'],
    'type' => MENU_CALLBACK,
    'file' => 'pages/admin/generate_all_materialized_views.inc',
  ];
  $items['tpps-admin-panel/%'] = [
    'title' => 'Study Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_manage_submission_form', 1],
    'access callback' => 'tpps_access',
    'access arguments' => ['approve tpps submissions'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pages/admin/study.inc',
  ];

  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  $items['tpps-admin-panel-logs/%'] = array(
    'title' => 'TPPS Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_panel_logs', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('approve tpps submissions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/logs.php',
  );

  // @TODO Minor. Rename menu item. It's a report but not diagnostics.
  // Page shows study's files.
  $items['tpps-admin-panel/file-diagnostics/%'] = [
    'title' => 'Study File Diagnostics',
    'page callback' => 'tpps_admin_files_diagnostics_page',
    'page arguments' => [2],
    'access callback' => 'tpps_access',
    'access arguments' => ['administer tpps module'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/pages.php',
  ];

  $items['tpps/doi/%'] = [
    'title' => 'TPPS DOI',
    'page callback' => 'tpps_manage_doi',
    'page arguments' => [2],
    'access callback' => 'tpps_access',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/manage_doi.inc',
  ];



  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  $items['tpps/autocomplete/%'] = [
    'title' => 'TPPS Autocomplete',
    'description' => 'Autocomplete functions for TPPS module',
    'page callback' => 'tpps_autocomplete',
    'page arguments' => [2],
    'access callback' => 'tpps_access',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ajax/tpps_ajax.php',
  ];
  /*
   * Ajax Callback for accession coordinates.
   */
  $items['tpps-accession'] = array(
    'title' => 'TPPS Accession coordinates',
    'page callback' => 'tpps_accession_coordinates',
    'access callback' => 'tpps_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // AJAX callback called from page generated by tpps_table_display().
  $items['tpps-preview-file'] = [
    'title' => 'TPPS Preview File',
    'page callback' => 'tpps_preview_file',
    'access callback' => 'tpps_access',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['tpps-tag'] = array(
    'title' => 'TPPS Submission Tags',
    'page callback' => 'tpps_submission_tag_manage',
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps-tag/create'] = array(
    'title' => 'Create new TPPS Submission Tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_submission_tag_create'),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['tpps-tag/edit/%'] = array(
    'title' => 'TPPS Edit Tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_submission_tag_edit', 2),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps-tag/%/%/%'] = array(
    'title' => 'TPPS Add/Remove Tag',
    'page callback' => 'tpps_submission_add_remove_tag',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_CALLBACK,
  );

  // [VS].
  tpps_menu_add_detials_pages($items);
  tpps_menu_add_settings_pages($items);
  tpps_menu_add_report_pages($items);
  tpps_menu_add_submission_pages($items);
  tpps_menu_add_api($items);
  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  $items[TPPS_AJAX_URL . '/%'] = [
    // Use POST to send data and GET to just get data.
    'page callback' => 'tpps_ajax_callback',
    'page arguments' => [2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    //'delivery callback' => 'ajax_deliver',
    'file' => 'tpps.ajax.inc',
  ];
  // [/VS].
  $items = array_merge($items, tpps_api_paths());
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Defines custom TPPS permissions.
 *
 * @TODO Minor. Implement new permissions.
 *   'view any submission'
 *   'edit own/any submission'
 */
function tpps_permission() {
  return [
    'access tpps form' => [
      'title' => t('Access TPPS Form'),
      'description' => t('Access TPPS Submission form and create submissions.'),
    ],
    'access tpps details' => [
      'title' => t('Access TPPS Details'),
      'description' => t('Access TPPS Complete Submissions Details page.'),
    ],
    'administer tpps module' => [
      'title' => t('Administer TPPS module'),
      'description' => t('Make changes to TPPS configuration.'),
    ],
    'user tpps submissions' => [
      'title' => t('User TPPS Submissions'),
      'description' => t('View all TPPS Submissions for a particular user.'),
    ],
    'approve tpps submissions' => [
      'title' => t('Approve/Reject TPPS submissions'),
      'description' => t('Approve or reject pending TPPS submissions.'),
    ],
    'tpps delete submission' => [
      'title' => t('Delete TPPS submissions'),
      'description' => t('Delete incomplete TPPS submissions.'),
    ],
    'view own tpps submission' => [
      'title' => t('View own TPPS submissions'),
      'description' => t('View TPPS submissions as a particular user.'),
    ],
  ];
}

/**
 * Access-callback. Checks if current user could access requested page.
 *
 * @return bool
 *   Returns TRUE when user granted access and FALSE otherwise.
 */
function tpps_access() {
  global $user;
  // Drupal Superuser.
  if ($user->uid == 1) {
    return TRUE;
  }

  // User's permissions.
  $args = func_get_args();
  $permission = $args[0] ?? NULL;
  if (gettype($permission) != 'string' || !user_access($permission)) {
    return FALSE;
  }

  // Special case. Study accession, owner and status.
  switch ($permission) {
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    case 'access tpps form':
      $accession = $args[1] ?? NULL;
      if (empty($accession) || $accession == 'new') {
        return TRUE;
      }
      $submission = new Submission($accession);
      if ($submission->doesNotExist()) {
        // Study has no record in tpps_submission table.
        return FALSE;
      }
      if ($submission->isTppsc()) {
        return TRUE;
      }
      else {
        // TPPS Form.
        if (
          $submission->status == TPPS_SUBMISSION_STATUS_INCOMPLETE
          && $submission->isCreator()
        ) {
          return TRUE;
        }
      }
      return FALSE;

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    case 'user tpps submissions':
      $uid = $args[1] ?? NULL;
      return (!empty($uid) && $uid == $user->uid);

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    case 'view own tpps submission':
      $accession = $args[1] ?? NULL;
      // Allow admins to access any study.
      if (user_access('administer tpps module', $user)) {
        return TRUE;
      }
      // Check if user submitted this study.
      $submission = new Submission($accession);
      return (bool) (
        $submission->status != TPPS_SUBMISSION_STATUS_INCOMPLETE
        && $submission->isCreator()
      );

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    case 'tpps delete submission':
      $accession = $args[1] ?? NULL;
      $submission = new Submission($accession);
      return (bool) (
        $submission->status == TPPS_SUBMISSION_STATUS_INCOMPLETE
        && $submission->isCreator()
      );

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    default:
      // @todo Minor. Check if this is safe. Better to deny access by default.
      return TRUE;
  }
}

/**
 * Implements hook_cronapi().
 */
function tpps_cronapi() {
  // @todo Minor. Rename variables to have 'tpps_cron_' prefix.
  // Use hook_update() to preserver existing values from DB.
  // Update admin/cron.inc.
  $filepath = drupal_get_path('module', 'tpps') . '/includes';

  // TPPS Jobs Slack Updates.
  $rule = variable_get(
    'tpps_latest_job_status_slack_updates_job_frequency',
    // Every 15 minutes.
    '*/15 * * * *'
  );
  $items['tpps_latest_job_status_slack_updates'] = [
    'title' => t('TPPS Jobs Slack Updates'),
    'callback' => 'tpps_cron_latest_job_status_slack_updates',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [$rule],
      ],
    ],
    'file' => 'cron.inc',
    'file path' => $filepath,
  ];

  // Refresh TPPS and CartograPlant views.
  $rule = variable_get(
    'tpps_refresh_views_job_frequency',
    // Every 12h full hour.
    '0 */12 * * *'
  );
  $items['tpps_refresh_views'] = [
    'title' => t('Refresh TPPS and CartograPlant views'),
    'callback' => 'tpps_cron_refresh_views',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [$rule],
      ],
    ],
    'file' => 'cron.inc',
    'file path' => $filepath,
  ];

  // Refresh TPPS PlusGeno View (TPPS directory listing).
  $rule = variable_get(
    'tpps_refresh_plusgeno_view_frequency',
    // Every Saturday at midnight.
    '0 0 * * SAT'
  );
  $items['tpps_refresh_plusgeno_view'] = [
    'title' => t('Refresh TPPS PlusGeno View (TPPS directory listing)'),
    'callback' => 'tpps_cron_refresh_plusgeno_view',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [$rule],
      ],
    ],
    'file' => 'cron.inc',
    'file path' => $filepath,
  ];

  // Check to see if any of the delayed TPPS submissions should be published yet.
  $rule = variable_get(
    'tpps_delayed_submissions_job_frequency',
    // Every 6 hours at full hour.
    '0 */6 * * *'
  );
  $items['tpps_delayed_submissions'] = [
    'title' => t('Check to see if any of the delayed TPPS submissions should be published yet'),
    'callback' => 'tpps_cron_delayed_submissions',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [$rule],
      ],
    ],
    'file' => 'cron.inc',
    'file path' => $filepath,
  ];

  // Recreate table "chado.tpps_ref_genomes".
  $rule = variable_get('tpps_cron_rule_ref_genomes_recreate',
    // Every 3 days at midnight.
    '0 0 */3 * *'
  );
  $items['tpps_cron_table_tpps_ref_genomes_recreate'] = [
    'title' => t('Recreate table "chado.tpps_ref_genomes".'),
    'callback' => 'tpps_cron_table_tpps_ref_genomes_recreate',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [$rule],
      ],
    ],
    'file' => 'cron.inc',
    'file path' => $filepath,
  ];

  return $items;
}

/**
 * Implements hook_mail().
 *
 * Populates emails for submission status updates.
 * Sends mail to both users and administrators when submissions
 * are completed, rejected, or approved.
 *
 * @param mixed $key
 *   The type of message to send.
 * @param array $message
 *   The skeleton of the message to be sent.
 * @param array $params
 *   The parameters for the message.
 */
function tpps_mail($key, array &$message, array $params) {
  $message['subject'] = $params['subject'] ?? $message['subject'] ?? NULL;
  if (empty($message['subject'])) {
    watchdog('tpps',
      'Email "@key" subject is empty.<pre>@message</pre><pre>@params</pre>',
      [
        '@key' => $key,
        '@message' => print_r($message, 1),
        '@params' => print_r($params, 1),
      ],
      WATCHDOG_ERROR
    );
    return;
  }
  if (!empty($params['body'])) {
    // Note: $params['body'] appends (not replaces).
    $message['body'][] = $params['body'];
  }
  $message['headers'] = array_merge($message['headers'], ($params['headers'] ?? []));
  // Prepare data for email messages.
  $params['type_label'] = $params['type_label'] ?? t('TPPS');
  $link_params = [
    'absulute' => TRUE,
    'attributes' => ['style' => 'text-decoration: underline;'],
  ];
  $site_name = variable_get('site_name', 'TreeGenes');
  $accession = check_plain($params['accession'] ?? NULL);

  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  switch ($key) {
    case 'user_recieved':
      // When the user completes their submission, just provide them with
      // a brief list of the organisms they submitted.
      // See function tpps_submit_email().
      $message['body'][] = t('Congratulations!');
      // @TODO Minor. Probably using new array's element and HTML tag BR will
      // give 2 empty lines instead of just one but some of templates had
      // exactly 2 empty lines. This could be improved later.
      $message['body'][] = '<br />';
      $message['body'][] = '<br />';
      $message['body'][] = t('Your @type_label submission has been received '
        . 'and is pending approval from a TreeGenes administrator! '
        . "Here's a brief summary of the information you provided:",
        ['@type_label' => $params['type_label']]
      );
      // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      // Build list of organism names.
      for ($i = 1; $i <= $params['organism_number']; $i++) {
        // @TODO Check if other then name information must be used?
        $organism_list[] = t('Organism @number: @name',
          [
            '@number' => $i,
            '@name' => $params['organism_list'][$i]
          ]
        );
      }
      $item_list = [
        t('Primary Author: @author', ['@author' => $params['author'] ?? NULL]),
        t('Publication title: @title', ['@title' => $params['title'] ?? NULL]),
        t('Journal: @journal', ['@journal' => $params['journal'] ?? NULL]),
        t('Number of organisms: @organism_number',
          ['@organism_number' => $params['organism_number']] ?? NULL
        ),
        t('Organisms: !list',
          ['!list' => theme('item_list', ['items' => $organism_list ?? []])]
        ),
        t('Study Type: @study_type',
          ['@study_type' => $params['study_type'] ?? NULL]
        ),
        t('Data Type: @data_type', ['@data_type' => $params['data_type'] ?? NULL]),
      ];
      $message['body'][] = theme('item_list', ['items' => $item_list]);
      // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      $message['body'][] = t('You can view your submission !link.',
        [
          '!link' => l(t('here'), 'completed-submission/' . $accession,
            $link_params
          ),
        ]
      );
      $message['body'][] = t('If you have any questions about your submission, '
        . 'please feel free to contact us !link.',
        ['!link' => l(t('here'), 'contactform', $link_params)]
      );
      break;

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    case 'admin_recieved':
      // When the user completes their submission, notify the admin, and
      // provide them with a link to access the admin panel.
      // See function tpps_submit_email().
      $message['body'][] = t('Attention:');
      $message['body'][] = '<br />';
      $message['body'][] = '<br />';
      $message['body'][] = t('User @user_mail has completed a @type_label '
        . 'Submission, titled "@title".'
        . '<br /><br />'
        . 'Click !link to manage or approve this submission.',
        [
          '@user_mail' => $params['user_mail'],
          '@type_label' => $params['type_label'],
          '@title' => $params['title'],
          '!link' => l(t('here'), 'tpps-admin-panel/' . $accession,
            $link_params
          ),
        ]
      );
      break;

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    case 'user_rejected':
      // When the user's submission is rejected, notify them, and provide
      // them with a link to go back and edit their submission. Also
      // provide them with the reason the admin included as to why their
      // submission was rejected.
      $message['body'][] = t('To whom it may concern:');
      $message['body'][] = '<br />';
      $message['body'][] = '<br />';
      $message['body'][] = t('Unfortunately, your submission to @type_label '
        . 'has been rejected. If you would like, you can log into @site_name '
        . 'website and edit your submission !link.',
        [
          '@type_label' => $params['type_label'],
          '@site_name' => t($site_name),
          '!link' => l(t('here'),
            '/user/' . check_plain($params['uid']) . '/tpps',
            $link_params
          ),
        ]
      );
      $message['body'][] = '<br />';
      $message['body'][] = t('The administrator who rejected your '
        . 'submission provided the following reason:');
      // Note: We can't translate reason's text because it's a typed-in text
      // which could be used only once.
      $message['body'][] = '<blockquote>'
        . check_plain($params['reject-reason']) . '</blockquote>';
      break;

    case 'user_approved':
      // When the user's submission is approved, notify them and provide
      // them with the link to view the completed submission.
      $message['body'][] = t('Congratulations! Your submission to '
        . '@site_name has been approved!', ['@site_name' => t($site_name)]
      );
      $message['body'][] = '<br />';
      $message['body'][] = '<br />';
      $message['body'][] = t('You may now refer to your submitted data with '
        . 'accession number @accession.', ['@accession' => $accession]
      );
      $message['body'][] = '<br />';
      $message['body'][] = t('You can still view your submission from !link.',
        [
          '!link' => l(
            t(
              'your @type_label Completed Submissions tab',
              ['@type_label' => $params['type_label']]
            ),
            'completed-submission/' . $accession,
            $link_params
          ),
        ]
      );
      $message['body'][] = '<br />';
      $message['body'][] = t('Your submission should be public on the !link '
        . 'within the next 24 hours.',
        [
          '!link' => l(
            t('@type_label/TGDR Landing Page',
              ['@type_label' => $params['type_label']]
            ),
            // @TODO Minor. Check if both links exist.
            (($params['type'] == 'tpps') ? 'tpps_details/main' : 'tpps/details'),
            $link_params
          ),
        ]
      );
      if ($params['type'] == 'tpps') {
        $message['body'][] = '<br />';
        $message['body'][] = t('To generate a DOI for your submission, '
          . 'please click !link.',
          ['!link' => l(t('here'), 'tpps/doi/' . $accession, $link_params)]
        );
      }
      break;

    default:
      break;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Adds process callback tpps_managed_file_process to managed_file elements, and
 * extends the maximum length for textfields.
 */
function tpps_element_info_alter(&$type) {
  if (isset($type['textfield']['#maxlength'])) {
    $type['textfield']['#maxlength'] = 512;
  }
  $type['managed_file']['#process'][] = 'tpps_managed_file_process';
  // Add required field validation and (optionally) field's parents and name.
  $type['managed_file']['#process'][] = 'tpps_form_field_process';
  $type['textfield']['#process'][] = 'tpps_form_field_process';
  $type['select']['#process'][] = 'tpps_form_field_process';
}

/**
 * Shows form element parents and own name.
 */
function tpps_form_field_process(array $element, array &$form_state, array $form) {
  if (!tpps_is_main_form($form_state)) {
    return $element;
  }

  // Show field's parents and name in the field's description.
  $debug_mode = variable_get('tpps_debug_mode', FALSE);
  if ($debug_mode) {
    $element['#description'] = ($element['#description'] ?? '')
      . '<br />[ ' . implode(' ][ ', $element['#array_parents']) . ' ]';
  }
  // Adds custom validation of fields required using Drupal Form States AJAX.
  // AKA 'required_when_visible' feature.
  if ($element['#required_when_visible'] ?? NULL) {
    if ($element['#states']['visible'] ?? NULL) {
      $element['#states']['required'] = $element['#states']['visible'];
      $element['#element_validate'][] = 'tpps_form_validate_required_field';
    }
  }
  return $element;
}

/**
 * Extends the managed_file element type.
 *
 * Provides options for users to define the columns in their file, as well as a
 * preview of the first 3 rows of the file.
 *
 * @param array $element
 *   The existing managed_file form element.
 * @param array $form_state
 *   The state of the form.
 * @param array $form
 *   The existing form, including the managed_file element being changed.
 *
 * @return array
 *   The extended managed_file element.
 */
function tpps_managed_file_process(array $element, array &$form_state, array $form) {
  // 'VCF' files are compressed and shouldn't have extra elements.
  $field_name = end($element['#array_parents']);
  if (in_array($field_name, ['vcf'])) {
    return $element;
  }
  if (!tpps_is_main_form($form_state) || empty($element['#value']['fid'])) {
    // Show extra fields only after file upload and
    // when it's a 'tppsc_main' or 'tpps_main' form.
    return $element;
  }
  $page = $form_state['stage'] ?? TPPS_PAGE_3;
  $parents = $element['#parents'];
  $field_name = $parents[0];
  // Note: if this include removed "no-header" fieature doesn't update
  // columns table. Better to just load this file on each request but
  // only this function requires this file. So let's just leave it here.
  require_once 'ajax/tpps_ajax.php';

  $fid = $element['#value']['fid'] ?? '';
  // Note: edit-organism-1-genotype-tripal-fasta-file-file-upload-upload
  // has no title.
  if ($fid && ($file = tpps_file_load($fid))) {
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // "Null values denoted by" AKA "empty" field.
    if (!empty($form_state['saved_values'][$page])) {
      // @TODO Remove this if possible.
      // When form wasn't yet submitted or saved then there is no value.
      $empty_field_parent = drupal_array_get_nested_value(
        $form_state['saved_values'][$page], $parents
      );
      $empty_field_default_value = $empty_field_parent[$field_name]['other'] ?? NULL;
    }
    $element['empty'] = [
      '#type' => 'textfield',
      '#title' => t('Null values denoted by:'),
      // @TODO use '#container' with '#states' for an extra elements.
      '#states' => $element['#states'] ?? NULL,
      '#description' => t('By default, TPPS will treat  '
        . 'cells with the value "NA" as empty. If you used a different empty '
        . 'value indicator, please provide it here.'),
      '#default_value' => $empty_field_default_value ?? 'NA',
      '#weight' => 200,
    ];

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // "No Header" checkbox.
    $no_header = drupal_array_get_nested_value(
      $form_state['complete form'],
      array_merge($element['#parents'], ['#value', 'no-header'])
    );
    $wrapper = substr($element['#id'], 0, -7) . '-ajax-wrapper';
    $callback = $form_state['triggering_element']['#ajax']['callback'] ?? NULL;
    if (!$no_header && ($callback != 'tpps_no_header_callback')) {
      $end = array_pop($parents);
      $parents[] = $end . '-no-header';
      $no_header = drupal_array_get_nested_value(
        $form_state['saved_values'][$form_state['stage']],
        $parents
      );
    }
    $element['no-header'] = [
      '#type' => 'select',
      '#title' => 'Does your file have a header row?',
      // Note: Non-standard keys for options was used to have backward
      // compatibility for existing studies which was submitted then this
      // field was a checkbox.
      // Mapping of the checkbox "No header row?":
      // Checked (1)- header is 1st row.
      // Unchecked (0) - 1st row is the header.
      // @TODO Minor. Add this change to the Submision Versions and change
      // keys of the options to [0, 'yes', 'no'].
      '#options' => [
        //'select' => t('- Select -'),
        0 => t('Yes'),
        1 => t('No'),
      ],

      '#ajax' => [
        'wrapper' => $wrapper,
        'callback' => 'tpps_no_header_callback',
      ],
      '#states' => $element['#states'] ?? NULL,
      '#default_value' => $no_header ?? 0,
      '#weight' => 300,
    ];
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // Columns table.
    $saved_vals = $form_state['saved_values'][$form_state['stage']];
    $element['columns']['#type'] = 'fieldset';
    $element['columns']['#title'] = t('Define Data');
    $element['columns']['#collapsible'] = TRUE;
    // Stop using the file so it can be deleted if the user clicks 'remove'.
    $accession = substr($form_state['accession'], 4);
    file_usage_delete($file, 'tpps', 'tpps_project', $accession);
    $content = tpps_parse_file($fid, 3, !empty($no_header));
    $options = $element['columns-options']['#value'] ?? [];
    $first = TRUE;
    foreach ($content['headers'] as $key => $item) {
      $item_parents = $element['#parents'];
      array_pop($item_parents);
      $item_parents[] = end($element['#parents']) . '-columns';
      $item_parents[] = $key;
      $default = drupal_array_get_nested_value($saved_vals, $item_parents);
      if (!isset($default)) {
        foreach ($options as $k => $val) {
          similar_text(strtolower($val), strtolower($item), $percent);
          if ($percent > 85) {
            $default = $k;
            break;
          }
        }
      }
      $item_title = [
        t('Select the type of data column @item holds', ['@item' => $item]),
      ];

      $element['columns'][$key] = [
        '#type' => 'select',
        '#title' => $item,
        '#options' => $options,
        '#default_value' => $default,
        '#prefix' => '<th>',
        '#suffix' => '</th>',
        '#attributes' => [
          'data-toggle' => ['tooltip'],
          'data-placement' => ['top'],
          'title' => $item_title,
        ],
      ];
      if (empty($options)) {
        // Do not show empty dropdown in header.
        unset($element['columns'][$key]['#type']);
        unset($element['columns'][$key]['#title']);
        $element['columns'][$key]['#markup'] = $item;
        unset($element['columns'][$key]['#options']);
        unset($element['columns'][$key]['#default_value']);
      }
      if ($first) {
        $first = FALSE;
        $first_col = $key;
      }
      if (!empty($no_header)) {
        $element['columns'][$key]['#title'] = '';
        $element['columns'][$key]['#attributes']['title'] = $item_title;
      }
      if ($form_state['stage'] == TPPS_PAGE_3) {
        $species_num = $element['#parents'];
        array_pop($species_num);
        $species_num = '-' . end($species_num);
        $element['columns'][$key]['#ajax'] = [
          'callback' => 'tpps_accession_pop_group',
          'wrapper' => "population-mapping$species_num",
        ];
      }
    }

    $rows = $content;
    unset($rows['headers']);
    $vars = [
      'header' => $content['headers'],
      'rows' => $rows,
      'attributes' => ['class' => ['view']],
      'caption' => '',
      'colgroups' => NULL,
      'sticky' => FALSE,
      'empty' => '',
    ];
    $table = theme('table', $vars);
    preg_match(
      '/(*UTF8)\A(.*<thead[A-Z|a-z|"|\'|-|_|0-9]*>).*(<\/thead>.*<\/table>)/us',
      $table, $matches
    );

    $element['columns'][$first_col]['#prefix'] =
      "<div style=\"overflow-x:auto\">" . $matches[1] . "<tr>"
      . $element['columns'][$first_col]['#prefix'];
    $element['columns'][$key]['#suffix'] = '</tr>' . $matches[2] . '</div>';
    $element['columns'][$key]['#suffix'] = $element['columns'][$key]['#suffix']
      . t('Please note that if you remain idle on a TPPS page with files '
      . 'for more than 6 hours, you run the risk of having those files '
      . 'reset if you do not click "Save".');
    $element['columns']['#weight'] = 100;
  }

  return $element;
}

/**
 * Implements hook_form_alter().
 *
 * Initializes $form_state['values'] and 'saved_values' to empty arrays,
 * and calls the tpps_leaves(), which populates most default values.
 */
function tpps_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form['#form_id'], ['tpps_main', 'tppsc_main'])) {
    $stage = $form_state['stage'];
    $form_state['saved_values'][$stage] = $form_state['saved_values'][$stage] ?? [];
    $form_state['values'] = $form_state['values'] ?? [];
    // Initialize default values for each of the leaves in the form tree.
    tpps_leaves($form, $form_state['values'], $form_state['saved_values'][$stage]);
  }
}

/**
 * Populates default values for most form fields.
 *
 * @param array $elements
 *   An array of the elements needing default values.
 * @param array $vals
 *   An array of form_state values.
 * @param array $saved_vals
 *   An array of form_state saved_values.
 */
function tpps_leaves(array &$elements, array $vals, array $saved_vals) {
  foreach ($elements as $key => &$element) {
    if ((gettype($key) != 'string' or $key[0] != '#') and isset($element['#type'])) {
      // If #tree is not set in the current element, and #tree is set and false
      // in the parent element, then set #tree to false in the current element.
      if (
        !isset($element['#tree'])
        // @TODO Variable names are too close. Note: $elements != $element.
        && isset($elements['#tree']) && !$elements['#tree']
      ) {
        $element['#tree'] = FALSE;
      }

      // If #tree is not set or is set to true, then populate the #parents array
      // with the parents of the parent element plus the current key. Otherwise,
      // the #parents array should just be the current key.
      if (empty($element['#parents'])) {
        if (!isset($element['#tree']) || $element['#tree']) {
          $element['#parents'] = array_merge($elements['#parents'], [$key]);
        }
        else {
          $element['#parents'] = [$key];
        }
      }
      else {
        if (end($element['#parents']) != $key) {
          array_push($element['#parents'], $key);
        }
      }
      // Element types that should be loading some default value, usually for
      // the purposes of persistent form data.
      $load_defaults = [
        'textfield',
        'textarea',
        'checkbox',
        'select',
        'managed_file',
      ];
      // If element is a type that should pull from 'saved_values', try to load
      // the old value.
      if (
        in_array($element['#type'], $load_defaults)
        and !isset($element['#default_value'])
        and isset($saved_vals[$key])
      ) {
        $element['#default_value'] = $saved_vals[$key];
      }
      // If element is a select type and still has no default value, then there
      // is no saved value, so the default should be 0.
      elseif (
        $element['#type'] == 'select'
        && !isset($element['#default_value'])
      ) {
        $element['#default_value'] = 0;
      }

      // Checkboxes elements work differently in terms of default values.
      if ($element['#type'] == 'checkboxes') {
        $options = $element['#options'];
        // Get checkboxes options.
        foreach ($options as $option) {
          // If the option does not have a default, pull from 'saved_values'.
          if (
            !isset($element[$option]['#default_value'])
            && isset($saved_vals[$key][$option])
          ) {
            $element[$option]['#default_value'] = $saved_vals[$key][$option];
          }
        }
      }

      if ($element['#type'] == 'fieldset') {
        if (empty($saved_vals[$key]) || !is_array($saved_vals[$key])) {
          $saved_vals[$key] = array();
        }
        if (empty($vals[$key]) || !is_array($vals[$key])) {
          $vals[$key] = array();
        }
        tpps_leaves($element, $vals[$key], $saved_vals[$key]);
      }
    }
  }
}

/**
 * Implements hook_page_build().
 *
 * Adds the side bar to TPPS form pages before they are rendered.
 * Adds the tppsc Status side bar to the page before it is rendered.
 *
 * Note: array $page contains TPPSc/TPPS form array.
 */
function tpps_page_build(&$page) {
  $form_id = $page['content']['system_main']['#form_id'] ?? NULL;
  if (!in_array($form_id, ['tpps_main', 'tppsc_main'])) {
    return $page;
  }

  // Note: Module TPPSc used this check for step value:
  // $page['content']['system_main']['step']['#default_value']
  // but this $page['content']['system_main']['step'] not set even at Page 4.
  $js_settings = drupal_static('drupal_add_js', [])['settings']['data'] ?? [];
  $step = NULL;
  foreach ($js_settings as $info) {
    if (array_key_exists('tpps', $info)) {
      $step = $info['tpps']['stage'] ?? NULL;
      if (!empty($step)) {
        break;
      }
    }
  }
  if (empty($step)) {
    return $page;
  }
  if (!in_array($step, ['frontpage', TPPS_PAGE_1, 'summarypage'])) {
    $blockObject = block_load('views', 'tpps_status');
    $blockObject->title = 'TPPS Status';
    $blockObject->subject = '';
    $blockObject->region = 'Content';
    $block = _block_get_renderable_array(_block_render_blocks([$blockObject]));
    $tpps_status = '<div class="block block-system contextual-links-region '
      . 'block-menu tpps-status-block">'
      . $block['views_tpps_status']['#markup'] . '</div>';
    drupal_add_region_content('sidebar_second', $tpps_status);
  }
  return $page;
}

/**
 * Creates the main TPPS form.
 *
 * Provides the form based on which step the user is on.
 *
 * @param array $form
 *   The form to be created.
 * @param array $form_state
 *   The state of the form to be created.
 *
 * @return array
 *   Returns the completed form.
 */
function tpps_main(array $form, array &$form_state, $accession = NULL) {
  // @todo Minor.Use the same function to build form but set form_id manually.
  module_load_include('inc', 'tpps', 'includes/form');
  // Note: we use the same function to build TPPS and TPPSc forms.
  return tpps_form_build_main($form, $form_state, $accession);
}

/**
 * Form validator for forms with id 'tppsc_main' and 'tpps_main'.
 *
 * Calls different validation functions based on the stage of the form. Also
 * saves file column data and add attributes to be used by the status bar where
 * appropriate.
 */
function tpps_main_validate(&$form, &$form_state) {
  global $user;
  // If the user is going backwards or simply saving their data in the form,
  // make sure to save the column data for the managed_file elements. The rest
  // of the validation function does not need to be completed.
  if (in_array($form_state['triggering_element']['#value'], ['Back', 'Save'])) {
    tpps_save_file_columns($form, $form_state);
    return;
  }

  $submission = new Submission();
  $submission->state = $form_state;
  $is_tppsc = $submission->isTppsc();

  switch ($form_state['stage']) {
    case 'frontpage':
      if ($is_tppsc) {
        if (
          $form_state['values']['use_old_tgdr']
          and !$form_state['values']['old_tgdr']
        ) {
          form_set_error('old_tgdr',
            t('Existing TGDR number: field is required.')
          );
        }
      }
      elseif (!$is_tppsc) {
        require_once 'forms/validate/front.php';
        tpps_front_page_validate_form($form, $form_state);
      }
      break;

    case TPPS_PAGE_1:
      require_once 'forms/validate/page_1.php';
      tpps_page_1_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_2:
      require_once 'forms/validate/page_2.php';
      tpps_page_2_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_3:
      require_once 'forms/validate/page_3.php';
      tpps_page_3_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_4:
      require_once 'forms/validate/page_4.php';
      tpps_page_4_validate_form($form, $form_state);
      break;

    default:
      break;
  }

  $module_path = drupal_get_path('module', 'tpps');
  $form['#attached']['js'][] = $module_path . TPPS_JS_PATH;

  // If there were no errors in validating the input, then let the form status
  // bar know that those fields are cleared to be shown.
  if (!form_get_errors()) {
    $form_state['values']['#cleared'] = TRUE;
    if ($form_state['submitted'] == '1') {
      tpps_submission_update_stats($form_state);
    }
  }
  // Otherwise, do not show the values for this page.
  else {
    $form_state['values']['#cleared'] = FALSE;
  }
}

/**
 * Implements hook_FORM_ID_submit().
 *
 * Calls different submission functions based on the stage of the form. Also
 * copies the form values into the form saved values so they can be seen by the
 * other pages and the final submit functions. Sets the incomplete form state
 * variable in the database so that it can be loaded later. If the form was
 * completed, notifies the user that their submission was received.
 *
 * @TODO Minor. Check if files of old submission are removed
 * when existing TGDR reused.
 */
function tpps_main_submit($form, &$form_state) {
  global $user;

  $submission = tpps_submission()->setState($form_state);

  $saved_values = &$form_state['saved_values'] ?? NULL;
  $values = &$form_state['values'] ?? NULL;
  module_load_include('inc', 'tpps', 'includes/form');
  module_load_include('inc', 'tpps', 'includes/submission_file');
  module_load_include('inc', 'tpps', 'includes/submission_form_version');

  // Get Submission Form Version.
  $saved_values[TPPS_SUBMISSION_FORM_VERSION_KEY] =
    $saved_values[TPPS_SUBMISSION_FORM_VERSION_KEY]
      ?? ($values[TPPS_SUBMISSION_FORM_VERSION_KEY] ?? NULL);
  if (empty($saved_values[TPPS_SUBMISSION_FORM_VERSION_KEY])) {
    if ($submission->accession) {
      $saved_values[TPPS_SUBMISSION_FORM_VERSION_KEY]
        = tpps_submission_form_version_get($submission->state);
    }
    else {
      $saved_values[TPPS_SUBMISSION_FORM_VERSION_KEY]
        = TPPS_SUBMISSION_FORM_CURRENT_VERSION;

    }
  }

  unset($values[TPPS_SUBMISSION_FORM_VERSION_KEY]);

  // If this form was submitted after import we need to upgrade version.
  // Note: If form version is up-to-date then nothing will be done.
  $new_form_state = $form_state;
  tpps_submission_form_version_upgrade_to_latest($form_state, $new_form_state);
  $form_state = $new_form_state;

  $submission->setState($form_state);
  if ($submission->accession) {
    $submission->save();
  }

  if ($submission->isTppsc()) {
    $form_state['status'] = TPPS_SUBMISSION_STATUS_INCOMPLETE;
    // Use old TGDR.
    if ($form_state['stage'] == 'frontpage' && $values['use_old_tgdr']) {
      $form_state['dbxref_id'] = $form_state['values']['old_tgdr'];
      $form_state['accession'] = chado_select_record(
        'dbxref', ['accession'], ['dbxref_id' => $form_state['dbxref_id']]
      )[0]->accession;
      $values['accession'] = $form_state['accession'];
      tpps_create_submission($form_state, $user->uid);
    }
  }

  $triggering_element = $form_state['triggering_element']['#value'] ?? NULL;
  if (
    ($form_state['stage'] == 'frontpage' && $submission->accession)
    // We need to change status of files when user clicked 'Back' or 'Next'
    // buttons to avoid errors and allow to edit study.
    || in_array($triggering_element, ['Back', 'Next'])
  ) {
    // @TODO Minor. Check case when old TGDR reused it will be overwritten.
    // Could we skip file status changing?
    // && !$form_state['values']['use_old_tgdr']
    tpps_submission_file_set_status($form_state, 0);
  }
  $saved_values[$form_state['stage']] = $values;

  // This happens when the user clicks Save, notice this if clause will do a return.
  // This means after saving, the form will be rebuilt based on the rebuild key = TRUE.
  if ($triggering_element == 'Save') {
    drupal_set_message(t('Your information has been saved!'), 'status');
    if (isset($saved_values['form_build_id'])) {
      $values['form_build_id'] = $saved_values['form_build_id'];
    }
    $saved_values['form_build_id'] = $values['form_build_id'];
    $form_state['rebuild'] = TRUE;
    $submission->setState($form_state);
    if ($submission->accession) {
      $submission->save();
    }
    // File status must not be changed here because we need to have termporary
    // status of file until study completely submitted. See 'summarypage'
    // processing.
    // tpps_submission_file_set_status($form_state, FILE_STATUS_PERMANENT);
    cache_clear_all('*', (TPPS_CACHE_BIN ?? 'cache'), TRUE);
    return;
  }

  // ELSE, it will do the below logic, read the comment after this switch statement.
  $is_back_button = ($triggering_element == 'Back');
  switch ($form_state['stage']) {
    case 'frontpage':
      $form_state['stage'] = TPPS_PAGE_1;
      break;

    case TPPS_PAGE_1:
      $form_state['stage'] = TPPS_PAGE_2;
      break;

    case TPPS_PAGE_2:
      $form_state['stage'] = $is_back_button ? TPPS_PAGE_1 : TPPS_PAGE_3;
      break;

    case TPPS_PAGE_3:
      $form_state['stage'] = $is_back_button ? TPPS_PAGE_2 : TPPS_PAGE_4;
      break;

    case TPPS_PAGE_4:
      $form_state['stage'] = $is_back_button ? TPPS_PAGE_3 : 'summarypage';
      break;

    case 'summarypage':
      if ($is_back_button) {
        $form_state['stage'] = TPPS_PAGE_4;
      }
      else {
        // Complete button.
        $submission->setStatus(TPPS_SUBMISSION_STATUS_PENDING_APPROVAL);
        $submission->set(['completed'], time());
        tpps_submission_file_set_status($submission->state, FILE_STATUS_PERMANENT);
        // Save Submission Info.
        $submission->generateSharedState();
        $submission->save();
        // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        tpps_submit_email($form_state);
        drupal_goto('completed-submission/' . $submission->accession);
      }
      break;

    default:
      drupal_set_message(t('Invalid form stage.'), 'error');
      break;
  }
  $form_state['rebuild'] = TRUE;

  // It'll then come here and also perform a save most likely
  // which I think will cater for NEXT button.
  if (isset($saved_values['form_build_id'])) {
    $values['form_build_id'] = $saved_values['form_build_id'];
  }
  $saved_values['form_build_id'] = $values['form_build_id'];

  $submission->setState($form_state);
  if ($submission->accession) {
    $submission->save();
  }

  if ($form_state['stage'] == TPPS_PAGE_1) {
    // When non-empty (after Page1 submit) study was added we need to
    // reset cached lists of accessions.
    // Note: We must clear cache when submission already stored to DB.
    cache_clear_all('*', (TPPS_CACHE_BIN ?? 'cache'), TRUE);
  }
}

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

/**
 * Creates the main TPPSc form.
 *
 * Provides the form based on which step the user is on.
 *
 * @param array $form
 *   The form to be created.
 * @param array $form_state
 *   The state of the form to be created.
 *
 * @return array
 *   Returns the completed form.
 */
function tppsc_main(array $form, array &$form_state, $accession = NULL) {
  // @todo Minor.Use the same function to build form but set form_id manually.
  module_load_include('inc', 'tpps', 'includes/form');
  // Note: we use the same function to build TPPS and TPPSc forms.
  return tpps_form_build_main($form, $form_state, $accession);
}

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

/**
 * Implements hook_block_view_alter().
 *
 * This function populates the TPPS Status Bar block with data that has already
 * been collected through the form.
 */
function tpps_block_view_alter(&$data, $block) {
  global $base_url;
  switch ($block->delta) {
    case 'tpps_status':
      $css = "
      .tgdr_status_block img {
          vertical-align: middle;
          margin-bottom: 4px;
          margin-right: 2px;
      }
      ";
      drupal_add_css($css, 'inline');

      $data['subject'] = t('TPPS Status');

      $content = "<div class='tgdr_status_block'>";
      if (preg_match('/tppsc?\/(TGDR.*)/', $_GET['q'], $matches)) {
        $accession = $matches[1];
      }
      elseif (isset($_REQUEST['accession'])) {
        $accession = $_REQUEST['accession'];
      }
      else {
        $content .= '</div>';
        $data['content'] = filter_xss($content);
        break;
      }
      $submission = new Submission($accession);
      $submission->state['saved_values'][TPPS_PAGE_2]['study_info'] = NULL;
      $flat = $submission->flatten();

      $ok = "<img src='$base_url/misc/message-16-ok.png'>";
      $map_api_key = variable_get('tpps_maps_api_key', NULL);
      foreach ($flat as $item => $val) {
        if ($item[0] !== '#') {
          $item_str = filter_xss(check_plain($item));
          $val_str = filter_xss(check_plain($val));
          if (preg_match('/(Abstract|Organization)/', $item)) {
            continue;
          }
          elseif (preg_match('/File/', $item) && $file = tpps_file_load($val)) {
            // Create links to files.
            $file_url = check_plain(file_create_url($file->uri));
            $val_str = "<a href='$file_url' target='blank'>$file->filename</a>";
            if (!$flat['#skip_loc'] and preg_match('/^(.*)Accession File/', $item, $matches)) {
              $fid = $val;
              $wrapper_id = "{$fid}_map_wrapper";
              $button_id = "{$fid}_map_button";
              $val_str .= "<div id=\"$wrapper_id\"></div>"
                . "<input id=\"$button_id\" type=\"button\" value=\"Click "
                . "here to view plants on map!\"></input>";
              $form['#attached']['js'][] = [
                'type' => 'setting',
                'data' => [
                  'tpps' => [
                    'map_buttons' => [
                      $fid => [
                        'wrapper' => $wrapper_id,
                        'button' => $button_id,
                        'fid' => $fid,
                      ],
                    ],
                  ],
                ],
              ];
            }
          }
          elseif (
            preg_match('/species photo/', $item)
            && $file = tpps_file_load($val)
          ) {
            $file_url = check_plain(file_create_url($file->uri));
            $val_str = "<img src='$file_url' width='100%'>";
            $val_str .= "<br><a href='$file_url' target='blank'>$file->filename</a>";
          }
          elseif (preg_match('/Month/', $item)) {
            // Skip experiment start/end month.
            continue;
          }
          elseif (preg_match('/^(.*)Year/', $item, $matches)) {
            // Combine experiment start/end month + year.
            if (isset($flat[$matches[1] . 'Month'])) {
              $item_str = $matches[1] . 'Date';
              $val_str = "{$flat[$matches[1] . 'Month']} $val_str";
            }
            else {
              continue;
            }
          }
          elseif (
            preg_match('/Study Location/', $item)
            && isset($flat['#location_type'])
            && $flat['#location_type']
          ) {
            // Add map capability to location.
            if ($flat['#location_type'] == '2') {
              $query = $val_str;
            }
            elseif ($flat['#location_type'] != '2' and ($standard = tpps_standard_coord($val_str))) {
              $query = $standard;
            }
            $val_str = "<a id=\"sidebar_map\" style=\"cursor:pointer\">$val_str</a>";
            if (isset($query) and !empty($map_api_key)) {
              $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=$map_api_key&z=5\\\" allowfullscreen> </iframe></div>";
              // @TODO Move to JS file.
              $js = "jQuery(document).ready(function ($) {
                jQuery(\"#sidebar_map\").click(function() {
                  jQuery(\"#sidebar_map_wrapper\").remove();
                  jQuery(\"#sidebar_map\").after( \"<br><div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                });
              });";
              drupal_add_js($js, 'inline');
            }
          }
          elseif (
            preg_match('/Publication DOI/', $item)
            || preg_match('/Dataset DOI/', $item)
          ) {
            $link = preg_match('/https?:\/\//', $val_str) ? $val_str : "https://doi.org/$val_str";
            $val_str = "<a href=\"$link\" target=\"blank\">$val_str</a>";
          }
          $content .= "$ok $item_str: $val_str <br>";
        }
        elseif (preg_match('/#page_(.)_cleared/', $item, $matches)) {
          // Break between pages.
          if ($val) {
            $step_arr = array(
              1 => 'Author and Species Information',
              2 => 'Experimental Conditions',
              3 => 'Plant Accession',
              4 => 'Submit Data',
            );
            if ($matches[1] > 1) {
              $content .= '<br />';
            }
            $content .= "$ok Step {$matches[1]} - Complete<br />{$step_arr[$matches[1]]}<br /><hr />";
          }
          else {
            // If page not cleared, do not display remaining form state data.
            break;
          }
        }
        elseif (preg_match('/^#(.*)accession_(.*)/', $item, $matches)) {
          $val_str = filter_xss(check_plain($val));
          $parts = explode(" ", substr($matches[0], 1));
          $item_id = implode("_", $parts);
          $content .= "<div id=\"$item_id\" style=\"display:none;\">$val_str</div>";
        }
      }
      if (!empty($flat['#page_3_cleared']) and !empty($map_api_key)) {
        $content .= "<script src=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\"></script><script src=\"https://maps.googleapis.com/maps/api/js?key=$map_api_key&callback=initMap\"
        async defer></script>";
      }
      $content .= "</div>";
      $data['content'] = $content;

      break;

    default:
      break;
  }
}

/**
 * Implements hook_media_browser_plugins_alter().
 */
function tpps_media_browser_plugins_alter(&$plugins) {
  unset($plugins['upload']);
  unset($plugins['media_default--media_browser_my_files']);
}

// WARNING: Required because dev-server has PHP 7.0.2.
//
// There are several ways to provide this functionality for versions
// prior to PHP 7.3.0. It is possible to use array_keys(),
// but that may be rather inefficient.
// It is also possible to use reset() and key(),
// but that may change the internal array pointer.
// An efficient solution, which does not change the internal
// array pointer, written as polyfill.
if (!function_exists('array_key_first')) {

  /**
   * Polifill for array_key_first() implemented in PHP 7.3.0 and higher.
   *
   * @param array $arr
   *   Array to be processed.
   *
   * @return string
   *   Returns key of the first element of the given array.
   */
  function array_key_first(array $arr) {
    foreach ($arr as $key => $unused) {
      return $key;
    }
    return NULL;
  }

}

// WARNING: Required because dev-server has PHP 7.0.2.
//
// See https://www.php.net/manual/en/function.array-key-last.php#124007
if (!function_exists('array_key_first')) {

  /**
   * Polifill for array_key_last() implemented in PHP 7.3.0 and higher.
   *
   * @param array $arr
   *   Array to be processed.
   *
   * @return string
   *   Returns key of the last element of the given array.
   */
  function array_key_first(array $arr) {
    foreach ($arr as $key => $unused) {
      return $key;
    }
  }

}

/**
 * Implements hook_init().
 */
function tpps_init() {
  // Removed spam message:
  // Notice: Undefined variable: show_nafgs_menu in include() (line 147 of
  // :w
  // /var/www/Drupal/sites/all/themes/sites/all/themes/dawn/tpl/page.tpl.php).
  // It can't be fixed because there is no write access to this module.
  if (!empty($_SESSION['messages']['error'])) {
    $spam = 'Undefined variable: show_nafgs_menu in';
    foreach ($_SESSION['messages']['error'] as $index => $item) {
      if (strpos($item, $spam)) {
        unset($_SESSION['messages']['error'][$index]);
      }
    }
    if (empty($_SESSION['messages']['error'])) {
      unset($_SESSION['messages']['error']);
    }
  }
  if (!is_live_site()) {
    tpps_watchdog_cleanup();
  }
}

/**
 * Removes spam-messages in watchdog log.
 */
function tpps_watchdog_cleanup() {
  // To get new data for filtering:
  // $wid = 55333636;
  // $result = db_query("SELECT * FROM public.watchdog where wid= " . $wid)->fetchAssoc();
  // dpm(var_export($result, 1));
  $filter = [
    [
      'uid' => '0',
      'type' => 'php',
      'message' => '%type: !message in %function (line %line of %file).',
      'variables' => 'a:6:{s:5:"%type";s:6:"Notice";s:8:"!message";s:19:"Undefined offset: 1";s:9:"%function";s:46:"tripal_galaxy_form_webform_client_form_alter()";s:5:"%file";s:68:"/var/www/Drupal/sites/all/modules/tripal_galaxy/tripal_galaxy.module";s:5:"%line";i:614;s:14:"severity_level";i:5;}',
      'severity' => '5',
    ],
    // Warning: Invalid argument supplied for foreach() in file_entity_set_title_alt_properties_on_file_fields() (line 248 of /var/www/Drupal/sites/all/modules/file_entity/file_entity.file.inc).
    [
      'uid' => '0',
      'type' => 'php',
      'message' => '%type: !message in %function (line %line of %file).',
      'variables' => 'a:6:{s:5:"%type";s:7:"Warning";s:8:"!message";s:39:"Invalid argument supplied for foreach()";s:9:"%function";s:53:"file_entity_set_title_alt_properties_on_file_fields()";s:5:"%file";s:66:"/var/www/Drupal/sites/all/modules/file_entity/file_entity.file.inc";s:5:"%line";i:248;s:14:"severity_level";i:4;}',
      'severity' => '4',
    ],
    // Cron thread 1 started.
    [
      'uid' => '0',
      'type' => 'serial_launcher',
      'message' => 'Cron thread %thread started',
      'variables' => 'a:1:{s:7:"%thread";i:1;}',
      'severity' => '7',
    ],
  ];
  foreach ($filter as $filter_item) {
    $query = db_delete('watchdog');
    foreach ($filter_item as $field => $value) {
      $query->condition($field, $value);
    }
    $query->execute();
  }
}

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Custom Cache Bin.

/**
 * Implements hook_drush_cache_clear().
 */
function tpps_drush_cache_clear(&$types) {
  $types['tpps'] = '_tpps_cache_clear';
}

/**
 * Utility function that clears all the entries in our cache bin.
 */
function _tpps_cache_clear() {
  cache_clear_all('*', (TPPS_CACHE_BIN ?? 'cache'), TRUE);
}

/**
 * Implements hook_flush_caches().
 */
function tpps_flush_caches() {
  return [TPPS_CACHE_BIN];
}

/**
 * Adds CSS and JS files to page.
 *
 * 1. Theme styles will be loaded in any case.
 * 2. We add both CSS and JS even if only one is required because it's better
 *    for caching system to have less unique pages and more pages with the
 *    same set of attached files.
 *
 * @param mixed $page_id
 *   When string it could be a 'theme', 'main' or a page name.
 *   When integer it's TPPS Form Page Id.
 *
 *   What is $page_id?
 *                      | $page_id     | CSS       | JS        | File                          |
 *   -------------------+--------------+-----------+-----------+-------------------------------+
 *   Theme              | 'theme'      | Yes       | No        | /css/theme/<name>.css         |
 *   TPPS main CSS/JS   | 'main'       | Yes       | Yes       | /css/tpps.css                 |
 *   Specific Page Id   | $page_number | If exists | If exists | /css/tpps_page_${page_id}.css |
 *   Specific Page Name | $page_name   | If exists | If exists | /css/tpps_${page_name}.css    |
 *
 *   Constants like TPPS_PAGE_1 and etc could be used to improve code readablility.
 *   Custom Page Id like 'study_export' for 'TPPS Study Export Page'.
 * @param array $form
 *   Drupal Form API form array.
 *   When NULL then CSS/JS will be added as it's a regular page.
 *
 *   To force using Form API instead of use drupal_add_css/js():
 *     $form = $form ?? [];
 *     tpps_add_css_js('main', $form);
 *   This could be useful if $form not yet defined at the beginning of the
 *   form generation callback.
 *
 * @TODO Minor. Get Form Id from the $form and use as a file name.
 */
function tpps_add_css_js($page_id = 'main', array &$form = NULL) {
  // Custom CSS Theme.
  $theme_path = TPPS_MODULE_PATH . '/css/themes/'
    . variable_get('tpps_theme', 'default') . '.css';
  module_load_include('inc', 'tpps', 'includes/common');
  $dark_theme_path = TPPS_MODULE_PATH . '/css/dark_theme.css';
  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  // This is regualar page.
  if ($form === NULL || !is_array($form)) {
    drupal_add_css($theme_path);
    if (variable_get('tpps_dark_theme')) {
      drupal_add_css($dark_theme_path);
    }
    if ($page_id == 'theme') {
      // We only add theme.
      return;
    }
    if ($page_id == 'main') {
      // Add main files.
      drupal_add_css(TPPS_MODULE_PATH . TPPS_CSS_PATH);
      drupal_add_js(TPPS_MODULE_PATH . TPPS_JS_PATH);
      if (variable_get('tpps_theme_fix_pager')) {
        drupal_add_css(TPPS_MODULE_PATH . '/css/pager_fix.css');
      }
    }
    else {
      // Add custom page files. Like 'TPPS Study Export Page' and 'study_export'.
      drupal_add_css(TPPS_MODULE_PATH . '/css/tpps_' . $page_id . '.css');
      drupal_add_js(TPPS_MODULE_PATH . '/js/tpps_' . $page_id . '.js');
    }
  }
  else {
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // Form.
    $form['#attached']['css'][] = $theme_path;
    if (variable_get('tpps_dark_theme')) {
      $form['#attached']['css'][] = $dark_theme_path;
    }
    if ($page_id == 'theme') {
      // We only add theme.
      return;
    }
    if ($page_id == 'main') {
      // Add main files.
      $form['#attached']['js'][] = [
        'type' => 'file',
        'scope' => 'footer',
        'group' => JS_THEME,
        'data' => TPPS_MODULE_PATH . TPPS_JS_PATH,
      ];
      $form['#attached']['css'][] = TPPS_MODULE_PATH . TPPS_CSS_PATH;
      if (variable_get('tpps_theme_fix_pager')) {
        $form['#attached']['css'][] = TPPS_MODULE_PATH . '/css/pager_fix.css';
      }
    }
    elseif ($page_id) {
      // Features like 'autofocus' and etc.
      $filename = 'tpps_' . $page_id;
      if (is_numeric($page_id) && $page_id > 0) {
        // TPPS/TPPSc Form pages.
        $filename = 'tpps_page_' . $page_id;
      }
      // @TODO Minor. Check if JS/CSS file exists.
      $form['#attached']['js'][] = [
        'type' => 'file',
        'scope' => 'footer',
        'group' => JS_THEME,
        'data' => TPPS_MODULE_PATH . '/js/' . $filename . '.js',
      ];
      $form['#attached']['css'][] = TPPS_MODULE_PATH . '/css/' . $filename . '.css';
    }
  }
}

/**
 * Adds module settings pages for hook_menu().
 *
 * @param array $items
 *   Menu items.
 */
function tpps_menu_add_settings_pages(array &$items = []) {
  $items = $items ?? [];
  $items['admin/config/tpps'] = [
    'title' => 'TPPS',
    'description' => 'TPPS Settings',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => ['access administration pages'],
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];
  $items['admin/config/tpps/main'] = [
    'title' => 'Main Settings',
    'description' => 'Main module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_admin_settings'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/config.php',
  ];
  $items['admin/config/tpps/admin-panel'] = [
    'title' => 'Admin Panel',
    'description' => 'Admin Panel Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_admin_panel_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/panel.inc',
  ];
  $items['admin/config/tpps/submission'] = [
    'title' => 'Submission',
    'description' => 'Submission Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/submission.inc',
  ];
  $items['admin/config/tpps/form'] = [
    'title' => 'Form',
    'description' => 'Form Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_form_main_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file' => 'admin/form_main.inc',
    'weight' => 10,
  ];
  $items['admin/config/tpps/form/main'] = [
    'title' => 'Main',
    'description' => 'Form Main Settings',
    'weight' => 10,
    'file path' => TPPS_MODULE_PATH,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/config/tpps/form/front'] = [
    'title' => 'Front',
    'description' => 'Form Front page Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_form_front_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/form_front.inc',
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/config/tpps/form/page-1'] = [
    'title' => 'Page 1',
    'description' => 'Form Page 1 Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_form_page_1_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/form_page_1.inc',
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/config/tpps/form/page-4'] = [
    'title' => 'Page 4',
    'description' => 'Form Page 4 Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_form_page_4_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/form_page_4.inc',
    'weight' => 100,
    'type' => MENU_LOCAL_TASK,
  ];

  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  // Synonym.
  $items['admin/config/tpps/synonym'] = [
    'title' => 'Synonym',
    'description' => 'Synonym/Unit Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_synonym_add_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/synonym.inc',
    'weight' => 100,
  ];
  $items['admin/config/tpps/synonym/add'] = [
    'title' => 'Add Synonym',
    'description' => 'Create new Phenotype Synonym',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/config/tpps/synonym/rebuild'] = [
    'title' => 'Rebuild',
    'description' => 'Reset cached Synonym and Unit lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_synonym_list_rebuild_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/synonym.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  // Submit All.
  $items['admin/config/tpps/submit-all'] = [
    'title' => 'Submit All',
    'description' => 'Tripal Job Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submit_all_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/submit_all.inc',
  ];
  // Cron.
  $items['admin/config/tpps/cron'] = [
    'title' => 'Cron',
    'description' => 'Cron Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_cron_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/cron.inc',
  ];
  // API.
  $items['admin/config/tpps/api'] = [
    'title' => 'API',
    'description' => 'API Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_api_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/api.inc',
  ];
  $items['admin/config/tpps/reports'] = [
    'title' => 'Reports',
    'description' => 'Reports Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_reports_settings_form'],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'admin/reports.inc',
  ];
}

/**
 * Gets reports meta-data.
 *
 * See tpps_reports_overview_page() which builds list of report links.
 */
function tpps_report_get_list() {
  return [
    'missing_doi' => [
      'url' => 'missing-doi',
      'title' => variable_get('tpps_report_missing_doi_title', 'Missing DOI'),
      'description' => t('List of Studies without DOI attached.'),
      'page callback' => 'tpps_missing_doi_report',
      'admin_panel' => TRUE,
    ],
    'order_family_not_exist' => [
      'url' => 'order-family-not-exist',
      'title' => variable_get('tpps_report_order_family_not_exist_title',
        'Order/Family not exist'),
      'description' => t('Lists non-existing order/family.'),
      'admin_panel' => TRUE,
    ],
    'no_synonym' => [
      'url' => 'no-synonyms',
      'title' => variable_get('tpps_report_no_synonym_title',
        'List of phenotypes without Synonyms'),
      'description' => t('List of phenotypes without synonym.'),
      'admin_panel' => TRUE,
    ],
    'unit_warning' => [
      'url' => 'unit-warning',
      'title' => variable_get('tpps_report_unit_warning_title',
      'Unit Warning (list of phenotypes which unit differs from Synonym)'
      ),
      'description' => t("List of Phenotypes which differs from Synonym's Unit."),
      'admin_panel' => TRUE,
    ],
    // Files.
    'submissions_all_files' => [
      'url' => 'submissions-all-files',
      'title' => variable_get('tpps_report_submissions_all_files_title',
        "Submission's All Files"
      ),
      'description' => t('List of all (existing and missing) File Ids for ALL submissions'),
      'admin_panel' => TRUE,
    ],
    'submissions_without_files' => [
      'url' => 'submissions-without-files',
      'title' => variable_get('tpps_report_submissions_without_files_title',
        'Submissions without Files'),
      'description' => t('List of submissions which has no files.'),
      'admin_panel' => TRUE,
    ],
    'submissions_missing_files' => [
      'url' => 'submissions-missing-files',
      'title' => variable_get('tpps_report_submissions_missing_files_title',
        "Submission's Missing Files"
      ),
      'description' => t('List submissions which has files but those files '
      . 'are missing in filesystem.'),
      'admin_panel' => TRUE,
    ],
    'missing_files' => [
      'url' => 'missing-files',
      'title' => variable_get('tpps_report_missing_files_title',
        'Files missing in filesystem'
      ),
      'description' => t("List of all (including submission's) files missing "
      . "in filesystem but present in DB table 'file_managed'."),
      'admin_panel' => TRUE,
    ],
    'imported_studies' => [
      'url' => 'imported-studies',
      'title' => variable_get('tpps_report_imported_studies_title', 'Imported Studies'),
      'description' => t('List of Imported Studies Accessions.'),
      'admin_panel' => TRUE,
    ],
    // Misc.
    'variable_list' => [
      'url' => 'variable-list',
      'title' => variable_get('tpps_report_variable_list_title',
        'TPPS module variables'
      ),
      'description' => t("List of TPPS module's variables with prefix 'tpps'."),
      'admin_panel' => FALSE,
    ],
  ];
}

/**
 * Adds report menu items for hook_menu().
 *
 * See function tpps_reports_overview_page() for a list of items.
 * Add title at 'admin/config/tpps/reports'.
 * Update hook_install/uninstall.
 * Update tpps_admin_panel_get_reports().
 * Clear cache.
 *
 * @param array $items
 *   Menu items.
 */
function tpps_menu_add_report_pages(array &$items = []) {
  $items = $items ?? [];
  // Add parent menu item.
  $items['admin/reports/tpps'] = [
    'title' => 'TPPS Reports',
    'description' => 'TPPS module reports',
    'page callback' => 'tpps_reports_overview_page',
    'access arguments' => ['administer tpps module'],
  ];

  foreach (tpps_report_get_list() as $name => $report) {
    $items['admin/reports/tpps/' . $report['url']] =
    $items['tpps-admin-panel/reports/' . $report['url']] = [
      'title' => $report['title'],
      'description' => $report['description'],
      'page callback' => 'tpps_admin_' . $name . '_report',
      'access callback' => 'tpps_access',
      'access arguments' => ['administer tpps module'],
      'file' => 'reports/' . $name . '.inc',
    ];
  }
}

/**
 * Adds Submission Import/Export pages into hook_menu().
 *
 * @param array $items
 *   Menu items.
 */
function tpps_menu_add_submission_pages(array &$items = []) {
  $items = $items ?? [];
  // List of all submissions and action-buttons.
  $items['tpps/submission'] = [
    'title' => 'Submission',
    'description' => 'TPPS Submission Migraiton',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_list_form'],
    'access arguments' => ['administer tpps module'],
    'file' => 'pages/submission/list.inc',
  ];
  $items['tpps/submission/%'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_list_form', 2],
    'access arguments' => ['administer tpps module'],
    'file' => 'pages/submission/list.inc',
  ];
  // View.
  $items['tpps/submission/%/view'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2, 3, 4],
    'description' => 'View TPPS Submission',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_view_form', 2],
    'access arguments' => ['administer tpps module'],
    'file' => 'pages/submission/view.inc',
  ];
  // Export.
  $items['tpps/submission/%/export'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2, 3],
    'description' => 'Export of TPPS Submission',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_export_form', 2],
    'access arguments' => ['administer tpps module'],
    'file' => 'pages/submission/export.inc',
  ];
  $items['tpps/submission/%/export/json'] = [
    'type' => MENU_CALLBACK,
    'title' => 'TPPS Submission Export',
    'description' => 'TPPS Submission Export in JSON format',
    'page callback' => 'tpps_submission_export_json',
    'page arguments' => [2],
    'access callback' => TRUE,
    'file' => 'pages/submission/export.json.inc',
  ];
  // @TODO Menu item is depricated and could be removed in future.
  // Use /api/submission/<accession>/view instead.
  $items['tpps/submission/%tpps_submission/json'] = [
    'type' => MENU_CALLBACK,
    'title' => 'TPPS Submission JSON',
    'description' => 'TPPS Submission in JSON format',
    'page callback' => 'tpps_api_submission_view',
    'page arguments' => [2],
    'access arguments' => ['administer tpps module'],
    'file' => 'api/submission/view.inc',
  ];
  // Import.
  $items['tpps/submission/%/import'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2, 3],
    'description' => 'Import of TPPS Submission',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_import_form', 2],
    'access arguments' => ['administer tpps module'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'pages/submission/import.inc',
  ];
  // Compare.
  $items['tpps/submission/%/compare'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2, 3],
    'description' => 'Compare two TPPS Submissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_compare_form', 2],
    'access arguments' => ['administer tpps module'],
    'file' => 'pages/submission/compare.inc',
  ];
  $items['tpps/submission/%/compare/%'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2, 3, 4],
    'description' => 'Comparison of two TPPS Submissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_compare', 2, 4],
    'access arguments' => ['administer tpps module'],
    'file' => 'pages/submission/compare.inc',
  ];
  $items['tpps/submission/%/purge'] = [
    'title callback' => 'tpps_submission_title',
    'title arguments' => [2, 3],
    'description' => 'Purge TPPS Submission',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_purge_form', 2],
    'access arguments' => ['tpps delete submission'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'pages/submission/purge.inc',
  ];
  $items['tpps/submission/purge_multiple'] = [
    'title callback' => 'Purge Multiple',
    'description' => 'Purge multple TPPS Submissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_purge_multiple_form'],
    'access arguments' => ['tpps delete submission'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'pages/submission/purge_multiple.inc',
  ];
  // To preselect range of accessions:
  // tpps/submission/purge_multiple/900 = [900 .. latest];
  // tpps/submission/purge_multiple/900-950 = [900 .. 950];
  // tpps/submission/purge_multiple/950-900 = [900 .. 950];
  // tpps/submission/purge_multiple/-900 = [0 .. 900];
  // tpps/submission/purge_multiple/900- = [900 .. latest];
  // tpps/submission/purge_multiple/TGDR900-TGDR950 = [900 .. 950].
  $items['tpps/submission/purge_multiple/%'] = [
    'title callback' => 'Purge Multiple',
    'description' => 'Purge multple TPPS Submissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tpps_submission_purge_multiple_form', 3],
    'access arguments' => ['tpps delete submission'],
    'file path' => TPPS_MODULE_PATH,
    'file' => 'pages/submission/purge_multiple.inc',
  ];
}

/**
 * Adds API endpoints to hook_menu().
 *
 * @param array $items
 *   Menu items.
 */
function tpps_menu_add_api(array &$items = []) {
  // API.
  $items['api/file/%file/info'] = [
    // File Object with extra absolute path and URL for downloading.
    'title' => 'File Info',
    'page callback' => 'tpps_api_file_get_info',
    // 2: Managed File Id.
    'page arguments' => [2],
    'access callback' => 'tpps_api_access',
    'file' => 'api/file/info.inc',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];
  $items['api/file/%file/get'] = [
    'title' => "Download File",
    'page callback' => 'tpps_api_file_get',
    // 2: Managed File Id.
    'page arguments' => [2],
    'access callback' => 'tpps_api_access',
    'file' => 'api/file/get.inc',
    'type' => MENU_CALLBACK,
  ];
  $items['api/submission/%tpps_submission/vcf'] = [
    'title' => 'List of VCF Files Ids',
    'page callback' => 'tpps_api_submission_vcf_files_list',
    // 3: Submission Accession (TGDRxxxx)
    'page arguments' => [2],
    'access callback' => 'tpps_api_access',
    'file' => 'api/submission/vcf.inc',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];
  $items['api/submission/%tpps_submission/view'] = [
    'title' => 'TPPS Submission Data',
    'description' => 'TPPS Submission Data in JSON format',
    'page callback' => 'tpps_api_submission_view',
    'page arguments' => [2],
    'access callback' => 'tpps_api_access',
    'file' => 'api/submission/view.inc',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];
}

/**
 * TPPS API access callback.
 *
 * Checks token in GET-parameter 'token' to allow access to API Endpoints.
 * Settings page to set/update token: /admin/config/tpps/api .
 */
function tpps_api_access() {
  global $user;
  $token = trim(variable_get('tpps_api_token'));
  if (
    empty($token)
    && (($_GET['token'] ?? NULL) != $token)
    && (!user_access('administer tpps module', $user))
  ) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Menu callback. Shows list of TPPS Reports.
 *
 * See
 * tpps_menu_add_report_pages();
 * tpps_admin_panel_reports();
 *
 * @param bool $admin_panel
 *   Determines if only items for 'Admin Panel' must be returned.
 *
 * @return string
 *   Returns rendered list of links to report pages with descriptions.
 */
function tpps_reports_overview_page($admin_panel = FALSE) {
  foreach (tpps_report_get_list() as $name => $report) {
    if (!$admin_panel || ($admin_panel && $report['admin_panel'])) {
      $items[] = '<strong>' . l(t($report['title']), 'admin/reports/tpps/'
        . $report['url']) . '</strong><br /><em>' . $report['description']
        . '</em>';
    }
  }
  return theme('item_list', [
    'title' => t('TPPS Reports'),
    'items' => $items,
  ]);
}

/**
 * Dynamyc menu item titles for TPPS Submisssion pages.
 *
 * @param string $accession
 *   Study Accession.
 * @param string $op
 *   Operation.
 * @param string $extra
 *   Extra data.
 *
 * @return string
 *   Returns menu item title.
 */
function tpps_submission_title($accession = '', $op = '', $extra = '') {
  return t('Submission @accession @op @extra',
    [
      '@op' => ucfirst($op ?? NULL),
      '@accession' => $accession ?? NULL,
      '@extra' => ($extra ? 'with ' . $extra : ''),
    ]
  );
}

/**
 * Adds Submission Import/Export pages into hook_menu().
 *
 * @param array $items
 *   Menu items.
 */
function tpps_menu_add_detials_pages(array &$items = []) {
  $items = $items ?? [];
  $items['tpps/details'] = [
    'title' => 'TPPS Details',
    'page callback' => 'tpps_details_list',
    'access callback' => 'tpps_access',
    'access arguments' => ['access tpps details'],
    'type' => MENU_NORMAL_ITEM,
  ];
  // This is actually an AJAX-callback which used to repload pages on page
  // 'tpps/details'. Seems it's a custom pager and could be replaced with
  // default pager but there is also filter form at page and this probably
  // was the reason why AJAX content reloading was used.
  $items['tpps/details/top'] = [
    'title' => 'TPPS Details List Callback',
    'page callback' => 'tpps_details_top_callback',
    'access callback' => 'tpps_access',
    'access arguments' => ['access tpps details'],
    'type' => MENU_CALLBACK,
  ];
  $items['tpps/details/%'] = [
    'title' => 'TPPS Details',
    'page callback' => 'tpps_details',
    'page arguments' => [2],
    'access callback' => 'tpps_access',
    'access arguments' => ['access tpps details'],
    'type' => MENU_NORMAL_ITEM,
  ];
  // AJAX-callback for Tabs.
  // See /js/tpps.js function detailsTab().
  //
  $items['tpps/details/%/%'] = [
    'title' => 'TPPS Details Tab Callback',
    'page callback' => 'tpps_details_tab',
    // 1st is accession, 2nd is tab machine name.
    'page arguments' => [2, 3],
    'access callback' => 'tpps_access',
    'access arguments' => ['access tpps details'],
    'type' => MENU_CALLBACK,
  ];
}

/**
 * Checks if Form's Id is 'tppsc_main' or 'tpps_main'.
 *
 * @param array $form_state
 *   Drupal From API State array.
 *
 * @return bool
 *   Returns TRUE if given $form_state belongs to one on forms processed by
 *   this module ('tppsc_main' or 'tpps_main'). Returns FALSE otherwise.
 */
function tpps_is_main_form(array $form_state) {
  return in_array(
    $form_state['build_info']['form_id'] ?? NULL,
    ['tppsc_main', 'tpps_main']
  );
}

/**
 * Creates new submission object.
 *
 * How to use:
 * tpps_submission($a)->set(['status'], $status)->save();
 *
 * @param string $accession
 *   Submission Accession.
 *
 * @return object
 *   Returns Submission object or throw an exception if it's not found.
 */
function tpps_submission($accession = '') {
  $submission = new Submission();
  if ($accession) {
    $submission->accession = $accession;
    $submission->load();
    if ($submission->doesNotExist()) {
      throw new Exception(
        t('Submission @accession not found.', ['@accession' => $accession])
      );
    }
  }
  return $submission;
}

/**
 * Loads TPPS Submission.
 *
 * @param string $accession
 *   Submission Accession.
 *
 * @return object
 *   Returns Submission object.
 */
function tpps_submission_load($accession) {
  // @TODO Minor. Use static caching.
  $submission = new Submission($accession);
  return $submission;
}
