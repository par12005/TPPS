<?php

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['master'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_master'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'tpps_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['genus/autocomplete'] = array(
      'title' => 'Autocomplete for genus',
      'page callback' => '_genus_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => '_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    return $items;
}
	
function tpps_compare_temp($table, $column, $is_primary = FALSE, array $condition = array()){
    
    /*  A function to compare the max value in a temp table to the max value in a public table
     *  $is_primary denotes whether or not the $column being compared is the primary key, default false
     *  $condition is optional, if provided is passed into condition() when the function is looking for the max
     */
    
    if ($is_primary){
        $temp_column = "tpps_$column";
    }
    else{
        $temp_column = $column;
    }
    
    $temp_max = db_select("chado.tpps_$table", "tpps_$table")
        ->fields("tpps_$table", array("$temp_column"));

    $public_max = db_select("chado.$table", "$table")
        ->fields("$table", array("$column"));
    
    if ($condition != array()){
        call_user_func_array(array($temp_max, 'condition'), $condition);
        call_user_func_array(array($public_max, 'condition'), $condition);
    }
    
    $temp_max->orderBy("$temp_column", 'DESC')
        ->range(0, 1);
    $public_max->orderBy("$column", 'DESC')
        ->range(0, 1);
    
    $temp_max = $temp_max->execute();
    $public_max = $public_max->execute();
    
    foreach($temp_max as $row){
        $temp_val = $row->{$temp_column};
        break;
    }
    
    foreach($public_max as $row){
        $public_val = $row->{$column};
        break;
    }
    
    if (!isset($public_val) and !isset($temp_val)){
        return NULL;
    }
    
    $max_val = (!isset($public_val) or $temp_val > $public_val) ? $temp_val : $public_val;
    
    return $max_val;
}

function tpps_init_project($form, &$form_state){
    
    //Get next dbxref_id and accession # for project
    $dbxref_id = tpps_compare_temp('dbxref', 'dbxref_id', TRUE) + 1;
    $accession = tpps_compare_temp('dbxref', 'accession', FALSE, array('accession', db_like('TGDR') . '%', 'LIKE'));
    
    if ($accession === NULL){
        $accession = "TGDR001";
    }
    else {
        $accession = substr($accession, 4) + 1;
    }
    
    while (strlen($accession) < 3){
        $accession = "0" . $accession;
    }
    $accession = "TGDR" . $accession;

    //testing purposes only:
    //print_r("tpps_dbxref_id: " . $dbxref_id);
    //print_r(" | accession: " . $accession);
    
    //make new record in temp table
    $values = array(
      'tpps_dbxref_id' => $dbxref_id,
      'db_id' => '95',
      'accession' => $accession
    );
    
    $insert = db_insert('chado.tpps_dbxref')
        ->fields($values);
        //->execute();
    
    $form_state['dbxref_id'] = $dbxref_id;
    $form_state['accession'] = $accession;
    
    //project will be created when name is provided, after the first page is complete.
    return $insert;
}

function tpps_create_record($table, $primary_key, array $values){
    $default_fields = array();
    $insert = NULL;
    
    if (substr($primary_key, 0, 5) == 'tpps_'){
        $compare_primary = substr($primary_key, 5);
    }
    else {
        $compare_primary = $primary_key;
    }
    
    if (substr($table, 0, 5) == 'tpps_'){
        $compare_table = substr($table, 5);
    }
    else {
        $compare_table = $table;
    }
    
    //get the new primary key (increment by 1 from the old primary key)
    $new_primary = tpps_compare_temp($compare_table, $compare_primary, TRUE) + 1;
    $values["$primary_key"] = $new_primary;
    
    //check record exists
    if (tpps_record_exists($compare_table, $values) or tpps_record_exists($table, $values)){
        //if it does, do not attempt to re-write it.
        //drupal_set_message(t('Error: Record already exists.'), 'error');
        return $values[$primary_key];
    }
    
    $fields = db_select("chado.$table", 't')
        ->fields('t')
        ->range(0,1)
        ->execute()
        ->fetchAssoc();
    
    //get default values
    foreach ($fields as $key => $value){
        if (!isset($values[$key])){
            array_push($default_fields, $key);
        }
    }
    
    //print_r($default_fields);
//    dpm($table);
//    dpm($values);
//    dpm($default_fields);
    
    //Insert the record
    $insert = db_insert("chado.$table")
        ->useDefaults($default_fields)
        ->fields($values)
        ->execute();
    
    return $insert;
}

function tpps_record_exists($table, array $values){
    
    $unique_columns = tpps_get_unique_columns($table);
    
    $results = db_select("chado.$table", 't')
        ->fields('t');
    
    $and = db_and();
    foreach ($unique_columns as $field){
        if (isset($values[$field])){
            $value = $values[$field];
            if ($value != ''){
                $and->condition("$field", db_like("$value"), 'LIKE');
            }
        }
    }
    
    $results->condition($and);
    
    $results = $results->execute()
        ->fetchAssoc();
    
    if ($results){
        return TRUE;
    }
    
    return FALSE;
}

function tpps_get_unique_columns($table){
    
    $result = db_query("select indexdef from pg_indexes where tablename = '$table' and indexdef LIKE '%UNIQUE%' and indexname NOT LIKE '%_pkey';")
        ->fetchAssoc();
    
    $result = preg_split('/(\(|\))/',$result['indexdef']);
    $result = explode(', ', $result[1]);
    
    return $result;
}

function tpps_compare_files($fid_1, $fid_2, $file_1_id_name, $file_2_id_name){
    
    $file_1 = file_load($fid_1);
    $file_2 = file_load($fid_2);
    
    $file_1_name = explode('//', $file_1->uri);
    $file_1_name = $file_1_name[1];
    $file_2_name = explode('//', $file_2->uri);
    $file_2_name = $file_2_name[1];
    
    $file_1_location = "/var/www/html/Drupal/sites/default/files/$file_1_name";
    $file_2_location = "/var/www/html/Drupal/sites/default/files/$file_2_name";
    $file_1_content = parse_xlsx($file_1_location);
    $file_2_content = parse_xlsx($file_2_location);
    
    $missing_ids = array();
    
    for ($i = 0; $i < count($file_1_content) - 1; $i++){
        $row = $file_1_content[$i];
        
        $needle_id = $row[$file_1_id_name];
        $found = FALSE;
        
        for ($j = 0; $j < count($file_2_content) - 1; $j++){
            if ($needle_id === $file_2_content[$j][$file_2_id_name]){
                $found = TRUE;
                break;
            }
        }
        
        if (!$found){
            array_push($missing_ids, $needle_id);
        }
    }
    
    return $missing_ids;
}

function tpps_parse_vcf($file){
    
    $content = fopen($file->uri, "r");

    if ($content !== FALSE){
        
        $file_format = array();
        $first_content = TRUE;
        
        for ($i = 0; $i < 1000000; $i++){
            $line = fgets($content);
            if ($line === FALSE){
                break;
            }
            if ($line[0] == '#'){
                //formatting/file info
                //dpm($line);
                if (preg_match('/^##fileformat/', $line) == 1){
                    $file_format['version'] = substr($line, 13);
                }
            }
            else{
                //actual content
                $line = explode("\t", $line);

                $chrom = $line[0];
                $position = $line[1];
                $id = $line[2];
                $ref = $line[3];
                $alt = explode(",", $line[4]);
                $quality = $line[5];
                $filter = $line[6];
                $info = explode(";", $line[7]);
                $format = $line[8];
                $unknown = array_slice($line, 9);
                
                if (count($alt[0]) == 1){
                    $type = 'SNP';
                }
                else {
                    $type = 'Indel';
                }
                
                //dpm($line);
            }

        }
        dpm($file_format);
    }
    
    return;
}

function tpps_page_build(&$page){
    
    //dpm($page['content']['system_main']['step']['#default_value']);
    
    if (isset($page['content']['system_main']['step']) and $page['content']['system_main']['step']['#default_value'] != 'frontpage' and $page['content']['system_main']['step']['#default_value'] != 'Hellopage'){
        $blockObject = block_load('views', 'tpps_status');
        $blockObject->title = ($page['content']['system_main']['step']['#default_value'] != 'summarypage') ? 'TPPS Status' : '';
        $blockObject->subject = '';
        $blockObject->region = 'Content';
        $block = _block_get_renderable_array(_block_render_blocks(array($blockObject)));
        $tpps_status = $block['views_tpps_status']['#markup'];
        if ($page['content']['system_main']['step']['#default_value'] != 'summarypage'){
            $tpps_status = "<div class='block block-system contextual-links-region block-menu tpps-status-block'>$tpps_status</div>";
            drupal_add_region_content('sidebar_second', $tpps_status);
        }
        else {
            $tpps_status = "<div id='tpps-status'></br>$tpps_status</div>";
            drupal_add_region_content('content', $tpps_status);
        }
    }
    
    return $page;
}

function tpps_master($form, &$form_state){
    
    global $user;
    
    $old_form_state = variable_get('old_form_state', NULL);
    
    if ($old_form_state !== NULL){
        $form_state['saved_values'] = $old_form_state['saved_values'];
    }
    
    if (!isset($form_state['stage'])){
        $form_state['stage'] = 'frontpage';
        
        front_create_form($form, $form_state);
        
        drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
        
        return $form;
    }
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
	global $base_url;
	
	/******************************************
	Add status bar showing completed parts at the top
	*******************************************/
	//dpm($form_state['saved_values']);

	$form['#prefix'] = '<style>
		.tgdr_form_status div {
			display: inline-block;
			padding: 3px;
			margin-right: 10px;
		}
		
		.tgdr_form_status div img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}
		
		.tgdr_form_status {
			padding: 5px;
			background-color: #ffffff;
			border: 1px solid #cccccc;
			border-radius: 4px;
                        margin-bottom: 10px;
		}
	
	</style>';
	$form['#prefix'] .= '<div class="tgdr_form_status">';
	
	/**** Page 1 ****/
	if(isset($form_state['saved_values']['Hellopage']) and $form_state['stage'] != 'Hellopage') {
            $image_fname = 'message-16-ok.png';
	}
        else{
            $image_fname = 'message-16-warning.png';
        }
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Author and Species Information</div>";
	
	/**** Page 2 ****/
        if($form_state['stage'] != 'secondPage' and !isset($form_state['saved_values']['secondPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'secondPage' and $form_state['saved_values']['secondPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Experimental Conditions</div>";	

	/**** Page 3 ****/
	if($form_state['stage'] != 'thirdPage' and !isset($form_state['saved_values']['thirdPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'thirdPage' and $form_state['saved_values']['thirdPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Tree Accession</div>";	
	
	/**** Page 4 ****/
	if($form_state['stage'] != 'fourthPage' and !isset($form_state['saved_values']['fourthPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'fourthPage' and $form_state['saved_values']['fourthPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Submit Data</div>";	
	
	$form['#prefix'] .= '</div>';
	
	/******************************************
	END of status bar code
	*******************************************/
    
    //dpm($user);
    if (isset($user->roles[1]) and $user->roles[1] == 'anonymous user'){
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (!isset($form_state['saved_values']['Hellopage']['primaryAuthor']) or !isset($form_state['saved_values']['Hellopage']['organization'])){
  	$and = db_and();
	$and->condition('value', $user->mail);
	$and->condition('type_id', '50268');
	$contact_id = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('contact_id'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$contact_id = $contact_id['contact_id'];
        $name = db_select('chado.contact', 'contact')
	    ->fields('contact', array('name'))
	    ->condition('contact_id', $contact_id)
	    ->execute()
	    ->fetchAssoc();
	$name = $name['name'];
	$form_state['saved_values']['Hellopage']['primaryAuthor'] = $name;
	$and = db_and();
	$and->condition('contact_id', $contact_id);
	$and->condition('type_id', '72');
	$org = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('value'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$org = $org['value'];
	$form_state['saved_values']['Hellopage']['organization'] = $org;
	//dpm($contact_id);
	//dpm($name);
	//dpm($org);
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        case 'summarypage':
            summary_create_form($form, $form_state);
            break;
        
        default:
            print_r('Invalid form stage.');
            break;
    }
    
    drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
    
    return $form;
}

function tpps_master_validate($form, &$form_state){
	
    if ($form_state['triggering_element']['#value'] == 'Back'){
        
        if ($form_state['stage'] == 'thirdPage'){
            if ($form_state['saved_values']['Hellopage']['organism']['number'] == '1' or $form_state['values']['tree-accession']['check'] == '0'){
                
                $form_state['values']['tree-accession']['file-columns'] = array();

                foreach ($form['tree-accession']['file']['columns'] as $col => $val){
                    if ($col[0] != '#'){
                        $form_state['values']['tree-accession']['file-columns'][$col] = $form['tree-accession']['file']['columns'][$col]['#value'];
                    }
                }
            }
            else {
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    
                    $form_state['values']['tree-accession']["species-$i"]['file-columns'] = array();

                    foreach ($form['tree-accession']["species-$i"]['file']['columns'] as $col => $val){
                        if ($col[0] != '#'){
                            $form_state['values']['tree-accession']["species-$i"]['file-columns'][$col] = $form['tree-accession']["species-$i"]['file']['columns'][$col]['#value'];
                        }
                    }
                }
            }
        }
        elseif ($form_state['stage'] == 'fourthPage'){
            if (isset($form['organism-1']['genotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    
                    if ($form_state['values']["organism-$i"]['genotype']['marker-type']['Other'] != '0' or $form_state['values']["organism-$i"]['genotype']['marker-type']['SSRs/cpSSRs'] != '0'){
                        $form_state['values']["organism-$i"]['genotype']['file-columns'] = array();

                        foreach ($form["organism-$i"]['genotype']['file']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']["organism-$i"]['genotype']['file-columns'][$col] = $form["organism-$i"]['genotype']['file']['columns'][$col]['#value'];
                            }
                        }
                    }
                    if ($form_state['values']["organism-$i"]['genotype']['ref-genome'] == 'manual'){
                        $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'] = array();

                        foreach ($form["organism-$i"]['genotype']['assembly-user']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'][$col] = $form["organism-$i"]['genotype']['assembly-user']['columns'][$col]['#value'];
                            }
                        }
                    }
                }
            }
            
            if (isset($form['organism-1']['phenotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){

                    $form_state['values']["organism-$i"]['phenotype']['file-columns'] = array();
                    
                    foreach ($form["organism-$i"]['phenotype']['file']['columns'] as $col => $val){
                        if ($col[0] != '#'){
                            $form_state['values']["organism-$i"]['phenotype']['file-columns'][$col] = $form["organism-$i"]['phenotype']['file']['columns'][$col]['#value'];
                        }
                    }
                }
            }
        }
        
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        default:
            break;
    }
    
    $errors = form_get_errors();
    if ($errors == NULL){
        $form_state['values']['#cleared'] = TRUE;
        //dpm($form_state['values']['#cleared']);
    }
    else {
        //dpm($errors);
        $form_state['values']['#cleared'] = FALSE;
    }
}

function tpps_master_submit($form, &$form_state){
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    
    switch ($form_state['stage']){
        case 'frontpage':
            $form_state['stage'] = 'Hellopage';
            break;
        
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'fourthPage';
            }
            break;
            
        case 'fourthPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'thirdPage';
            }
            else{
                $form_state['stage'] = 'summarypage';
            }
            break;
            
        case 'summarypage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'fourthPage';
            }
            else{
                dpm('submit');
                //submit_all($form, $form_state);
                variable_set('old_form_state', NULL);
                tpps_submit_email($form, $form_state);
                drupal_goto('<front>');
                return;
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
    
    variable_set('old_form_state', $form_state);
}

function tpps_submit_email($form, $form_state){
    
    global $user;
    
    $to = $user->mail;
    $from = "nginx@tgwebdev.cam.uchc.edu";
    $subject = "TPPS Submission Received";
    $message = 
"Congratulations!<br><br>

Your TPPS submission has been received and is pending approval from a TreeGenes administrator! Here's a brief summary of the information you provided:<ul>
    <li>Primary Author: {$form_state['saved_values']['Hellopage']['primaryAuthor']}</li>
    <li>Organization: {$form_state['saved_values']['Hellopage']['organization']}</li>
    <li>Publication title: {$form_state['saved_values']['Hellopage']['publication']['title']}</li>
    <li>Journal: {$form_state['saved_values']['Hellopage']['publication']['journal']}</li>
    <li>Organisms: {$form_state['saved_values']['Hellopage']['organism']['number']}</li>
";
    for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
        $message .= 
"   <li>Organism $i: {$form_state['saved_values']['Hellopage']['organism'][$i]['species']}</li>
";
    }
    $study_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    $data_options = array(
      '- Select -',
      'Genotype x Phenotype',
      'Genotype',
      'Genotype x Phenotype x Environment',
      'Phenotype x Environment',
      'Genotype x Environment'
    );
    $study_type = $study_options[$form_state['saved_values']['secondPage']['studyType']];
    $data_type = $data_options[$form_state['saved_values']['secondPage']['dataType']];
    $message .= 
"   <li>Study Type: $study_type</li>
    <li>Data Type: $data_type</li></ul>

If you have any questions about your submission, please feel free to contact us <a href='https://tgwebdev.cam.uchc.edu/Drupal/contactform'>here</a>.<br><br>
";
    
    $headers[] = 'MIME-Version: 1.0';
    $headers[] = 'Content-type: text/html; charset=iso-8859-1';

    // Additional headers
    $headers[] = "To: <$to>";
    $headers[] = "From: Nginx web server <$from>";
    
//    dpm($to);
//    dpm($subject);
//    dpm($message);
//    dpm($headers);
    
    mail($to, $subject, $message, implode("\r\n", $headers));
    
    return;
}

function submit_all($form, &$form_state){
    
    $dbxref_id = $form_state['dbxref_id'];
    $accession = $form_state['accession'];

    $values = $form_state['saved_values'];
    $firstpage = $values['Hellopage'];

    $project_id = tpps_create_record('tpps_project', 'tpps_project_id', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));

    $project_dbxref_id = tpps_create_record('tpps_project_dbxref', 'tpps_project_dbxref_id', array(
      'project_id' => $project_id,
      'dbxref_id' => $dbxref_id
    ));

    $primary_author_id = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
      'name' => $firstpage['primaryAuthor'],
      'type_id' => '71',
    ));

    $author_string = $firstpage['primaryAuthor'];
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){
        $secondary_author_ids = array();

        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $secondary_author_ids[$i] = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
              'name' => $firstpage['publication']['secondaryAuthors'][$i],
              'type_id' => '71'
            ));
            $author_string .= ", {$firstpage['publication']['secondaryAuthors'][$i]}";
        }
    } elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0) {
        $secondary_author_file = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($firstpage['publication']['secondaryAuthors']['file'])->uri)
        ));
    }

    switch ($firstpage['publication']['status']){
        case ('2'):
            $pub_year = $firstpage['publication']['yearSubmitted'];
            break;
        case ('3'):
            $pub_year = $firstpage['publication']['yearInPress'];
            break;
        case ('4'):
            $pub_year = $firstpage['publication']['yearPublished'];
            break;
        default: 
            $pub_year = "";
            break;
    }

    $publication_id = tpps_create_record('tpps_pub', 'tpps_pub_id', array(
      'title' => $firstpage['publication']['title'],
      'series_name' => $firstpage['publication']['journal'],
      'type_id' => '229',
      'pyear' => $pub_year,
      'uniquename' => "$author_string {$firstpage['publication']['title']}. {$firstpage['publication']['journal']}; $pub_year"
    ));

    $project_pub_id = tpps_create_record('tpps_project_pub', 'tpps_project_pub_id', array(
      'project_id' => $project_id,
      'pub_id' => $publication_id
    ));

    $organization_id = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
      'name' => $firstpage['organization'],
      'type_id' => '72',
    ));

    $names = explode(" ", $firstpage['primaryAuthor']);
    $first_name = $names[0];
    $last_name = implode(" ", array_slice($names, 1));

    $pubauthor_id = tpps_create_record('tpps_pubauthor', 'tpps_pubauthor_id', array(
      'pub_id' => $publication_id,
      'rank' => '1',
      'surname' => $last_name,
      'givennames' => $first_name
    ));

    $organism_ids = array();
    $organism_number = $firstpage['organism']['number'];

    for ($i = 1; $i <= $organism_number; $i++){
        $parts = explode(" ", $firstpage['organism'][$i]['species']);
        $organism_ids[$i] = tpps_create_record('tpps_organism', 'tpps_organism_id', array(
          'genus' => $parts[0],
          'species' => implode(" ", array_slice($parts, 1)),
        ));
    }
    /***************************
     * Second Page submissions *
     ***************************/

    $secondpage = $values['secondPage'];

    $month_options = array(
      '0' => '- Select -',
      '1' => 'January',
      '2' => 'February',
      '3' => 'March',
      '4' => 'April',
      '5' => 'May',
      '6' => 'June',
      '7' => 'July',
      '8' => 'August',
      '9' => 'September',
      '10' => 'October',
      '11' => 'November',
      '12' => 'December'
    );

    $start = $month_options[$secondpage['StartingDate']['month']] . " " . $secondpage['StartingDate']['year'];
    $end = $month_options[$secondpage['EndingDate']['month']] . " " . $secondpage['EndingDate']['year'];

    $start_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '127996',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $start
    ));
    
    $end_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '127997',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $end
    ));
    
    if ($secondpage['studyLocation']['type'] !== '2'){
        $location = $secondpage['studyLocation']['latitude'] . ' Latitude, ' . $secondpage['studyLocation']['longitude'] . ' Longitude';
    }
    else{
        $location = $secondpage['studyLocation']['customLocation']['region'] . ', ' . $secondpage['studyLocation']['customLocation']['country'];
    }
    
    $study_location_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '127998',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $location
    ));
    
    $datatype_options = array(
      '0' => '- Select -',
      '1' => 'Genotype x Phenotype',
      '2' => 'Genotype',
      '3' => 'Genotype x Phenotype x Environment',
      '4' => 'Phenotype x Environment',
      '5' => 'Genotype x Environment'
    );
    
    $datatype = $datatype_options[$secondpage['dataType']];
    
    $datatype_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '54740',
      'value' => $datatype
    ));
    
    $studytype_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    
    $study_type = $studytype_options[$secondpage['studyType']];
    
    $study_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '128021',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
      'value' => $study_type
    ));
    
    /******************************************
     * Specific Questions based on study type *
     ******************************************/
    
    switch($secondpage['studyType']){
        case ('1'):
            $natural_population = $secondpage['naturalPopulation'];
            $number_assessions = $natural_population['assessions'];
            $seasons = "";
            foreach ($natural_population['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            break;
        case ('2'):
            $growth_chamber = $secondpage['growthChamber'];
            $co2 = $growth_chamber['co2Control'];
            $humidity = $growth_chamber['humidityControl'];
            $light = $growth_chamber['lightControl'];
            $temp_high = $growth_chamber['temp']['high'];
            $temp_low = $growth_chamber['temp']['low'];
            $rooting = $growth_chamber['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($co2['option'] == '1'){
                $co2_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $co2_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['controlled']
                ));
            }
            else{
                $co2_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $co2_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['uncontrolled']
                ));
            }

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['uncontrolled']
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['uncontrolled']
                ));
            }

            $temp_high_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['uncontrolled']
                ));
            }

            $treatment_ids = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('3'):
            $greenhouse = $secondpage['greenhouse'];
            $humidity = $greenhouse['humidityControl'];
            $light = $greenhouse['lightControl'];
            $temp_high = $greenhouse['temp']['high'];
            $temp_low = $greenhouse['temp']['low'];
            $rooting = $greenhouse['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $temp_high_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('4'):
            $commonGarden = $secondpage['commonGarden'];
            $salinity = $commonGarden['salinity'];
            $biotic_env = $commonGarden['bioticEnv']['option'];
            $seasons = "";
            $treatments = $commonGarden['treatment'];

            $irrigation_options = array(
              0 => '- Select -',
              1 => 'Irrigation from top',
              2 => 'Irrigation from bottom',
              3 => 'Drip Irrigation',
              4 => 'Other',
              5 => 'No Irrigation',
            );
            $irrigation_type = $irrigation_options[$commonGarden['irrigation']['option']];
            if ($irrigation_type == 'Other'){
                $irrigation_type = $commonGarden['irrigation']['other'];
            }
            
            $irrigation_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128016',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $irrigation_type
            ));

            if ($salinity['option'] == '1'){
                $salinity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $salinity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['controlled']
                ));
            }
            else{
                $salinity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $salinity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['uncontrolled']
                ));
            }

            $biotic_env['Other'] = $commonGarden['bioticEnv']['other'];
            $biotic_env_id = array();
            foreach ($biotic_env as $key => $check){
                if ($check == '1'){
                    $biotic_env_id[$key] = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128019',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $key
                    ));
                }
            }

            foreach ($commonGarden['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            $season_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('5'):
            $plantation = $secondpage['plantation'];
            $number_assessions = $plantation['assessions'];
            $seasons = "";
            $treatments = $plantation['treatment'];
            
            foreach ($plantation['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            
            if ($plantation['treatment']['check'] != 0){
                $treatment_id = array();
                $is_description = FALSE;
                $rank = 0;
                foreach ($treatments as $item){
                    if (!$is_description){
                        if ($item == '1'){
                            $record_next = TRUE;
                        }
                        else{
                            $record_next = FALSE;
                        }
                        $is_description = TRUE;
                    }
                    else{
                        if ($record_next){
                            array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                              'project_id' => $project_id,
                              'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $item,
                              'rank' => $rank
                            )));
                            $rank++;
                        }
                        $is_description = FALSE;
                    }
                }
            }
            break;
        default:
            break;
    }
    /**************************
     * Third Page submissions *
     **************************/
    
    $thirdpage = $values['thirdPage'];
    $fourthpage = $values['fourthPage'];
    
    if ($organism_number == '1' or $thirdpage['tree-accession']['check'] == 0){
        $tree_accession_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($thirdpage['tree-accession']['file'])->uri)
        ));
    }
    else {
        for($i = 0; $i < $organism_number; $i++){
            $tree_accession_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($thirdpage['tree-accession']["species-$i"]['file'])->uri)
            ));
        }
    }
    
    /***************************
     * Fourth Page submissions *
     ***************************/
    
    //these are messy. File parsing will clean them up. currently, all file paths are being stored in the chado.projectprop table.
    //it will be better when they can be stored in genotypeprop or phenotypeprop, but that required file parsing first.
    
    for ($i = 0; $i < $organism_number; $i++){
        
        if (isset($fourthpage["organism-$i"]['phenotype'])){
            $phenotype = $fourthpage["organism-$i"]['phenotype'];
            $phenotype_number = $phenotype['number'];
            
            if ($phenotype['check'] !== '1'){
                $phenotype_ids = array();
                for ($j = 1; $j < $phenotype_number; $j++){
                    $current_phenotype = $phenotype[$j];
                    
                    $phenotype_ids[$j] = tpps_create_record('tpps_phenotype', 'tpps_phenotype_id', array(
                      'uniquename' => $current_phenotype['name']
                    ));
                    
                    $unit_options = array(
                      0 => '- Select -',
                      1 => 'mm', 
                      2 => 'cm',
                      3 => 'm', 
                      4 => 'Degrees Celsius',
                      5 => 'Degrees Fahrenheit',
                      6 => 'Other'
                    );
                    
                    if ($current_phenotype['environment-check'] == '1'){
                        $environment = $current_phenotype['environment'];
                        
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '2834',
                          'value' => $environment['description']
                        ));
                        
                        if ($environment['units'] !== '6'){
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $unit_options[$environment['units']]
                            ));
                        }
                        else {
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $environment['units-other']
                            ));
                        }
                        
                    }
                    else {
                        $non_environment = $current_phenotype['non-environment'];
                        
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '2834',
                          'value' => $non_environment['description']
                        ));
                        
                        if ($non_environment['units'] !== '6'){
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $unit_options[$non_environment['units']]
                            ));
                        }
                        else {
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $non_environment['units-other']
                            ));
                        }
                        
                        $type = $non_environment['type'];
                        $structure = $non_environment['structure'];
                        $developmental = $non_environment['developmental'];
                        
                        if ($type === '1'){
                            $binary_1 = $non_environment['binary'][1];
                            $binary_2 = $non_environment['binary'][2];
                            
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '128023',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $binary_1
                            ));
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '128023',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $binary_2
                            ));
                        }
                        elseif ($type === '2'){
                            $min = $non_environment['quantitative']['min'];
                            $max = $non_environment['quantitative']['max'];

                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '52214',
                              'value' => $min
                            ));
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '52213',
                              'value' => $max
                            ));
                        }
                        
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '50292',
                          'value' => $structure
                        ));
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '50292',
                          'value' => $developmental
                        ));
                    }
                }
            }
            else{
                $phenotype_file_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($phenotype['metadata'])->uri)
                ));
            }
            
            
        }
        
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $genotype = $fourthpage["organism-$i"]['genotype'];
            
            if ($genotype['ref-genome'] == 'url'){
                $reference_genome_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '1912',
                  'value' => $genotype['ref-genome-other']
                ));
            }
            elseif ($genotype['ref-genome'] == 'bio'){
                $project_dbxref_id = tpps_create_record('tpps_project_dbxref', 'tpps_project_dbxref_id', array(
                  'project_id' => $project_id,
                  'dbxref_id' => $genotype['BioProject-id'],
                ));
                
                $bioproject_assembly_file_ids = array();

                foreach ($genotype['assembly-auto'] as $item){
                    if ($item !== '0'){
                        array_push($bioproject_assembly_file_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '2836',
                          'value' => "https://www.ncbi.nlm.nih.gov/nuccore/$item"
                        )));
                    }
                }
            }
            elseif ($genotype['ref-genome'] == 'manual'){
                $assembly_user = $genotype['assembly-user'];
                $assembly_user_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($assembly_user)->uri)
                ));
            }
            else {
                $reference_genome_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '1912',
                  'value' => $genotype['ref-genome']
                ));
            }
            
            if ($genotype['marker-type']['SSRs/cpSSRs'] != '0' or $genotype['marker-type']['Other'] != '0'){
                $genotype_file_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['file']))
                ));
            }
                
            if ($genotype['marker-type']['SNPs'] != '0'){
                $genotype_vcf_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['vcf']))
                ));
            }
        }
    }
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function _species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function _phenotype_autocomplete($string){
    $matches = array();
    
    $result = db_select('chado.phenotype', 'phenotype')
        ->fields('phenotype', array('name'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function parse_xlsx($location){
    
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    //need to use this path for the vm
    //$dir = '/var/www/html/Drupal/sites/default/files';
    //need to use this path for the dev server
    $dir = '/var/www/Drupal/sites/default/files';
    
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;

    foreach ($xlrows as $xlrow) {
        $arr = array();
        
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if (!isset($headers)) {
            $headers = $arr;
            $content['headers'] = $headers;
        } 
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content[] = $row;
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function front_create_form(&$form, $form_state){
    
    global $base_url;
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Continue to TPPS'),
      '#prefix' => 
"<div>
Welcome to TPPS!<br><br>
The Tripal PopGen Submit (TPPS) workflow provides researchers with a streamlined submission interface for studies resulting from any combination of genotype, phenotype, and environmental data for georeferenced forest trees.  TPPS will guide users through questions about their study design and data in order to collect information on trees, genotypes, and phenotypes if applicable.  Phenotypic, genotypic, and environmental descriptors will be mapped to ontologies were possible and the collected metadata will enable this information to be displayed in <a href='$base_url/cartogratree' target='blank'>CartograTree</a>.  An accession number will be provided to the user following successful completion that uniquely identified this study in the database.  This number should be used in the manuscript describing this work.  Specific flat-files and metadata associated with this identifier can be accessed by the public with this information.<br><br>
To get started, you will need to have a few things handy:<br>
<ul>
    <li>An enabled and approved TreeGenes account - you can create one <a href='$base_url/user/register'>here</a>. There may be a waiting period to have your account approved by a TreeGenes administrator.</li>
    <li>Information about the paper connected to your study, and the organisms being studied. This must include at least the following:
        <ul>
            <li>Primary author of the publication</li>
            <li>Organization of the Primary Author</li>
            <li>Publication year</li>
            <li>Publication title</li>
            <li>Publication abstract</li>
            <li>Journal the publication can be found in</li>
            <li>Genus and species of the organism(s) being studied</li>
        </ul>
    </li>
    <li>Metadata about the study itself. This must include at least the following:
        <ul>
            <li>Dates when the study took place (month, year)</li>
            <li>The location of the study (coordinates or country/region)</li>
            <li>Type of study (natural population, growth chamber, common garden, etc.)</li>
            <li>Type of data collected (some combination of genotype, phenotype, and environmental)</li>
            <li>Relevant quantitative information based on the type of study, such as the seasons of a natural population study, or the soil pH of a growth chamber study</li>
        </ul>
    </li>
    <li>Geographic locations of the trees (for common garden studies, this would be the location of the source tree). This should be a spreadsheet with a column for tree identifiers and column(s) for the location of each tree.</li>
    <li>Genotypic and/or phenotypic data and metadata (depending on the type(s) of data collected).</li>
</ul>
If you would like to submit your data, you can click the button 'Continue to TPPS' below!<br><br>
</div>" 
    );
    
    return $form;
}

function summary_create_form(&$form, $form_state){
    
    $form['Back'] = array(
      '#type' => 'submit',
      '#value' => t('Back'),
    );
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
    
    return $form;
}

function tpps_test_page($form, &$form_state){
    
    $form['vcf'] = array(
      '#type' => 'managed_file',
      '#title' => 'vcf',
      '#upload_location' => 'public://',
      '#tree' => TRUE
    );
    
    $form['file'] = array(
      '#type' => 'managed_file',
      '#title' => 'file',
      '#upload_location' => 'public://',
      '#tree' => TRUE
    );
    
    $form['file']['columns'] = array(
      '#type' => 'fieldset',
      '#title' => t('<h2>Columns</h2>'),
      '#description' => 'Please define which columns hold the required data:'
    );
    
    $file = 0;
    if (isset($form_state['values']['file']) and $form_state['values']['file'] != 0){
        $file = $form_state['values']['file'];
    }

    if ($file != 0){
        $file = file_load($file);
        $file_name = explode('//', $file->uri);
        $file_name = $file_name[1];

        //vm
        $location = "/var/www/html/Drupal/sites/default/files/$file_name";
        //dev site
        //$location = "/var/www/Drupal/sites/default/files/$file_name";
        $content = fopen($file->uri, 'r');
        
        $first = TRUE;
        
        $column_options = array(
          'N/A',
          'Scaffold/Chromosome',
        );
        $headers = array();
        
        for ($i = 0; $i < 3; $i++){
            $line = fgets($content);
            //dpm($line);
            $line = explode(' ', $line);
            
            if ($first){
                foreach ($line as $col){
                    $headers[$col] = $col;
                    $form['file']['columns'][$col] = array(
                      '#type' => 'select',
                      '#title' => '',
                      '#options' => $column_options,
                      '#prefix' => "<td>",
                      '#suffix' => "</td>"
                    );
                    
                    if ($first){
                        $first = FALSE;
                        $form['file']['columns'][$col]['#prefix'] = "<div><table border='1'><tbody><tr>" . $form['file']['columns'][$col]['#prefix'];
                    }
                }
                $display = "<tr>";
            }
            if ($line[0][0] == '>'){
                $display .= "<tr>";
                for ($j = 0; $j < count($headers); $j++){
                    $display .= "<th>{$line[$j]}</th>";
                }
                $display .= "</tr>";
            }
            elseif (!isset($line)){
                break;
            }
            else{
                $i--;
            }
            
        }
        $form['file']['columns'][$col]['#suffix'] .= $display;
    }
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
    );
    
    return $form;
}

function tpps_test_page_validate($form, &$form_state){
    
    $vcf = $form_state['values']['vcf'];
    $assembly = $form_state['values']['file'];
    $scaffold_col = 3;
    
    $vcf_content = fopen(file_load($vcf)->uri, 'r');
    
    while (($vcf_line = fgets($vcf_content)) !== FALSE){
        if ($vcf_line[0] != '#'){
            
            $assembly_content = fopen(file_load($assembly)->uri, 'r');
            $vcf_values = explode("\t", $vcf_line);
            $scaffold_id = $vcf_values[0];
            $match = FALSE;
            
            while (($assembly_line = fgets($assembly_content)) !== FALSE){
                if ($assembly_line[0] != '>'){
                    continue;
                }
                else{
                    $assembly_values = explode(' ', $assembly_line);
                    $assembly_scaffold = $assembly_values[$scaffold_col];
                    if ($assembly_scaffold == $scaffold_id){
                        $match = TRUE;
                        break;
                    }
                }
            }
            
            fclose($assembly_content);
            
            if (!$match){
                dpm($scaffold_id);
                form_set_error('file', "VCF File: scaffold $scaffold_id not found in assembly file(s)");
            }
            else {
                dpm("matched: $scaffold_id");
            }
        }
    }
    
    /*for ($i = 0; $i < 500; $i++){
        $file = file_load($i);
        if ($file){
            //dpm($i);
            //dpm($file->uri);
            if (substr($file->filename, 0, 5) === 'ssrs_'){
                dpm($i);
                dpm($file->filename);
                //file_delete($file);
            }
        }
    }*/
    
    form_set_error('Next', 'error');
}

function tpps_test_page_submit($form, &$form_state) {
    
}

function tpps_block_info() { 
  dpm("BLOCK INFO");   
  $blocks['tpps_status'] = array(
    // info: The name of the block.
    'info' => t('TPPS Status'),
  );

  return $blocks;
}

/***********************
This was supposed to be the function to display the block
But as usual with Drupal, things work and things just don't
work.
***********************/
function ttps_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  //dpm("TPPS Block executed");
  //$block = array();
  
  /*
  switch ($delta) {
    case 'tpps_status':
      // Create your block content here
		$block['subject'] = t('My last 3 news');
		$block['content'] = t('This is the content');
		
		break;
   }
  return $block;]
  */
}

function tpps_block_view_alter(&$data, $block) {
	//dpm($block);
	//dpm($data);
	global $base_url;
  switch ($block->delta) {
    case 'tpps_status':
		//dpm($_REQUEST);
		
		$css = "
		.tgdr_status_block img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}		
		";
		drupal_add_css($css, 'inline');
		
	  	$data['subject'] = t('TPPS Status');
		$content = "<div class='tgdr_status_block'>";
		global $user;
		
                //dpm($_SESSION);
		//Don't get mix upload
		if(count($_REQUEST) <= 0) {
			unset($_SESSION['tgdr_submit_data']);
		}
		
		//This deals with page 1
		if(isset($_REQUEST['primaryAuthor'])) {
			unset($_SESSION['tgdr_submit_data']);
			$_SESSION['tgdr_submit_data'][0] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['primaryAuthor'])) {
			$content .= "Step 1 - Complete<br />";
			$content .= "Author/Species Information<hr />";
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Author: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['primaryAuthor'])) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['organization'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Organization: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['organization'])) . "<br />";
		}	
		if(isset($_SESSION['tgdr_submit_data'][0]['publication']['title'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Pub Title: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['publication']['title'])) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['publication']['yearInPress'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Pub Year: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['publication']['yearInPress'])) . "<br />";
		}	
		if(isset($_SESSION['tgdr_submit_data'][0]['publication']['secondaryAuthors']['number'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Secondary Authors: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['publication']['secondaryAuthors']['number'])) . "<br />";
		}
                $organism_number = (isset($_SESSION['tgdr_submit_data'][0]['organism']['number'])) ? $_SESSION['tgdr_submit_data'][0]['organism']['number'] : NULL;
		if(isset($organism_number)) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Organisms: '. filter_xss(check_plain($organism_number)) . "<br />";
		}	

		//This deals with page 2
		if(isset($_REQUEST['StartingDate'])) {
			if(isset($_SESSION['tgdr_submit_data'][1])) {
				unset($_SESSION['tgdr_submit_data'][1]);
			}
			$_SESSION['tgdr_submit_data'][1] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
		}
		//dpm($_SESSION['tgdr_submit_data']);
		if(isset($_SESSION['tgdr_submit_data'][1]['StartingDate']) and $_SESSION['tgdr_submit_data'][1]['StartingDate']['month'] != 0 and $_SESSION['tgdr_submit_data'][1]['StartingDate']['year'] != 0) {
			$content .= "<br />";
			$content .= "Step 2 - Complete<br />";
			$content .= "Experimental Conditions<br /><hr />";
                        $start = $_SESSION['tgdr_submit_data'][1]['StartingDate']['month'] . "/" . $_SESSION['tgdr_submit_data'][1]['StartingDate']['year'];
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Starting Date: ' . filter_xss(check_plain($start)) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][1]['EndingDate']) and $_SESSION['tgdr_submit_data'][1]['EndingDate']['month'] != 0 and $_SESSION['tgdr_submit_data'][1]['EndingDate']['year'] != 0) {
                        $end = $_SESSION['tgdr_submit_data'][1]['EndingDate']['month'] . "/" . $_SESSION['tgdr_submit_data'][1]['EndingDate']['year'];
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Ending Date: ' . filter_xss(check_plain($end)) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][1]['studyLocation']) and $_SESSION['tgdr_submit_data'][1]['studyLocation']['type'] != 0) {
                        $location = $_SESSION['tgdr_submit_data'][1]['studyLocation'];
                        if ($location['type'] == '2'){
                            $region = $location['customLocation']['region'];
                            $country = $location['customLocation']['country'];
                            $location = ($region != '') ? "$region, " : "";
                            $location .= $country;
                        }
                        else {
                            $location = $location['latitude'] . " lat, " . $location['longitude'] . " long";
                        }
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Study Location: ' . filter_xss(check_plain($location)) .  "<br />";
		}
                if(isset($_SESSION['tgdr_submit_data'][1]['studyType']) and $_SESSION['tgdr_submit_data'][1]['studyType'] != 0) {
                        $type = $_SESSION['tgdr_submit_data'][1]['studyType'];
                        $type_arr = array(
                          0 => '- Select -',
                          1 => 'Natural Population (Landscape)',
                          2 => 'Growth Chamber',
                          3 => 'Greenhouse',
                          4 => 'Experimental/Common Garden',
                          5 => 'Plantation',
                        );
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Study Type: ' . filter_xss(check_plain($type_arr[$type])) .  "<br />";
		}
                if(isset($_SESSION['tgdr_submit_data'][1]['dataType']) and $_SESSION['tgdr_submit_data'][1]['dataType'] != 0) {
                        $type = $_SESSION['tgdr_submit_data'][1]['dataType'];
                        $type_arr = array(
                          '- Select -',
                          'Genotype x Phenotype',
                          'Genotype',
                          'Genotype x Phenotype x Environment',
                          'Phenotype x Environment',
                          'Genotype x Environment'
                        );
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Data Type: ' . filter_xss(check_plain($type_arr[$type])) .  "<br />";
		}

		//This deals with page 3
		if(isset($_REQUEST['tree-accession'])) {
			if(isset($_SESSION['tgdr_submit_data'][2])) {
				unset($_SESSION['tgdr_submit_data'][2]);
			}
			$_SESSION['tgdr_submit_data'][2] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
		}		
		if(isset($_SESSION['tgdr_submit_data'][2]['tree-accession']) and ($_SESSION['tgdr_submit_data'][2]['tree-accession']['file']['fid'] != 0 or $_SESSION['tgdr_submit_data'][2]['tree-accession']['species-1']['file']['fid'] != 0)) {
			$content .= "<br />";
			$content .= "Step 3 - Complete<br />";
			$content .= "Tree Accession<br /><hr />";
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Tree Accession data' .  "<br />";
		}
		
                //This deals with page 4
                if(isset($_REQUEST['organism-1']['genotype']) or isset($_REQUEST['organism-1']['phenotype'])) {
			if(isset($_SESSION['tgdr_submit_data'][3])) {
				unset($_SESSION['tgdr_submit_data'][3]);
			}
			$_SESSION['tgdr_submit_data'][3] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
                }
                for ($i = 1; $i <= $organism_number; $i++){
                    $current_name = $_SESSION['tgdr_submit_data'][0]['organism'][$i]['species'];
                    if(isset($_SESSION['tgdr_submit_data'][3]["organism-$i"])) {
                            $content .= "<br />";
                            $content .= "Step 4 - Complete<br />";
                            $content .= "Submit Data<br /><hr />";
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> " . filter_xss(check_plain($current_name)) .  "<br />";
                    }
                    if(isset($_SESSION['tgdr_submit_data'][3]["organism-$i"]['genotype']) and isset($_SESSION['tgdr_submit_data'][3]["organism-$i"]['genotype']['marker-type'])) {
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> " . filter_xss(check_plain($current_name)) .  " Genotypic Data<br />";
                    }
                    if(isset($_SESSION['tgdr_submit_data'][3]["organism-$i"]['genotype']['file']) and $_SESSION['tgdr_submit_data'][3]["organism-$i"]['genotype']['file']['fid'] != 0) {
                            $genotype_file_name = file_load($_SESSION['tgdr_submit_data'][3]["organism-$i"]['genotype']['file']['fid'])->filename;
                            $genotype_url = check_plain(file_create_url(file_load($_SESSION['tgdr_submit_data'][3]["organism-$i"]['genotype']['file']['fid'])->uri));
                            $content .= "<img src='$base_url/misc/message-16-ok.png'>Genotype File: <a href='$genotype_url' target='blank'>$genotype_file_name</a><br />";
                    }
                    if(isset($_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype']) and ($_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype'][1]['name'] != '' or $_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype']['metadata']['fid'] != 0)) {
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> " . filter_xss(check_plain($current_name)) .  " Phenotypic Data<br />";
                    }
                    if(isset($_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype']['file']) and $_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype']['file']['fid'] != 0) {
                            $phenotype_file_name = file_load($_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype']['file']['fid'])->filename;
                            $phenotype_url = check_plain(file_create_url(file_load($_SESSION['tgdr_submit_data'][3]["organism-$i"]['phenotype']['file']['fid'])->uri));
                            $content .= "<img src='$base_url/misc/message-16-ok.png'>Phenotype File: <a href='$phenotype_url' target='blank'>$phenotype_file_name</a><br />";
                    }
                    $content .= "<hr />";
                }
		
                
		
		$content .= "</div>";
		$data['content'] = t($content);
		
       break;
  }
}
