<?php

/**
 * @file
 * Core of the TPPS module.
 */

define("TPPS_MAJOR_VERSION", 1);
define("TPPS_MINOR_VERSION", 2);
define("TPPS_JS_PATH", '/js/tpps.js');
define("TPPS_CSS_PATH", '/css/tpps.css');
define("TPPS_PAGE_1", 1);
define("TPPS_PAGE_2", 2);
define("TPPS_PAGE_3", 3);
define("TPPS_PAGE_4", 4);
define("TPPS_TEMP_XLSX", "temporary://tpps_xlsx");
define("TPPS_TEMP_ZIP", "temporary://tpps_zip");
define("TPPS_OLS_BASE", "http://www.ebi.ac.uk/ols/api/");
require_once 'includes/display.inc';
require_once 'includes/chado_utils.inc';
require_once 'includes/init_project.inc';
require_once 'includes/standard_coord.inc';
require_once 'includes/cron.inc';
require_once 'includes/file_utils.inc';
require_once 'includes/submit_email.inc';
require_once 'includes/status_bar.inc';
require_once 'includes/accession_coordinates.inc';
require_once 'includes/submissions.inc';
require_once 'includes/zenodo.inc';
require_once 'includes/match_trees.inc';
require_once 'includes/ncbi_utils.inc';
require_once 'includes/form_utils.inc';
require_once 'includes/details.inc';
require_once 'includes/cvterm_utils.inc';
require_once 'includes/synonym.inc';
require_once 'api/tpps.api.inc';

/**
 * Implements hook_menu().
 */
function tpps_menu() {

  $items = array();

  $items['tpps'] = array(
    'title' => 'Tripal Plant PopGen Submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_main'),
    'access arguments' => array('access content'),
    // 'access callback' => 'tpps_access',
    // 'access arguments' => array('access tpps form'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps/%'] = array(
    'title' => 'Tripal Plant PopGen Submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_main', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('access tpps form', 1),
    'type' => MENU_NORMAL_ITEM,
  );



  $items['tpps/%/pre-validate'] = array(
    'title' => 'TPPS File Pre-Validation',
    'page callback' => 'tpps_pre_validate_init',
    'page arguments' => array(1),
    'access callback' => 'tpps_access',
    'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  $items['tpps/%/pre-validate/%/status'] = array(
    'title' => 'TPPS File Pre-Validation',
    'page callback' => 'tpps_pre_validate_status',
    'page arguments' => array(1, 3),
    'access callback' => 'tpps_access',
    'access arguments' => array('access tpps form', 1),
    'type' => MENU_CALLBACK,
  );

  $items['tpps/%/edit-publication'] = array(
    'title' => 'TPPS Edit Publication Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_submission_edit_publication', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('view own tpps submission', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps/details'] = array(
    'title' => 'TPPS Details',
    'page callback' => 'tpps_details',
    'page arguments' => array(),
    'access callback' => 'tpps_access',
    'access arguments' => array('access tpps details'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps/details/top'] = $items['tpps/details'];
  $items['tpps/details/top']['page callback'] = 'tpps_details_top_callback';
  $items['tpps/details/top']['type'] = MENU_CALLBACK;

  $items['tpps/details/%'] = $items['tpps/details'];
  $items['tpps/details/%']['page arguments'] = array(2);

  $items['tpps/details/%/%'] = $items['tpps/details/%'];
  $items['tpps/details/%/%']['page arguments'] = array(2, 3);
  $items['tpps/details/%/%']['page callback'] = 'tpps_details_tab';
  $items['tpps/details/%/%']['type'] = MENU_CALLBACK;

  $items['user/%/tpps'] = array(
    'title' => 'TPPS Submissions',
    'page callback' => 'tpps_tab_create',
    'page arguments' => array(1),
    'access callback' => 'tpps_access',
    'access arguments' => array('user tpps submissions', 1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['tpps-submission/%/delete'] = array(
    'title' => 'TPPS Delete Submission',
    'page callback' => 'tpps_delete_submission',
    'page arguments' => array(1),
    'access callback' => 'tpps_access',
    'access arguments' => array('tpps delete submission', 1),
    'type' => MENU_CALLBACK,
  );

  $items['completed-submission/%'] = array(
    'title' => 'TPPS Completed Submission',
    'page callback' => 'tpps_completed_display',
    'page arguments' => array(1),
    'access callback' => 'tpps_access',
    'access arguments' => array('view own tpps submission', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps-admin-panel'] = array(
    'title' => 'TPPS Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_panel'),
    'access callback' => 'tpps_access',
    'access arguments' => array('approve tpps submissions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/panel.php',
  );

  $items['tpps-admin-panel/refresh-genotypes-materialized-views'] = array(
    'title' => 'TPPS Refresh Genotypes Materialized Views',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_manage_generate_all_materialized_views', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('approve tpps submissions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/panel.php',
  );

  $items['tpps-admin-panel/%'] = array(
    'title' => 'TPPS Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_panel', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('approve tpps submissions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/panel.php',
  );

  // Synonym Reports.
  $items['tpps-admin-panel/phenotype-synonyms/no-synonyms'] = [
    'title' => 'Phenotypes without synonyms',
    'page callback' => 'tpps_admin_no_synonym_report',
    'access callback' => 'tpps_access',
    'access arguments' => ['administer tpps module'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/report.no_synonym.inc',
  ];
  $items['tpps-admin-panel/phenotype-synonyms/unit-warning'] = [
    'title' => 'Unit Warning',
    'page callback' => 'tpps_admin_unit_warning_report',
    'access callback' => 'tpps_access',
    'access arguments' => ['administer tpps module'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/report.unit_warning.inc',
  ];

  $items['tpps-admin-panel-logs/%'] = array(
    'title' => 'TPPS Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_panel_logs', 1),
    'access callback' => 'tpps_access',
    'access arguments' => array('approve tpps submissions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/logs.php',
  );

  $items['tpps-admin-panel/file-diagnostics/%'] = array(
    'title' => 'TPPS Admin Panel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_files_diagnostics_page', 2),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/pages.php',
  );


  $items['tpps/doi/%'] = array(
    'title' => 'TPPS DOI',
    'page callback' => 'tpps_manage_doi',
    'page arguments' => array(2),
    'access callback' => 'tpps_access',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/manage_doi.inc',
  );

  $items['admin/config/content/tpps'] = array(
    'title' => 'TPPS Settings',
    'description' => 'Configuration for TPPS module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_admin_settings'),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/config.php',
  );

  $items['tpps/autocomplete/%'] = array(
    'title' => 'TPPS Autocomplete',
    'description' => 'Autocomplete functions for TPPS module',
    'page callback' => 'tpps_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'tpps_access',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ajax/tpps_ajax.php',
  );

  /*
   * Ajax Callback for accession coordinates.
   */
  $items['tpps-accession'] = array(
    'title' => 'TPPS Accession coordinates',
    'page callback' => 'tpps_accession_coordinates',
    'access callback' => 'tpps_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tpps-preview-file'] = array(
    'title' => 'TPPS Preview File',
    'page callback' => 'tpps_preview_file',
    'access callback' => 'tpps_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tpps-tag'] = array(
    'title' => 'TPPS Submission Tags',
    'page callback' => 'tpps_submission_tag_manage',
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps-tag/create'] = array(
    'title' => 'Create new TPPS Submission Tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_submission_tag_create'),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['tpps-tag/edit/%'] = array(
    'title' => 'TPPS Edit Tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpps_submission_tag_edit', 2),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['tpps-tag/%/%/%'] = array(
    'title' => 'TPPS Add/Remove Tag',
    'page callback' => 'tpps_submission_add_remove_tag',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'tpps_access',
    'access arguments' => array('administer tpps module'),
    'type' => MENU_CALLBACK,
  );

  $items['snp-assay-file/upload'] = array(
    'title' => 'Autocomplete for snp files',
    'page callback' => 'tpps_snpassay_file_selector',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  // [VS] Synonym and Unit reports.
  $items['admin/reports/unit-warning'] = [
    'title' => 'Unit Warning',
    'description' => "List of Phenotypes which differs from Synonym's Unit.",
    'page callback' => 'tpps_admin_unit_warning_report',
    'access callback' => 'tpps_access',
    'access arguments' => ['administer tpps module'],
    'file' => 'includes/report.unit_warning.inc',
  ];
  $items['admin/reports/no-synonym'] = [
    'title' => 'Phenotypes without Synonym',
    'description' => "List of phenotypes without synonym.",
    'page callback' => 'tpps_admin_no_synonym_report',
    'access callback' => 'tpps_access',
    'access arguments' => ['administer tpps module'],
    'file' => 'includes/report.no_synonym.inc',
  ];
  $items['admin/reports/no-synonym/name/%'] = [
    'title' => 'Specific Phenotype Name',
    'description' => 'Specific Phenotype Name Report',
    'page callback' => 'tpps_admin_no_synonym_name_report',
    'page arguments' => [4],
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => ['administer tpps module'],
    'file' => 'includes/report.no_synonym.inc',
  ];
  // [/VS]

  $items = array_merge($items, tpps_api_paths());

  return $items;
}

/**
 * Implements hook_permission().
 *
 * Defines custom TPPS permissions.
 */
function tpps_permission() {
  $perms = array();

  $perms['access tpps form'] = array(
    'title' => t('Access TPPS Form'),
    'description' => t('Access TPPS Submission form and create submissions.'),
  );

  $perms['access tpps details'] = array(
    'title' => t('Access TPPS Details'),
    'description' => t('Access TPPS Complete Submissions Details page.'),
  );

  $perms['administer tpps module'] = array(
    'title' => t('Administer TPPS module'),
    'description' => t('Make changes to TPPS configuration.'),
  );

  $perms['user tpps submissions'] = array(
    'title' => t('User TPPS Submissions'),
    'description' => t('View all TPPS Submissions for a particular user.'),
  );

  $perms['approve tpps submissions'] = array(
    'title' => t('Approve/Reject TPPS submissions'),
    'description' => t('Approve or reject pending TPPS submissions.'),
  );

  $perms['tpps delete submission'] = array(
    'title' => t('Delete TPPS submissions'),
    'description' => t('Delete incomplete TPPS submissions.'),
  );

  $perms['view own tpps submission'] = array(
    'title' => t('View own TPPS submissions'),
    'description' => t('View TPPS submissions as a particular user.'),
  );

  return $perms;
}

/**
 * Determine whether the current user has a specific permission.
 *
 * @global stdClass $user
 *   The user in question.
 *
 * @return bool
 *   Whether or not the user has the permission.
 */
function tpps_access() {
  global $user;

  if ($user->uid == 1) {
    return TRUE;
  }

  $args = func_get_args();
  $permission = $args[0] ?? NULL;
  if (gettype($permission) != 'string') {
    return FALSE;
  }

  if (!user_access($permission)) {
    return FALSE;
  }

  switch ($permission) {
    case 'access tpps form':
      $accession = $args[1] ?? NULL;
      if (empty($accession) or $accession == 'new') {
        return TRUE;
      }

      $params = drupal_get_query_parameters(NULL, array());
      $path = $params['q'];
      preg_match('/^([^\/]+)\/?.*$/', $path, $matches);
      $form_type = $matches[1] ?? NULL;
      $full_state = tpps_load_submission($accession);
      $submission_type = $full_state['tpps_type'] ?? 'tpps';

      if (($state = tpps_load_submission($accession, FALSE))) {
        $type_pass = ($submission_type == $form_type) || preg_match('/^tpps\/TGDR[0-9]+\/.+$/', $path);
        if ($state->status == "Incomplete" and $state->uid == $user->uid and $type_pass) {
          return TRUE;
        }
      }
      return FALSE;

    case 'user tpps submissions':
      $uid = $args[1] ?? NULL;
      if (!empty($uid) and $uid == $user->uid) {
        return TRUE;
      }

      return FALSE;

    case 'view own tpps submission':
      $accession = $args[1] ?? NULL;
      if (($state = tpps_load_submission($accession, FALSE))) {
        if ($state->status != "Incomplete" and $state->uid == $user->uid) {
          return TRUE;
        }
      }
      return FALSE;

    case 'tpps delete submission':
      $accession = $args[1] ?? NULL;
      if (($state = tpps_load_submission($accession, FALSE))) {
        if ($state->status == "Incomplete" and $user->uid == $state->uid) {
          return TRUE;
        }
      }
      return FALSE;

    default:
      return TRUE;
  }
}

/**
 * Inform Ultimate Cron about cron jobs.
 *
 * Updates TPPS landing page once per day.
 */
function tpps_cronapi() {
  $items = array();

  $freq = variable_get('tpps_refresh_views_job_frequency', '0 */12 * * *');
  $items['tpps_refresh_views'] = array(
    'title' => t('Refresh TPPS and CartograPlant views'),
    'callback' => 'tpps_refresh_views',
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array($freq),
      ),
    ),
  );

  $freq = variable_get('tpps_delayed_submissions_job_frequency', '0 */6 * * *');
  $items['tpps_delayed_submissions'] = array(
    'title' => t('Check to see if any of the delayed TPPS submissions should be published yet'),
    'callback' => 'tpps_delayed_submissions',
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array($freq),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_mail().
 *
 * Populates emails for submission status updates.
 */
function tpps_mail($key, array &$message, array $params) {
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }

  switch ($key) {
    case 'user_recieved':
      $message['body'][] = "Congratulations!<br><br>
      Your TPPS submission has been received and is pending approval from a site administrator! Here's a brief summary of the information you provided:<ul>
      <li>Primary Author: {$params['author']}</li>
      <li>Organization: {$params['org']}</li>
      <li>Publication title: {$params['title']}</li>
      <li>Journal: {$params['journal']}</li>
      <li>Organisms: {$params['organisms']['number']}</li>";
      for ($i = 1; $i <= $params['organisms']['number']; $i++) {
        $message['body'][] = "   <li>Organism $i: {$params['organisms'][$i]}</li>";
      }

      $message['body'][] =
      "<li>Study Type: {$params['study_type']}</li>
      <li>Data Type: {$params['data_type']}</li></ul>
      You can view your submission <a href='{$params['base_url']}/completed-submission/{$params['accession']}' style='text-decoration: underline;'>here.</a><br>
      If you have any questions about your submission, please feel free to contact us <a href='{$params['base_url']}/contactform'>here</a>.<br><br>";
      break;

    case 'admin_recieved':
      $message['body'][] = "Attention:<br><br>
      User {$params['user_mail']} has completed a TPPS Submission, titled {$params['title']}.<br>
      Click <a href='{$params['base_url']}/tpps-admin-panel/{$params['accession']}' style='text-decoration: underline;'>here</a> to manage or approve this submission.";
      break;

    case 'user_rejected':
      $message['body'][] =
      "To whom it may concern:<br><br>
      Unfortunately, your submission to TPPS has been rejected. If you would like, you can log into TPPS and edit your submission <a href='{$params['base_url']}/user/{$params['uid']}/TPPS'>here</a><br><br>
      The administrator who rejected your submission provided the following reason:<br>
      <blockquote>
      {$params['reject-reason']}
      </blockquote>";
      break;

    case 'user_approved':
      $message['body'][] =
      "Congratulations! Your submission to TPPS has been approved!<br><br>
      You may now refer to your submitted data with accession number {$params['accession']}.<br><br>
      You can still view your submission from your <a href=\"{$params['base_url']}/completed-submission/{$params['accession']}\">TPPS Completed Submissions</a> tab.<br>
      Your submission should be public on the <a href=\"{$params['base_url']}/tpps/details\">TPPS/TGDR Landing Page</a> within the next 24 hours.<br>
      To generate a DOI for your submission, please click <a href=\"{$params['base_url']}/tpps/doi/{$params['accession']}\">here</a>.";
      break;

    default:
      break;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Adds process callback tpps_managed_file_process to managed_file elements, and
 * extends the maximum length for textfields.
 */
function tpps_element_info_alter(&$type) {
  if (isset($type['textfield']['#maxlength'])) {
    $type['textfield']['#maxlength'] = 512;
  }
  $type['managed_file']['#process'][] = 'tpps_managed_file_process';
}

/**
 * Extends the managed_file element type.
 *
 * Provides options for users to define the columns in their file, as well as a
 * preview of the first 3 rows of the file.
 *
 * @param array $element
 *   The existing managed_file form element.
 * @param array $form_state
 *   The state of the form.
 * @param array $form
 *   The existing form, including the managed_file element being changed.
 *
 * @return array
 *   The extended managed_file element.
 */
function tpps_managed_file_process(array $element, array &$form_state, array $form) {
  if ($form_state['build_info']['form_id'] !== 'tpps_main') {
    return $element;
  }
  if (isset($element['columns'])) {
    require_once 'ajax/tpps_ajax.php';
    $fid = $element['#value']['fid'];
    $wrapper = substr($element['#id'], 0, -7) . '-ajax-wrapper';

    $saved_value_parents = $no_header_parents = $element['#parents'];
    $no_header_parents[] = '#value';
    $no_header_parents[] = 'no-header';

    $no_header = drupal_array_get_nested_value($form_state['complete form'], $no_header_parents);
    $callback = isset($form_state['triggering_element']['#ajax']['callback']) ? $form_state['triggering_element']['#ajax']['callback'] : NULL;
    if (!$no_header and ($callback != 'tpps_no_header_callback')) {
      $end = array_pop($saved_value_parents);
      $saved_value_parents[] = $end . "-no-header";
      $no_header = drupal_array_get_nested_value($form_state['saved_values'][$form_state['stage']], $saved_value_parents);
    }

    $element['no-header'] = array(
      '#type' => 'checkbox',
      '#title' => 'My file has no header row',
      '#ajax' => array(
        'wrapper' => $wrapper,
        'callback' => 'tpps_no_header_callback',
      ),
      '#states' => isset($element['#states']) ? $element['#states'] : NULL,
      '#default_value' => $no_header ? $no_header : NULL,
    );

    if (!empty($fid) and ($file = file_load($fid))) {

      $saved_vals = $form_state['saved_values'][$form_state['stage']];
      $element['columns']['#type'] = 'fieldset';
      $element['columns']['#title'] = t('<div class="fieldset-title" style="font-size:.8em">Define Data</div>');
      $element['columns']['#collapsible'] = TRUE;

      // Stop using the file so it can be deleted if the user clicks 'remove'.
      file_usage_delete($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
      $content = tpps_parse_file($fid, 3, !empty($no_header));

      $options = $element['columns-options']['#value'];

      $first = TRUE;

      foreach ($content['headers'] as $key => $item) {
        $item_parents = $element['#parents'];
        array_pop($item_parents);
        $item_parents[] = end($element['#parents']) . '-columns';
        $item_parents[] = $key;

        $default = drupal_array_get_nested_value($saved_vals, $item_parents);

        if (!isset($default)) {
          foreach ($options as $k => $val) {
            similar_text(strtolower($val), strtolower($item), $percent);
            if ($percent > 85) {
              $default = $k;
              break;
            }
          }
        }
        // dpm($item_parents);
        $element['columns'][$key] = array(
          '#type' => 'select',
          '#title' => $item,
          '#options' => $options,
          '#default_value' => $default,
          '#prefix' => "<th>",
          '#suffix' => "</th>",
          '#attributes' => array(
            'data-toggle' => array('tooltip'),
            'data-placement' => array('top'),
            'title' => array("Select the type of data the '$item' column holds"),
          ),
        );

        if ($first) {
          $first = FALSE;
          $first_col = $key;
        }

        if (!empty($no_header)) {
          $element['columns'][$key]['#title'] = '';
          $element['columns'][$key]['#attributes']['title'] = array("Select the type of data column $item holds");
        }

        if ($form_state['stage'] == TPPS_PAGE_3) {
          $species_num = $element['#parents'];
          array_pop($species_num);
          $species_num = "-" . end($species_num);
          $element['columns'][$key]['#ajax'] = array(
            'callback' => 'tpps_accession_pop_group',
            'wrapper' => "population-mapping$species_num",
          );
        }
      }

      $rows = $content;
      unset($rows['headers']);
      $vars = array(
        'header' => $content['headers'],
        'rows' => $rows,
        'attributes' => array('class' => array('view')),
        'caption' => '',
        'colgroups' => NULL,
        'sticky' => FALSE,
        'empty' => '',
      );
      $table = theme('table', $vars);
      preg_match('/(*UTF8)\A(.*<thead[A-Z|a-z|"|\'|-|_|0-9]*>).*(<\/thead>.*<\/table>)/us', $table, $matches);

      $element['columns'][$first_col]['#prefix'] = "<div style=\"overflow-x:auto\">" . $matches[1] . "<tr>" . $element['columns'][$first_col]['#prefix'];
      $element['columns'][$key]['#suffix'] = "</tr>" . $matches[2] . "</div>";
      $warning = "Please note that if you remain idle on a TPPS page with files for more than 6 hours, you run the risk of having those files reset if you do not click \"Save\".";
      $element['columns'][$key]['#suffix'] = $element['columns'][$key]['#suffix'] . $warning;
    }
  }

  if (isset($element['empty'])) {

    $element['empty']['#type'] = 'textfield';
    $element['empty']['#title'] = t('File Upload empty field:');
    $element['empty']['#states'] = isset($element['#states']) ? $element['#states'] : NULL;
    $element['empty']['#description'] = t('By default, TPPS will treat cells with the value "NA" as empty. If you used a different empty value indicator, please provide it here.');
  }

  return $element;
}

/**
 * Implements hook_form_alter().
 *
 * Initializes form state values and saved_values to empty arrays, and calls the
 * tpps_leaves function, which populates most default values.
 */
function tpps_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#form_id'] == 'tpps_main') {
    $stage = $form_state['stage'];

    if (!isset($form_state['saved_values'][$stage])) {
      $form_state['saved_values'][$stage] = array();
    }
    if (!isset($form_state['values'])) {
      $form_state['values'] = array();
    }

    tpps_leaves($form, $form_state['values'], $form_state['saved_values'][$stage]);
  }
}

/**
 * Populates default values for most form fields.
 *
 * @param array $elements
 *   An array of the elements needing default values.
 * @param array $vals
 *   An array of form_state values.
 * @param array $saved_vals
 *   An array of form_state saved_values.
 */
function tpps_leaves(array &$elements, array $vals, array $saved_vals) {
  foreach ($elements as $key => &$element) {
    if ((gettype($key) != 'string' or $key[0] != '#') and isset($element['#type'])) {

      // If #tree is not set in the current element, and #tree is set and false
      // in the parent element, then set #tree to false in the current element.
      if (!isset($element['#tree']) and isset($elements['#tree']) and !$elements['#tree']) {
        $element['#tree'] = FALSE;
      }

      // If #tree is not set or is set to true, then populate the #parents array
      // with the parents of the parent element plus the current key. Otherwise,
      // the #parents array should just be the current key.
      if (!isset($element['#tree']) or $element['#tree']) {
        $element['#parents'] = array_merge($elements['#parents'], array($key));
      }
      else {
        $element['#parents'] = array($key);
      }

      // Element types that should be loading some default value, usually for
      // the purposes of persistent form data.
      $load_defaults = array(
        'textfield',
        'textarea',
        'checkbox',
        'select',
        'managed_file',
      );
      // If element is a type that should pull from 'saved_values', try to load
      // the old value.
      if (in_array($element['#type'], $load_defaults) and !isset($element['#default_value']) and isset($saved_vals[$key])) {
        $element['#default_value'] = $saved_vals[$key];
      }
      // If element is a select type and still has no default value, then there
      // is no saved value, so the default should be 0.
      elseif ($element['#type'] == 'select' and !isset($element['#default_value'])) {
        $element['#default_value'] = 0;
      }

      // Checkboxes elements work differently in terms of default values.
      if ($element['#type'] == 'checkboxes') {
        $options = $element['#options'];
        // Get checkboxes options.
        foreach ($options as $option) {
          // If the option does not have a default, pull from 'saved_values'.
          if (!isset($element[$option]['#default_value']) and isset($saved_vals[$key][$option])) {
            $element[$option]['#default_value'] = $saved_vals[$key][$option];
          }
        }
      }

      if ($element['#type'] == 'fieldset') {
        if (empty($saved_vals[$key]) or !is_array($saved_vals[$key])) {
          $saved_vals[$key] = array();
        }
        if (empty($vals[$key]) or !is_array($vals[$key])) {
          $vals[$key] = array();
        }
        tpps_leaves($element, $vals[$key], $saved_vals[$key]);
      }
    }
  }
}

/**
 * Implements hook_page_build().
 *
 * Adds the side bar to TPPS form pages before they are rendered.
 */
function tpps_page_build(&$page) {
  $js_settings = drupal_static('drupal_add_js', array())['settings']['data'] ?? array();
  $step = NULL;
  foreach ($js_settings as $info) {
    if (array_key_exists('tpps', $info)) {
      $step = $info['tpps']['stage'] ?? NULL;
      if (!empty($step)) {
        break;
      }
    }
  }

  if (empty($page['content']['system_main']['#form_id']) or $page['content']['system_main']['#form_id'] != 'tpps_main' or empty($step)) {
    return $page;
  }

  if ($step != 'frontpage' and $step != TPPS_PAGE_1 and $step != 'summarypage') {
    $blockObject = block_load('views', 'tpps_status');
    $blockObject->title = 'TPPS Status';
    $blockObject->subject = '';
    $blockObject->region = 'Content';
    $block = _block_get_renderable_array(_block_render_blocks(array($blockObject)));
    $tpps_status = "<div class='block block-system contextual-links-region block-menu tpps-status-block'>{$block['views_tpps_status']['#markup']}</div>";
    drupal_add_region_content('sidebar_second', $tpps_status);
  }

  return $page;
}

/**
 * This function creates the main TPPS form.
 *
 * Loads query parameters, ensures the user is logged in, loads old form and
 * form_state information, and calls the appropriate page function.
 *
 * @param array $form
 *   The actual TPPS form.
 * @param array $form_state
 *   The state of the TPPS form - note that this may be overwritten if the user
 *   is loading an old form.
 *
 * @global stdClass $user
 *   The user trying to access the TPPS form.
 *
 * @return array
 *   The created form.
 */
function tpps_main(array $form, array &$form_state, $accession = NULL) {

  require_once 'forms/build/front.php';
  global $user;

  if (!isset($form_state['stage'])) {
    if (!isset($accession)) {
      // First access, no accession in link.
      $form_state['stage'] = 'frontpage';

      tpps_front_create_form($form, $form_state);

      drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
      drupal_add_css(drupal_get_path('module', 'tpps') . TPPS_CSS_PATH);

      return $form;
    }
    else {
      // First access, and with accession in link.
      $old_form_state = tpps_load_submission($accession);
      if (empty($old_form_state)) {
        drupal_goto('tpps');
      }
      tpps_form_state_info($form_state, $old_form_state);
    }
  }
  else {
    // Not first access.
    if (!isset($form_state['saved_values']['frontpage']['accession']) or (isset($form_state['saved_values']['frontpage']['accession']) and $form_state['saved_values']['frontpage']['accession'] === 'new')) {
      // No submissions, or selected to create new submission.
      if (tpps_access('administer tpps module') and !empty($form_state['saved_values']['frontpage']['custom_accession_check'])) {
        $accession = $form_state['saved_values']['frontpage']['custom_accession'];
      }
      tpps_init_project($form_state, $accession);
      tpps_create_submission($form_state, $user->uid);
    }
    $old_form_state = tpps_load_submission($form_state['saved_values']['frontpage']['accession']);
    tpps_form_state_info($form_state, $old_form_state);
  }

  drupal_add_js(array('tpps' => array('stage' => $form_state['stage'])), 'setting');

  $form['accession'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['accession'],
  );

  if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])) {
    tpps_init_project($form_state);
  }

  tpps_status_bar($form, $form_state);


  if ((!isset($form_state['tpps_type']) or $form_state['tpps_type'] != 'tppsc') and (!isset($form_state['saved_values'][TPPS_PAGE_1]['primaryAuthor']) or !isset($form_state['saved_values'][TPPS_PAGE_1]['organization']))) {

    $contact_bundle = tripal_load_bundle_entity(array('label' => 'Tripal Contact Profile'));
    if ($contact_bundle) {
      $query = new EntityFieldQuery();
      $results = $query->entityCondition('entity_type', 'TripalEntity')
        ->entityCondition('bundle', $contact_bundle->name)
        ->fieldCondition('local__email', 'value', $user->mail)
        ->range(0, 1)
        ->execute();
      $entity = current(array_reverse(entity_load('TripalEntity', array_keys($results['TripalEntity']))));
      $form_state['saved_values'][TPPS_PAGE_1]['primaryAuthor'] = $form_state['saved_values'][TPPS_PAGE_1]['primaryAuthor'] ?? $entity->title;
      $form_state['saved_values'][TPPS_PAGE_1]['organization'] = $form_state['saved_values'][TPPS_PAGE_1]['organization'] ?? $entity->tcontact__organization[LANGUAGE_NONE][0]['value'];
    }
  }

  switch ($form_state['stage']) {
    case TPPS_PAGE_1:
      require_once 'forms/build/page_1.php';
      tpps_page_1_create_form($form, $form_state);
      break;

    case TPPS_PAGE_2:
      require_once 'forms/build/page_2.php';
      tpps_page_2_create_form($form, $form_state);
      break;

    case TPPS_PAGE_3:
      require_once 'forms/build/page_3.php';
      tpps_page_3_create_form($form, $form_state);
      break;

    case TPPS_PAGE_4:
      require_once 'forms/build/page_4.php';
      tpps_page_4_create_form($form, $form_state);
      break;

    case 'summarypage':
      require_once 'forms/build/summary.php';
      tpps_summary_create_form($form, $form_state);
      break;

    default:
      drupal_set_message(t('Invalid form stage.'), 'error');
      break;
  }

  $suffix = '
    <script>
    jQuery(document).ready(function(){
      jQuery(\'[data-toggle="tooltip"]\').tooltip();
    });
    </script>';

  if (isset($form['#suffix'])) {
    $form['#suffix'] .= $suffix;
  }
  else {
    $form['#suffix'] = $suffix;
  }

  drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
  drupal_add_css(drupal_get_path('module', 'tpps') . TPPS_CSS_PATH);

  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * Validates input to form. Also saves file column information so it is not lost
 * if the input is not valid.
 */
function tpps_main_validate(&$form, &$form_state) {
  global $user;

  if ($form_state['triggering_element']['#value'] == 'Back' or $form_state['triggering_element']['#value'] == 'Save') {

    tpps_save_file_columns($form, $form_state);
    return;
  }

  switch ($form_state['stage']) {
    case 'frontpage':
      require_once 'forms/validate/front.php';
      tpps_front_page_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_1:
      require_once 'forms/validate/page_1.php';
      tpps_page_1_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_2:
      require_once 'forms/validate/page_2.php';
      tpps_page_2_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_3:
      require_once 'forms/validate/page_3.php';
      tpps_page_3_validate_form($form, $form_state);
      break;

    case TPPS_PAGE_4:
      require_once 'forms/validate/page_4.php';
      tpps_page_4_validate_form($form, $form_state);
      break;

    default:
      break;
  }

  drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);

  if ($user->uid !== 0 and !form_get_errors()) {
    $form_state['values']['#cleared'] = TRUE;
    if ($form_state['submitted'] == '1') {
      tpps_submission_update_stats($form_state);
    }
  }
  else {
    $form_state['values']['#cleared'] = FALSE;
  }
}

/**
 * Implements hook_form_submit().
 *
 * This function handles the multi-step aspect of the form, as well as saving
 * input to persistent variables so they can be reloaded later.
 */
function tpps_main_submit($form, &$form_state) {
  // dpm("ON SUBMIT");
  // dpm(array_keys($form_state));
  // dpm('saved_values key contains:');
  // dpm($form_state['saved_values']);
  // dpm('values key contains:');
  // dpm($form_state['values']);
  $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
  $persist = TRUE;

  // This happens when the user clicks Save, notice this if clause will do a return
  // This means after saving, the form will be rebuilt based on the rebuild key = TRUE.
  if ($form_state['triggering_element']['#value'] == 'Save') {
    drupal_set_message(t('Your information has been saved!'), 'status');
    // dpm($form_state['saved_values']);
    if (isset($form_state['saved_values']['form_build_id'])) {
      $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
    // dpm('ON SAVE');
    // dpm('Form state saved_values:');
    // dpm($form_state['saved_values']);

    tpps_update_submission($form_state);
    return;
  }

  // ELSE, it will do the below logic, read the comment after this switch statement
  switch ($form_state['stage']) {
    case 'frontpage':
      $persist = FALSE;
      $form_state['stage'] = TPPS_PAGE_1;
      break;

    case TPPS_PAGE_1:
      $form_state['stage'] = TPPS_PAGE_2;
      break;

    case TPPS_PAGE_2:
      if ($form_state['triggering_element']['#value'] == 'Back') {
        $form_state['stage'] = TPPS_PAGE_1;
      }
      else {
        $form_state['stage'] = TPPS_PAGE_3;
      }
      break;

    case TPPS_PAGE_3:
      if ($form_state['triggering_element']['#value'] == 'Back') {
        $form_state['stage'] = TPPS_PAGE_2;
      }
      else {
        $form_state['stage'] = TPPS_PAGE_4;
      }
      break;

    case TPPS_PAGE_4:
      if ($form_state['triggering_element']['#value'] == 'Back') {
        $form_state['stage'] = TPPS_PAGE_3;
      }
      else {
        $form_state['stage'] = 'summarypage';
      }
      break;

    case 'summarypage':
      if ($form_state['triggering_element']['#value'] == 'Back') {
        $form_state['stage'] = TPPS_PAGE_4;
      }
      else {
        $form_state['status'] = 'Pending Approval';
        $form_state['completed'] = time();
        tpps_update_submission($form_state);
        tpps_submit_email($form_state);
        drupal_goto("completed-submission/{$form_state['accession']}");
        return;
      }
      break;

    default:
      drupal_set_message(t('Invalid form stage.'), 'error');
      break;
  }

  // It'll then come here and also perform a save most likely
  // which I think will cater for NEXT button
  if (isset($form_state['saved_values']['form_build_id'])) {
    $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
  }
  $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
  $form_state['rebuild'] = TRUE;

  if ($persist) {
    // dpm('PERSIST END');
    tpps_update_submission($form_state);
  }
}

/**
 * Implements hook_block_info().
 *
 * Adds the tpps_status block.
 */
function tpps_block_info() {
  $blocks['tpps_status'] = array(
    'info' => t('TPPS Status'),
  );
  // [VS]
  $blocks['tpps_report_menu'] = array(
    'info' => t('Reports'),
    'description'=>t('Links to various report pages.'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  // [/VS]
  return $blocks;
}

// [VS]
/**
 * Implements hook_block_view().
 */
function tpps_block_view($delta = '') {
  switch ($delta) {
    // Shows links to report's pages.
    case 'tpps_report_menu':
      $block['subject'] = 'TPPS Reports';
      $block['content'] = tpps_report_menu_block();
  }
  return $block;
}

/**
 * Implements hook_block_view_alter().
 *
 * This function populates the TPPS Status Bar block with data that has already
 * been collected through the form.
 */
function tpps_block_view_alter(&$data, $block) {
  global $base_url;
  switch ($block->delta) {
    case 'tpps_status':
      $css = "
      .tgdr_status_block img {
          vertical-align: middle;
          margin-bottom: 4px;
          margin-right: 2px;
      }
      ";
      drupal_add_css($css, 'inline');

      $data['subject'] = t('TPPS Status');
      $content = "<div class='tgdr_status_block'>";
      $params = drupal_get_query_parameters(NULL, array());
      if (preg_match('/tppsc?\/(TGDR.*)/', $params['q'], $matches)) {
        $accession = $matches[1];
        $form_state = tpps_load_submission($accession);
      }
      elseif (isset($_REQUEST['accession'])) {
        $accession = $_REQUEST['accession'];
        $form_state = tpps_load_submission($accession);
      }
      else {
        $content .= '</div>';
        $data['content'] = filter_xss($content);
        break;
      }
      $ok = "<img src='$base_url/misc/message-16-ok.png'>";
      $form_state['saved_values'][TPPS_PAGE_2]['study_info'] = NULL;
      $flat = tpps_flatten($form_state);

      $map_api_key = variable_get('tpps_maps_api_key', NULL);
      foreach ($flat as $item => $val) {
        if ($item[0] !== '#') {
          $item_str = filter_xss(check_plain($item));
          $val_str = filter_xss(check_plain($val));
          if (preg_match('/(Abstract|Organization)/', $item)) {
            continue;
          }
          elseif (preg_match('/File/', $item) and ($file_name = file_load($val)->filename)) {
            // Create links to files.
            $file_url = check_plain(file_create_url(file_load($val)->uri));
            $val_str = "<a href='$file_url' target='blank'>$file_name</a>";
            if (!$flat['#skip_loc'] and preg_match('/^(.*)Accession File/', $item, $matches)) {
              $fid = $val;
              $wrapper_id = "{$fid}_map_wrapper";
              $button_id = "{$fid}_map_button";
              $val_str .= "<div id=\"$wrapper_id\"></div>"
                . "<input id=\"$button_id\" type=\"button\" value=\"Click here to view plants on map!\"></input>";

              drupal_add_js(array(
                'tpps' => array(
                  'map_buttons' => array(
                    $fid => array(
                      'wrapper' => $wrapper_id,
                      'button' => $button_id,
                      'fid' => $fid,
                    ),
                  ),
                ),
              ), 'setting');
            }
          }
          elseif (preg_match('/species photo/', $item) and (file_load($val)) and ($file_name = file_load($val)->filename)) {
            $file_url = check_plain(file_create_url(file_load($val)->uri));
            $val_str = "<img src='$file_url' width='100%'>";
            $val_str .= "<br><a href='$file_url' target='blank'>$file_name</a>";
          }
          elseif (preg_match('/Month/', $item)) {
            // Skip experiment start/end month.
            continue;
          }
          elseif (preg_match('/^(.*)Year/', $item, $matches)) {
            // Combine experiment start/end month + year.
            if (isset($flat[$matches[1] . 'Month'])) {
              $item_str = $matches[1] . 'Date';
              $val_str = "{$flat[$matches[1] . 'Month']} $val_str";
            }
            else {
              continue;
            }
          }
          elseif (preg_match('/Study Location/', $item) and isset($flat['#location_type']) and $flat['#location_type']) {
            // Add map capability to location.
            if ($flat['#location_type'] == '2') {
              $query = $val_str;
            }
            elseif ($flat['#location_type'] != '2' and ($standard = tpps_standard_coord($val_str))) {
              $query = $standard;
            }
            $val_str = "<a id=\"sidebar_map\" style=\"cursor:pointer\">$val_str</a>";
            if (isset($query) and !empty($map_api_key)) {
              $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=$map_api_key&z=5\\\" allowfullscreen> </iframe></div>";
              $js = "jQuery(document).ready(function ($) {
                jQuery(\"#sidebar_map\").click(function() {
                  jQuery(\"#sidebar_map_wrapper\").remove();
                  jQuery(\"#sidebar_map\").after( \"<br><div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                });
              });";
              drupal_add_js($js, 'inline');
            }
          }
          elseif (preg_match('/Publication DOI/', $item)) {
            $link = preg_match('/https?:\/\//', $val_str) ? $val_str : "https://doi.org/$val_str";
            $val_str = "<a href=\"$link\" target=\"blank\">$val_str</a>";
          }
          $content .= "$ok $item_str: $val_str <br>";
        }
        elseif (preg_match('/#page_(.)_cleared/', $item, $matches)) {
          // Break between pages.
          if ($val) {
            $step_arr = array(
              1 => 'Author and Species Information',
              2 => 'Experimental Conditions',
              3 => 'Plant Accession',
              4 => 'Submit Data',
            );
            if ($matches[1] > 1) {
              $content .= '<br />';
            }
            $content .= "$ok Step {$matches[1]} - Complete<br />{$step_arr[$matches[1]]}<br /><hr />";
          }
          else {
            // If page not cleared, do not display remaining form state data.
            break;
          }
        }
        elseif (preg_match('/^#(.*)accession_(.*)/', $item, $matches)) {
          $val_str = filter_xss(check_plain($val));
          $parts = explode(" ", substr($matches[0], 1));
          $item_id = implode("_", $parts);
          $content .= "<div id=\"$item_id\" style=\"display:none;\">$val_str</div>";
        }
      }
      if (!empty($flat['#page_3_cleared']) and !empty($map_api_key)) {
        $content .= "<script src=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\"></script><script src=\"https://maps.googleapis.com/maps/api/js?key=$map_api_key&callback=initMap\"
        async defer></script>";
      }
      $content .= "</div>";
      $data['content'] = $content;

      break;

    default:
      break;
  }
}

/**
 * Menu callback for snp file selector field.
 */
function tpps_snpassay_file_selector($string) {
  $matches = array();
  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid', 'filename'))
    ->condition('f.filename', '%' . db_like($string) . '%', 'LIKE')
    ->condition('f.filename', '%SNP%', 'LIKE')
    ->orderBy('f.timestamp', 'DESC')
    ->execute();

  // save the query to matches
  foreach ($result as $row) {
    $value = $row->filename . ' (' . $row->fid . ')';
    $matches[$row->fid] = $row->filename;
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}

function tpps_media_browser_plugins_alter(&$plugins) {
  //if (variable_get('disable_media_upload', 0)) {
   unset($plugins['upload']);
   unset($plugins['media_default--media_browser_my_files']);
 // }
}

// There are several ways to provide this functionality for versions
// prior to PHP 7.3.0. It is possible to use array_keys(),
//  but that may be rather inefficient.
//  It is also possible to use reset() and key(),
//  but that may change the internal array pointer.
//  An efficient solution, which does not change the internal array pointer, written as polyfill:
if (!function_exists('array_key_first')) {
  function array_key_first(array $arr) {
    foreach($arr as $key => $unused) {
      return $key;
    }
    return NULL;
  }
}

/**
 * Alias for watchdog() with ketchup and mustard.
 *
 * @param array $vars
 *   Array of variables to dump.
 * @param string $message
 *   Optional message.
 */
function hotdog(array $vars, $message = 'hotdog') {
  watchdog('tpps', $message . ': <pre>' . print_r($vars, 1) . '</pre>',
    [], WATCHDOG_DEBUG
  );
}


// Timer ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

/**
 * Records current time in msec to watchdog.
 *
 * Usage example:
 *   tpps_timer('Called tpps_unit_autocomplete()', microtime(1));
 *   // some code...
 *   tpps_timer('Finished tpps_unit_autocomplete()', microtime(1));
 *
 * @param mixed $message
 * @param string $time
 * @param string $prev_time
 * @access public
 *
 * @return void
 */
function tpps_timer($message, $time = '', $prev_time = '') {
  if (empty($time)) {
    $time = microtime(1);
  }
  $timer_name = 'tpps_prev_time';
  if (empty($prev_time)  && isset($_SESSION[$timer_name])) {
    $prev_time = $_SESSION[$timer_name];
  }
  if (!empty($prev_time)) {
    $diff = round($time - $prev_time, 3);
  }
      //variable_get('date_default_timezone', 0)
  // Use server's timezone instead of user's.
  $tz =  variable_get('date_default_timezone', @date_default_timezone_get());
  watchdog('tpps_timer', ((empty($diff)) ? '0: ' : '+' . $diff . ': ')
    . $message . '. '
    .  '<br />' . $time
    .  '<br />' . format_date($time, 'custom', 'H:i:s P', $tz ),
    [],
    WATCHDOG_DEBUG
  );
  return $_SESSION[$timer_name] = $time;
}

function tpps_init() {
  return;
  $timer_name = 'tpps_prev_time';
  unset($_SESSION[$timer_name]);

  $condition = (
    strpos($_GET['q'], 'tpps-admin-panel') !== FALSE
    || strpos($_GET['q'], 'tpps') !== FALSE
    || strpos($_GET['q'], 'ajax') !== FALSE
  );
  if ($condition) {
    tpps_timer('Called hook_init() for ' . $_GET['q'] , microtime(1));
  }
}

function tpps_exit() {
  return;
  $condition = (
    strpos($_GET['q'], 'tpps-admin-panel') !== FALSE
    || strpos($_GET['q'], 'tpps') !== FALSE
    || strpos($_GET['q'], 'ajax') !== FALSE
  );
  if ($condition) {
    tpps_timer('Called hook_exit() for ' . $_GET['q'] , microtime(1));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes label of default action of Simple Report tableselect report.
 */
function tpps_form_simple_report_tableselect_form_alter($form, &$form_state) {
  $option_name = 'simple_report_tableselect_action_remove';
  if (empty($form['action']['#options'][$option_name])) {
    return;
  }
  $form['action']['#options'][$option_name] = t('Remove');
  return $form;
}
