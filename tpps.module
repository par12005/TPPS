<?php
define("TPPS_JS_PATH", '/js/tpps.js');
define("PAGE_1", 'Hellopage');
define("PAGE_2", 'secondPage');
define("PAGE_3", 'thirdPage');
define("PAGE_4", 'fourthPage');
require_once 'includes/create_record.inc';
require_once 'includes/flatten.inc';
require_once 'includes/init_project.inc';
require_once 'includes/tab_create.inc';
require_once 'includes/completed_display.inc';
require_once 'includes/table_display.inc';
require_once 'includes/compare_files.inc';
require_once 'includes/standard_coord.inc';
require_once 'includes/validate_columns.inc';
require_once 'includes/refresh_landing_page.inc';
require_once 'includes/parse_xlsx.inc';
require_once 'includes/content_no_header.inc';
require_once 'includes/custom_cvterm.inc';
require_once 'includes/submit_email.inc';
require_once 'includes/status_bar.inc';
require_once 'includes/save_file_columns.inc';
require_once 'includes/file_parsing.inc';

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['tpps'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_main'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['user/%user/tpps'] = array(
      'title' => 'TPPS Submissions',
      'page callback' => 'tpps_tab_create',
      'page arguments' => array('user', 1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK
    );
    
    $items['completed-submission'] = array(
      'title' => 'TPPS Completed Submission',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_completed_display'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['tpps-admin-panel'] = array(
      'title' => 'TPPS Admin Panel',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_admin_panel'),
      'access callback' => 'user_access',
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'admin/panel.php'
    );
    
    $items['admin/config/content/tpps'] = array(
      'title' => 'TPPS Settings',
      'description' => 'Configuration for TPPS module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_admin_settings'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'admin/config.php'
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => 'tpps_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => 'tpps_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => 'tpps_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => 'tpps_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => 'tpps_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['attribute/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Attribute',
      'page callback' => 'tpps_attribute_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['units/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Units',
      'page callback' => 'tpps_units_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['structure/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Structure',
      'page callback' => 'tpps_structure_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/tpps_ajax.php'
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'test.php'
    );

    return $items;
}

function tpps_cronapi(){
    $items = array();
    
    $items['tpps_refresh_landing_page'] = array(
      'title' => t('Refresh TPPS landing page view'),
      'callback' => 'tpps_refresh_landing_page',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0 0 * * *'),
        ),
      )
    );
    
    return $items;
}

function tpps_mail($key, &$message, $params){
    if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
    } 
    if (isset($params['body'])) {
        $message['body'][] = $params['body']; 
    }
    if (isset($params['headers']) && is_array($params['headers'])) {   
        $message['headers'] += $params['headers'];
    }
    
    switch ($key){
        case 'user_recieved':
            $message['body'][] = "Congratulations!<br><br>

Your TPPS submission has been received and is pending approval from a TreeGenes administrator! Here's a brief summary of the information you provided:<ul>
    <li>Primary Author: {$params['author']}</li>
    <li>Organization: {$params['org']}</li>
    <li>Publication title: {$params['title']}</li>
    <li>Journal: {$params['journal']}</li>
    <li>Organisms: {$params['organisms']['number']}</li>
";
        for ($i = 1; $i <= $params['organisms']['number']; $i++){
            $message['body'][] = "   <li>Organism $i: {$params['organisms'][$i]}</li>";
        }

        $message['body'][] = 
"   <li>Study Type: {$params['study_type']}</li>
    <li>Data Type: {$params['data_type']}</li></ul>
You can view your submission <a href='{$params['base_url']}/completed-submission?id={$params['accession']}' style='text-decoration: underline;'>here.</a><br>
If you have any questions about your submission, please feel free to contact us <a href='{$params['base_url']}/contactform'>here</a>.<br><br>";
            
            break;
        
        case 'admin_recieved':
            $message['body'][] = "
Attention:<br><br>

User {$params['user_mail']} has completed a TPPS Submission, titled {$params['title']}.<br>
Click <a href='{$params['base_url']}/tpps-admin-panel?accession={$params['accession']}' style='text-decoration: underline;'>here</a> to manage or approve this submission.";
            
            break;
            
        case 'user_rejected':
            $message['body'][] = 
"To whom it may concern:<br><br>

Unfortunately, your submission to TPPS has been rejected. If you would like, you can log into the TreeGenes website and edit your submission <a href='{$params['base_url']}/user/{$params['uid']}/TPPS'>here</a><br><br>

The administrator who rejected your submission provided the following reason:<br>
<blockquote>
{$params['reject-reason']}
</blockquote>";
            break;
        
        case 'user_approved':
            $message['body'][] = 
"Congratulations! Your submission to TPPS has been approved!<br><br>

You may now refer to your submitted data with accession number {$params['accession']}.<br><br>

You can still view your submission from your <a href=\"{$params['base_url']}/completed-submission?id={$params['accession']}\">TPPS Completed Submissions</a> tab.<br>
Your submission should be public on the <a href=\"{$params['base_url']}/tpps_details/main\">TPPS/TGDR Landing Page</a> within the next 24 hours.";
            
            break;

        default:
            break;
    }
}

function tpps_element_info_alter(&$type){
    if (isset($type['textfield']['#maxlength'])){
        $type['textfield']['#maxlength'] = 512;
    }
    //dpm('element_info_alter');
    $type['managed_file']['#process'][] = 'tpps_managed_file_process';
}

function tpps_managed_file_process($element, &$form_state, $form){
    if ($form_state['build_info']['form_id'] !== 'tpps_main'){
        return $element;
    }
    if (isset($element['columns'])){
        $fid = $element['#value']['fid'];
        $wrapper = substr($element['#id'], 0, -7) . '-ajax-wrapper';

        $saved_value_parents = $no_header_parents = $element['#parents'];
        $no_header_parents[] = '#value';
        $no_header_parents[] = 'no-header';
        
        $no_header = drupal_array_get_nested_value($form_state['complete form'], $no_header_parents);
        $callback = isset($form_state['triggering_element']['#ajax']['callback']) ? $form_state['triggering_element']['#ajax']['callback'] : NULL;
        if (!$no_header and ($callback != 'tpps_no_header_callback')){
            $end = array_pop($saved_value_parents);
            $saved_value_parents[] = $end . "-no-header";
            $no_header = drupal_array_get_nested_value($form_state['saved_values'][$form_state['stage']], $saved_value_parents);
        }
        
        $element['no-header'] = array(
          '#type' => 'checkbox',
          '#title' => 'My file has no header row',
          '#ajax' => array(
            'wrapper' => $wrapper,
            'callback' => 'tpps_no_header_callback'
          ),
          '#states' => isset($element['#states']) ? $element['#states'] : NULL,
          '#default_value' => $no_header ? $no_header : NULL,
        );
        
        if (!empty($fid) and ($file = file_load($fid))){
            
            $saved_vals = $form_state['saved_values'][$form_state['stage']];
            $element['columns']['#type'] = 'fieldset';
            $element['columns']['#title'] = t('<div class="fieldset-title">Define Data</div>');
            $element['columns']['#collapsible'] = TRUE;
            
            $file_name = $file->uri;
            
            //stop using the file so it can be deleted if the user clicks 'remove'
            file_usage_delete($file, 'tpps', 'tpps_project', substr($form_state['accession'], 4));
            
            $location = drupal_realpath("$file_name");
            $content = tpps_parse_xlsx($location);
            
            if (!empty($no_header)){
                tpps_content_no_header($content);
            }
            
            $options = $element['columns-options']['#value'];
            
            $first = TRUE;
            
            foreach ($content['headers'] as $item){
                $item_parents = $element['#parents'];
                array_pop($item_parents);
                $item_parents[] = end($element['#parents']) . '-columns';
                $item_parents[] = $item;
                
                $default = drupal_array_get_nested_value($saved_vals, $item_parents);
                //dpm($item_parents);
                
                $element['columns'][$item] = array(
                  '#type' => 'select',
                  '#title' => t($item),
                  '#options' => $options,
                  '#default_value' => $default,
                  '#prefix' => "<td>",
                  '#suffix' => "</td>",
                  '#attributes' => array(
                    'data-toggle' => array('tooltip'),
                    'data-placement' => array('left'),
                    'title' => array("Select the type of data the '$item' column holds")
                  )
                );

                if ($first){
                    $first = FALSE;
                    $element['columns'][$item]['#prefix'] = "<div style='overflow-x:auto'><table border='1'><tbody><tr>" . $element['columns'][$item]['#prefix'];
                }

                if (!empty($no_header)){
                    $element['columns'][$item]['#title'] = '';
                    $element['columns'][$item]['#attributes']['title'] = array("Select the type of data column $item holds");
                }
            }
            
            // display sample data
            $display = "</tr>";
            for ($j = 0; $j < 3; $j++){
                if (isset($content[$j])){
                    $display .= "<tr>";
                    foreach ($content['headers'] as $item){
                        $display .= "<th>{$content[$j][$item]}</th>";
                    }
                    $display .= "</tr>";
                }
            }
            $display .= "</tbody></table></div>";

            $element['columns'][$item]['#suffix'] .= $display;
        }
    }
    
    if (isset($element['empty'])){
        
        $element['empty']['#type'] = 'textfield';
        $element['empty']['#title'] = t('File Upload empty field:');
        $element['empty']['#states'] = isset($element['#states']) ? $element['#states'] : NULL;
        $element['empty']['#description'] = 'By default, TPPS will treat cells with the value "NA" as empty. If you used a different empty value indicator, please provide it here.';
    }
    
    return $element;
}

function tpps_form_alter(&$form, &$form_state, $form_id){
    if ($form['#form_id'] == 'tpps_main'){
        $stage = $form_state['stage'];
        
        if (!isset($form_state['saved_values'][$stage])){
            $form_state['saved_values'][$stage] = array();
        }
        if (!isset($form_state['values'])){
            $form_state['values'] = array();
        }
        
        tpps_leaves($form, $form_state['values'], $form_state['saved_values'][$stage]);
    }
}

function tpps_leaves(&$elements, $vals, $saved_vals){
    foreach($elements as $key => &$element){
        if ($key[0] != '#' and isset($element['#type'])){
            
            $element['#parents'] = array_merge($elements['#parents'], array($key));
            
            //element types that should be loading some default value, usually for the purposes of persistent form data
            $load_defaults = array(
              'textfield',
              'textarea',
              'checkbox',
              'select',
              'managed_file',
            );
            //if element is a type that should pull from 'saved_values', try to load the old value
            if (in_array($element['#type'], $load_defaults) and !isset($element['#default_value']) and isset($saved_vals[$key])){
                $element['#default_value'] = $saved_vals[$key];
            }
            //if element is a select type and still has no default value, then there is no saved value, so the default should be 0
            elseif ($element['#type'] == 'select' and !isset($element['#default_value'])){
                $element['#default_value'] = 0;
            }
            
            //checkboxes elements work a little differently in terms of default values
            if ($element['#type'] == 'checkboxes'){
                $options = $element['#options'];
                //get checkboxes options
                foreach ($options as $option){
                    //if the option does not yet have a default, try to pull from 'saved_values'
                    if (!isset($element[$option]['#default_value']) and isset($saved_vals[$key][$option])){
                        $element[$option]['#default_value'] = $saved_vals[$key][$option];
                    }
                }
            }
            
            if ($element['#type'] == 'fieldset'){
                if (!isset($saved_vals[$key])){
                    $saved_vals[$key] = array();
                }
                if (!isset($vals[$key])){
                    $vals[$key] = array();
                }
                tpps_leaves($element, $vals[$key], $saved_vals[$key]);
            }
        }
    }
    return;
}

function tpps_page_build(&$page){
    
    if (empty($page['content']['system_main']['#form_id']) or $page['content']['system_main']['#form_id'] != 'tpps_main' or empty($page['content']['system_main']['step']['#default_value'])){
        return $page;
    }
    
    $step = $page['content']['system_main']['step']['#default_value'];
    if ($step != 'frontpage' and $step != PAGE_1 and $step != 'summarypage'){
        $blockObject = block_load('views', 'tpps_status');
        $blockObject->title = 'TPPS Status';
        $blockObject->subject = '';
        $blockObject->region = 'Content';
        $block = _block_get_renderable_array(_block_render_blocks(array($blockObject)));
        $tpps_status = "<div class='block block-system contextual-links-region block-menu tpps-status-block'>{$block['views_tpps_status']['#markup']}</div>";
        drupal_add_region_content('sidebar_second', $tpps_status);
    }
    
    return $page;
}

function tpps_main($form, &$form_state){
    
    require_once 'forms/build/front.php';
    
    global $user;
    $params = drupal_get_query_parameters();
    
    if (!isset($user->mail) and !isset($form_state['stage'])){
        //first access, not logged in
        $form_state['stage'] = 'frontpage';
    
        tpps_front_create_form($form, $form_state);
    
        drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
        
        return $form;
    }
    elseif (!isset($user->mail)){
        //not first access, but not logged in
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (isset($params['accession']) and !isset($form_state['stage'])) {
        //logged in, and with accession in link
        $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $params['accession']);
        $form_state['saved_values'] = $old_form_state['saved_values'];
        $form_state['stage'] = $old_form_state['stage'];
        $form_state['accession'] = $old_form_state['accession'];
        $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
    }
    else {
        //logged in, with plain link
        if (!isset($form_state['stage'])){
            //first access
            $form_state['stage'] = 'frontpage';
    
            tpps_front_create_form($form, $form_state);

            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);

            return $form;
        }
        else {
            //not first access
            if (!isset($form_state['saved_values']['frontpage']['accession']) or (isset($form_state['saved_values']['frontpage']['accession']) and $form_state['saved_values']['frontpage']['accession'] === 'new')){
                //no submissions, or selected to create new submission
                tpps_init_project($form, $form_state);
                variable_set('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession'], $form_state);
            }
            $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession']);
            $form_state['saved_values'] = $old_form_state['saved_values'];
            $form_state['stage'] = $old_form_state['stage'];
            $form_state['accession'] = $old_form_state['accession'];
            $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
        }
    }
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    $form['accession'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['accession'],
    );
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
    status_bar($form, $form_state);
    
    if (!isset($form_state['saved_values'][PAGE_1]['primaryAuthor']) or !isset($form_state['saved_values'][PAGE_1]['organization'])){
  	$and = db_and();
	$and->condition('value', $user->mail);
	$and->condition('type_id', '50268');
	$contact_id = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('contact_id'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$contact_id = $contact_id['contact_id'];
        $name = db_select('chado.contact', 'contact')
	    ->fields('contact', array('name'))
	    ->condition('contact_id', $contact_id)
	    ->execute()
	    ->fetchAssoc();
	$name = $name['name'];
	$form_state['saved_values'][PAGE_1]['primaryAuthor'] = $name;
	$and = db_and();
	$and->condition('contact_id', $contact_id);
	$and->condition('type_id', '72');
	$org = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('value'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$org = $org['value'];
	$form_state['saved_values'][PAGE_1]['organization'] = $org;
    }
    
    switch ($form_state['stage']){
        case PAGE_1:
            require_once('forms/build/page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case PAGE_2:
            require_once('forms/build/page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case PAGE_3:
            require_once('forms/build/page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case PAGE_4:
            require_once('forms/build/page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        case 'summarypage':
            require_once 'forms/build/summary.php';
            tpps_summary_create_form($form, $form_state);
            break;
        
        default:
            dpm('Invalid form stage.', 'error');
            break;
    }
    
    $suffix = '
        <script>
        jQuery(document).ready(function(){
            jQuery(\'[data-toggle="tooltip"]\').tooltip();   
        });
        </script>';
    
    if (isset($form['#suffix'])){
        $form['#suffix'] .= $suffix;
    }
    else {
        $form['#suffix'] = $suffix;
    }
    
    drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
    
    return $form;
}

function tpps_main_validate(&$form, &$form_state){
    
    if ($form_state['triggering_element']['#value'] == 'Back' or $form_state['triggering_element']['#value'] == 'Save'){
        
        save_file_columns($form, $form_state);
        return;
    }
    
    switch ($form_state['stage']){
        case PAGE_1:
            require_once('forms/validate/page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        case PAGE_2:
            require_once('forms/validate/page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        case PAGE_3:
            require_once('forms/validate/page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        case PAGE_4:
            require_once('forms/validate/page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . TPPS_JS_PATH);
            break;
        
        default:
            break;
    }
    
    if (!form_get_errors()){
        $form_state['values']['#cleared'] = TRUE;
        //dpm($form_state['values']['#cleared']);
    }
    else {
        $form_state['values']['#cleared'] = FALSE;
    }
}

function tpps_main_submit($form, &$form_state){
    
    global $user;
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    $persist = TRUE;
    
    if ($form_state['triggering_element']['#value'] == 'Save'){
        dpm('Your information has been saved!');
        
        if (isset($form_state['saved_values']['form_build_id'])){
            $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
        }
        $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
        $form_state['rebuild'] = TRUE;
        
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
        return;
    }
    
    switch ($form_state['stage']){
        case 'frontpage':
            $persist = FALSE;
            $form_state['stage'] = PAGE_1;
            break;
        
        case PAGE_1:
            $form_state['stage'] = PAGE_2;
            break;
            
        case PAGE_2:
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = PAGE_1;
            }
            else{
                $form_state['stage'] = PAGE_3;
            }
            break;
            
        case PAGE_3:
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = PAGE_2;
            }
            else{
                $form_state['stage'] = PAGE_4;
            }
            break;
            
        case PAGE_4:
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = PAGE_3;
            }
            else{
                $form_state['stage'] = 'summarypage';
            }
            break;
            
        case 'summarypage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = PAGE_4;
            }
            else{
                variable_del('tpps_incomplete_' . $user->mail . $form_state['accession']);
                $form_state['status'] = 'Pending Approval';
                variable_set('tpps_complete_' . $user->mail . $form_state['accession'], $form_state);
                tpps_submit_email($form, $form_state);
                //drupal_goto('<front>');
                return;
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
    
    if ($persist){
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
    }
}

function tpps_block_info() { 
  //dpm("BLOCK INFO");   
  $blocks['tpps_status'] = array(
    // info: The name of the block.
    'info' => t('TPPS Status'),
  );

  return $blocks;
}

function tpps_block_view_alter(&$data, $block) {
    //dpm($block);
    //dpm($data);
    global $base_url;
    switch ($block->delta) {
        case 'tpps_status':
            //dpm($_REQUEST);

            $css = "
            .tgdr_status_block img {
                    vertical-align: middle;
                    margin-bottom: 4px;
                    margin-right: 2px;
            }		
            ";
            drupal_add_css($css, 'inline');

            $data['subject'] = t('TPPS Status');
            $content = "<div class='tgdr_status_block'>";
            global $user;
            if (isset($_REQUEST['accession'])){
                $accession = $_REQUEST['accession'];
                $form_state = variable_get('tpps_incomplete_' . $user->mail . $accession);
            }
            else {
                $content .= '</div>';
                $data['content'] = t($content);
                break;
            }
            $ok = "<img src='$base_url/misc/message-16-ok.png'>";
            $flat = tpps_flatten($form_state);
            
            foreach ($flat as $item => $val){
                if ($item[0] !== '#'){
                    $item_str = filter_xss(check_plain($item));
                    $val_str = filter_xss(check_plain($val));
                    if (preg_match('/File/', $item) and ($file_name = file_load($val)->filename)){
                        //create links to files
                        $file_url = check_plain(file_create_url(file_load($val)->uri));
                        $val_str = "<a href='$file_url' target='blank'>$file_name</a>";
                    }
                    elseif (preg_match('/Month/', $item)){
                        //skip experiment start/end month
                        continue;
                    }
                    elseif (preg_match('/^(.*)Year/', $item, $matches)){
                        //combine experiment start/end month + year
                        if (isset($flat[$matches[1] . 'Month'])){
                            $item_str = $matches[1] . 'Date';
                            $val_str = "{$flat[$matches[1] . 'Month']} $val_str";
                        }
                        else {
                            continue;
                        }
                    }
                    elseif (preg_match('/Study Location/', $item) and isset($flat['#location_type']) and $flat['#location_type']){
                        //add map capability to location
                        if ($flat['#location_type'] == '2'){
                            $query = $val_str;
                        }
                        elseif ($flat['#location_type'] != '2' and ($standard = tpps_standard_coord($val_str))){
                            $query = $standard;
                        }
                        $val_str = "<a id=\"sidebar_map\" style=\"cursor:pointer\">$val_str</a>";
                        if (isset($query)){
                            $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=AIzaSyDkeQ6KN6HEBxrIoiSCrCHFhIbipycqouY&z=5\\\" allowfullscreen> </iframe></div>";
                            $js = "jQuery(document).ready(function ($) {
                                jQuery(\"#sidebar_map\").click(function() {
                                    jQuery(\"#sidebar_map_wrapper\").remove();
                                    jQuery(\"#sidebar_map\").after( \"<br><div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                                });
                            });";
                            drupal_add_js($js, 'inline');
                        }
                    }
                    $content .= "$ok $item_str: $val_str <br />";
                }
                elseif (preg_match('/#page_(.)_cleared/', $item, $matches)){
                    //break between pages
                    if ($val){
                        $step_arr = array(
                          1 => 'Author and Species Information',
                          2 => 'Experimental Conditions',
                          3 => 'Tree Accession',
                          4 => 'Submit Data'
                        );
                        if ($matches[1] > 1){
                            $content .= '<br />';
                        }
                        $content .= "$ok Step {$matches[1]} - Complete<br />{$step_arr[$matches[1]]}<br /><hr />";
                    }
                    else {
                        //if page not cleared, do not display remaining form state data
                        break;
                    }
                }
            }
            
            $content .= "</div>";
            $data['content'] = t($content);

            break;
        default:
            break;
    }
}
