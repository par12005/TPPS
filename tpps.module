<?php

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['master'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_master'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'tpps_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['genus/autocomplete'] = array(
      'title' => 'Autocomplete for genus',
      'page callback' => '_genus_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => '_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
	
	
	/******************************************
	This creates a URL for processing Excel header columns
	It's AJAX but our very own. It returns a json array with the columns
	*******************************************/	    
	$items['master/get-excel-header-columns-and-sample-rows'] = array(
		'page callback' => 'ajax_get_excel_header_columns_and_sample_rows',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	
    return $items;
}

function tpps_ajaxCallHandler() {

    global $user;

    if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'my secret value' . $user->uid)) {
        return MENU_ACCESS_DENIED;
    }

    echo "Hello, " . filter_xss($_GET['name']) . "!";
}

/******************************************
This processes Excel header columns
It's AJAX but our very own. It returns a json array
*******************************************/	  
function ajax_get_excel_header_columns_and_sample_rows($file_location) {

	$results = array();
	$file_location = filter_xss($file_location);
	  
	global $base_url;
	//Replace $base_url with DRUPAL_ROOT
	$file_location = str_ireplace('|', '/', $file_location);
	$file_location = DRUPAL_ROOT . $file_location; //this should contain the file_location path

	//Process FILE using the excel parser - TODO
	//$results['file_location'] = $file_location;
	$results_content = parse_xlsx_headers_and_sample_rows($file_location);
	
	//print_r($file_location);
	//print_r($results_content);
	//$results = $results_content['headers'];
	
	drupal_json_output($results_content);
}

function tpps_master_add_excel_load_js() {
	global $base_url;
	
	
	/******************************************
	Javascript process excel file data (JS)
	Oh yeah, it get's rather messy, thanks to the lack of
	documentation on manage_file api, I had to do this...
	*******************************************/	
	$js = "
			function load_excel_header_columns_and_sample_rows(id_of_managed_file, id_of_column_textfield, id_prefix, column_names) {
				//genus = jQuery('#helper_genus_genus_select_' + index).val();
				//window.alert(genus);	

				managed_file_element = document.getElementById(id_of_managed_file);
				if(managed_file_element == 'undefined') {
					window.alert('Could not find the id of the managed file, please contact administrator');
					return;
				}
				a_elements = managed_file_element.getElementsByTagName('a');
				if(a_elements[0] == null) {
					window.alert('You must upload a file before you can populate column data!');
					textfield_element = document.getElementById(id_of_column_textfield);
					textfield_element.value = '';
					return;
				}
				else {
					//window.alert(a_elements[0]);
					//window.alert(a_elements[0].href);
					base_url = '$base_url';
					link = a_elements[0].href;
					link = link.split(base_url).join('');
					link = link.split('/').join('|');
					//window.alert(link);
				}
				
				jQuery.getJSON('$base_url/master/get-excel-header-columns-and-sample-rows/' +  link, function( data ) {
					//window.alert(data);


					var items = [];
					//items.push('- Select Species -');
					textfield_element = document.getElementById(id_of_column_textfield);
					jQuery.each(data['headers'], function( key, val ) {
						//console.log(key); 
						if(key != '') {
							items.push(key + ',' + val); //concat as a CSV key,val record
							//window.alert(key + ':' + val);
							textfield_element.value = textfield_element.value + val + ','; 							
						}
					});
				
					//This processes the suffixes of the ids of each select item specified as CSV values
					var id_suffixes = column_names;
					var suffixes = id_suffixes.split(','); //get individual values by splitting by commas
					var suffixes_count = suffixes.length;
					var items_count = items.length;
					
					//Generate the options list which contains all columns
					item_options = '';
					item_options = item_options +  '<option>Select column</option>';
					for(j=0; j<items_count; j++) {
						item_comma_parts = items[j].split(',');
						//window.alert(item_comma_parts);
						
						item_options = item_options + '<option value=\'' + item_comma_parts[1] + '\'>'  + item_comma_parts[1] +  '</option>';

					}
					//window.alert(item_options);
					
					
					for (i=0; i<suffixes_count; i++) {
						//window.alert(id_prefix + '-' + suffixes[i]);
						//console.log(id_prefix + '-' + suffixes[i]);
						var select_element = document.getElementById(id_prefix + '-' + suffixes[i]);
						//window.alert(select_element);
						select_element.innerHTML = item_options;
					}
					
					//Process Rows
					var row_count = 0;
					var sample_table = '<h3>Sample data detected</h3><table><thead>';
					
					jQuery.each(data['headers'], function( key, val ) {
						//console.log(key); 
						sample_table = sample_table + '<td>' + val + '</td>'; 
					});					
					
					sample_table = sample_table + '</thead>';
					sample_table = sample_table + '<tbody>';
					jQuery.each(data['rows'], function( index ) {
						//window.alert(index);
						//window.alert(data['rows'][row_count]);
						sample_table = sample_table + '<tr>';
						jQuery.each(data['rows'][row_count], function (key, val) {
							//window.alert(val);
							sample_table = sample_table + '<td>' + val + '</td>';
						});
						row_count = row_count + 1;
						sample_table = sample_table + '</tr>';
					});					
					sample_table = sample_table + '</tbody></table>';
					
					table = document.getElementById(id_prefix + '-sample-data');
					table.innerHTML = sample_table;
				});
			}	
	";
	
	drupal_add_js($js, 'inline');
}
	
function tpps_compare_temp($table, $column, $is_primary = FALSE, array $condition = array()){
    
    /*  A function to compare the max value in a temp table to the max value in a public table
     *  $is_primary denotes whether or not the $column being compared is the primary key, default false
     *  $condition is optional, if provided is passed into condition() when the function is looking for the max
     */
    
    if ($is_primary){
        $temp_column = "tpps_$column";
    }
    else{
        $temp_column = $column;
    }
    
    $temp_max = db_select("chado.tpps_$table", "tpps_$table")
        ->fields("tpps_$table", array("$temp_column"));

    $public_max = db_select("chado.$table", "$table")
        ->fields("$table", array("$column"));
    
    if ($condition != array()){
        call_user_func_array(array($temp_max, 'condition'), $condition);
        call_user_func_array(array($public_max, 'condition'), $condition);
    }
    
    $temp_max->orderBy("$temp_column", 'DESC')
        ->range(0, 1);
    $public_max->orderBy("$column", 'DESC')
        ->range(0, 1);
    
    $temp_max = $temp_max->execute();
    $public_max = $public_max->execute();
    
    foreach($temp_max as $row){
        $temp_val = $row->{$temp_column};
        break;
    }
    
    foreach($public_max as $row){
        $public_val = $row->{$column};
        break;
    }
    
    if (!isset($public_val) and !isset($temp_val)){
        return NULL;
    }
    
    $max_val = (!isset($public_val) or $temp_val > $public_val) ? $temp_val : $public_val;
    
    return $max_val;
}

function tpps_init_project($form, &$form_state){
    
    
    /*
     * need to add conditions for when there are not projects already in the public OR temp tables
     */
    
    
    //Get next dbxref_id and accession # for project
    $dbxref_id = tpps_compare_temp('dbxref', 'dbxref_id', TRUE) + 1;
    $accession = tpps_compare_temp('dbxref', 'accession', FALSE, array('accession', db_like('TGDR') . '%', 'LIKE'));
    
    if ($accession === NULL){
        $accession = "TGDR001";
    }
    else {
        $accession = substr($accession, 4) + 1;
    }
    
    while (strlen($accession) < 3){
        $accession = "0" . $accession;
    }
    $accession = "TGDR" . $accession;

    //testing purposes only:
    //print_r("tpps_dbxref_id: " . $dbxref_id);
    //print_r(" | accession: " . $accession);
    
    //make new record in temp table
    $values = array(
      'tpps_dbxref_id' => $dbxref_id,
      'db_id' => '95',
      'accession' => $accession
    );
    
    $insert = db_insert('chado.tpps_dbxref')
        ->fields($values);
        //->execute();
    
    //tpps_create_record('tpps_dbxref', $values);

    $form_state['dbxref_id'] = $dbxref_id;
    $form_state['accession'] = $accession;
    
    //project will be created when name is provided, after the first page is complete.
    return $insert;
}

function tpps_create_record($table, $primary_key, array $values){
    $default_fields = array();
    $insert = NULL;
    
    if (substr($primary_key, 0, 5) == 'tpps_'){
        $compare_primary = substr($primary_key, 5);
    }
    else {
        $compare_primary = $primary_key;
    }
    
    if (substr($table, 0, 5) == 'tpps_'){
        $compare_table = substr($table, 5);
    }
    else {
        $compare_table = $table;
    }
    
    //get the new primary key (increment by 1 from the old primary key)
    $new_primary = tpps_compare_temp($compare_table, $compare_primary, TRUE) + 1;
    $values["$primary_key"] = $new_primary;
    
    //check record exists
    if (tpps_record_exists($compare_table, $values) or tpps_record_exists($table, $values)){
        //if it does, do not attempt to re-write it.
        //drupal_set_message(t('Error: Record already exists.'), 'error');
        return $values[$primary_key];
    }
    
    $fields = db_select("chado.$table", 't')
        ->fields('t')
        ->range(0,1)
        ->execute()
        ->fetchAssoc();
    
    //get default values
    foreach ($fields as $key => $value){
        if (!isset($values[$key])){
            array_push($default_fields, $key);
        }
    }
    
    //print_r($default_fields);
//    dpm($table);
//    dpm($values);
//    dpm($default_fields);
    
    //Insert the record
    $insert = db_insert("chado.$table")
        ->useDefaults($default_fields)
        ->fields($values)
        ->execute();
    
    return $insert;
}

function tpps_record_exists($table, array $values){
    
    $unique_columns = tpps_get_unique_columns($table);
    
    $results = db_select("chado.$table", 't')
        ->fields('t');
    
    $and = db_and();
    foreach ($unique_columns as $field){
        if (isset($values[$field])){
            $value = $values[$field];
            if ($value != ''){
                $and->condition("$field", db_like("$value"), 'LIKE');
            }
        }
    }
    
    $results->condition($and);
    
    $results = $results->execute()
        ->fetchAssoc();
    
    if ($results){
        return TRUE;
    }
    
    return FALSE;
}

function tpps_get_unique_columns($table){
    
    $result = db_query("select indexdef from pg_indexes where tablename = '$table' and indexdef LIKE '%UNIQUE%' and indexname NOT LIKE '%_pkey';")
        ->fetchAssoc();
    
    $result = preg_split('/(\(|\))/',$result['indexdef']);
    $result = explode(', ', $result[1]);
    
    return $result;
}

function tpps_master($form, &$form_state){
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
	global $base_url;
	tpps_master_add_excel_load_js();
	
	/******************************************
	Add status bar showing completed parts at the top
	*******************************************/
	//dpm($form_state['saved_values']);

	$form['#prefix'] = '<style>
		.tgdr_form_status div {
			display: inline-block;
			padding: 3px;
			margin-right: 10px;
		}
		
		.tgdr_form_status div img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}
		
		.tgdr_form_status {
			padding: 5px;
			background-color: #f9db04;
			border: 1px solid #f3cb3d;
			border-radius: 4px;
		}
		
		.populate_excel_column_button {
			background-color: #1887d6;
			color: #FFFFFF;
			padding: 6px;
			border-radius: 5px;
		}
	
	</style>';
	$form['#prefix'] .= '<div class="tgdr_form_status">';
	
	/**** Page 1 ****/
	if(isset($form_state['saved_values']['Hellopage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Author and Species Information</div>";
	
	/**** Page 2 ****/
	if(isset($form_state['saved_values']['secondPage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Experimental Conditions</div>";	

	/**** Page 3 ****/
	if(isset($form_state['saved_values']['thirdPage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Tree Accession</div>";	
	
	/**** Page 4 ****/
	if(isset($form_state['saved_values']['fourthPage'])) {
		$image_fname = 'message-16-ok.png';
	}
	else {
		$image_fname = 'help.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Submit Data</div>";	
	
	$form['#prefix'] .= '</div>';
	
	/******************************************
	END of status bar code
	*******************************************/
	
	
    global $user;
    //dpm($user);
    if (isset($user->roles[1]) and $user->roles[1] == 'anonymous user'){
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    else{
  	$and = db_and();
	$and->condition('value', $user->mail);
	$and->condition('type_id', '50268');
	$contact_id = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('contact_id'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$contact_id = $contact_id['contact_id'];
        $name = db_select('chado.contact', 'contact')
	    ->fields('contact', array('name'))
	    ->condition('contact_id', $contact_id)
	    ->execute()
	    ->fetchAssoc();
	$name = $name['name'];
	$form_state['saved_values']['Hellopage']['primaryAuthor'] = $name;
	$and = db_and();
	$and->condition('contact_id', $contact_id);
	$and->condition('type_id', '72');
	$org = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('value'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$org = $org['value'];
	$form_state['saved_values']['Hellopage']['organization'] = $org;
	//dpm($contact_id);
	//dpm($name);
	//dpm($org);
    }
    
    if (!isset($form_state['stage'])){
        $form_state['stage'] = 'Hellopage';
    }
    
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        default:
            print_r('Invalid form stage.');
            break;
    }
    
    //print_r($form_state['stage']);
    
    drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
    
    return $form;
}

function tpps_master_validate($form, &$form_state){
	tpps_master_add_excel_load_js();
	
    if ($form_state['triggering_element']['#value'] == 'Back'){
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        default:
            break;
    }
}

function tpps_master_submit($form, &$form_state){
    
	tpps_master_add_excel_load_js();
	
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    
    switch ($form_state['stage']){
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'fourthPage';
            }
            break;
            
        case 'fourthPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'thirdPage';
            }
            else{
                dpm('submit');
                submit_all($form, $form_state);
                drupal_goto('<front>');
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
}

function submit_all($form, &$form_state){
    
    $dbxref_id = $form_state['dbxref_id'];
    $accession = $form_state['accession'];

    $values = $form_state['saved_values'];
    $firstpage = $values['Hellopage'];

    $project_id = tpps_create_record('tpps_project', 'tpps_project_id', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));

    $project_dbxref_id = tpps_create_record('tpps_project_dbxref', 'tpps_project_dbxref_id', array(
      'project_id' => $project_id,
      'dbxref_id' => $dbxref_id
    ));

    $primary_author_id = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
      'name' => $firstpage['primaryAuthor'],
      'type_id' => '71',
    ));

    $author_string = $firstpage['primaryAuthor'];
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){
        $secondary_author_ids = array();

        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $secondary_author_ids[$i] = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
              'name' => $firstpage['publication']['secondaryAuthors'][$i],
              'type_id' => '71'
            ));
            $author_string .= ", {$firstpage['publication']['secondaryAuthors'][$i]}";
        }
    } elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0) {
        $secondary_author_file = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($firstpage['publication']['secondaryAuthors']['file'])->uri)
        ));
    }

    switch ($firstpage['publication']['status']){
        case ('2'):
            $pub_year = $firstpage['publication']['yearSubmitted'];
            break;
        case ('3'):
            $pub_year = $firstpage['publication']['yearInPress'];
            break;
        case ('4'):
            $pub_year = $firstpage['publication']['yearPublished'];
            break;
        default: 
            $pub_year = "";
            break;
    }

    $publication_id = tpps_create_record('tpps_pub', 'tpps_pub_id', array(
      'title' => $firstpage['publication']['title'],
      'series_name' => $firstpage['publication']['journal'],
      'type_id' => '229',
      'pyear' => $pub_year,
      'uniquename' => "$author_string {$firstpage['publication']['title']}. {$firstpage['publication']['journal']}; $pub_year"
    ));

    $project_pub_id = tpps_create_record('tpps_project_pub', 'tpps_project_pub_id', array(
      'project_id' => $project_id,
      'pub_id' => $publication_id
    ));

    $organization_id = tpps_create_record('tpps_contact', 'tpps_contact_id', array(
      'name' => $firstpage['organization'],
      'type_id' => '72',
    ));

    $names = explode(" ", $firstpage['primaryAuthor']);
    $first_name = $names[0];
    $last_name = implode(" ", array_slice($names, 1));

    $pubauthor_id = tpps_create_record('tpps_pubauthor', 'tpps_pubauthor_id', array(
      'pub_id' => $publication_id,
      'rank' => '1',
      'surname' => $last_name,
      'givennames' => $first_name
    ));

    $organism_ids = array();
    $organism_number = $firstpage['organism']['number'];

    for ($i = 1; $i <= $organism_number; $i++){
        $parts = explode(" ", $firstpage['organism'][$i]['species']);
        $organism_ids[$i] = tpps_create_record('tpps_organism', 'tpps_organism_id', array(
          'genus' => $parts[0],
          'species' => implode(" ", array_slice($parts, 1)),
        ));
    }
    /***************************
     * Second Page submissions *
     ***************************/

    $secondpage = $values['secondPage'];

    $month_options = array(
      '0' => '- Select -',
      '1' => 'January',
      '2' => 'February',
      '3' => 'March',
      '4' => 'April',
      '5' => 'May',
      '6' => 'June',
      '7' => 'July',
      '8' => 'August',
      '9' => 'September',
      '10' => 'October',
      '11' => 'November',
      '12' => 'December'
    );

    $start = $month_options[$secondpage['StartingDate']['month']] . " " . $secondpage['StartingDate']['year'];
    $end = $month_options[$secondpage['EndingDate']['month']] . " " . $secondpage['EndingDate']['year'];

    $start_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '127996',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $start
    ));
    
    $end_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '127997',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $end
    ));
    
    if ($secondpage['studyLocation']['type'] !== '2'){
        $location = $secondpage['studyLocation']['latitude'] . ' Latitude, ' . $secondpage['studyLocation']['longitude'] . ' Longitude';
    }
    else{
        $location = $secondpage['studyLocation']['customLocation']['region'] . ', ' . $secondpage['studyLocation']['customLocation']['country'];
    }
    
    $study_location_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '127998',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $location
    ));
    
    $datatype_options = array(
      '0' => '- Select -',
      '1' => 'Genotype x Phenotype',
      '2' => 'Genotype',
      '3' => 'Genotype x Phenotype x Environment',
      '4' => 'Phenotype x Environment',
      '5' => 'Genotype x Environment'
    );
    
    $datatype = $datatype_options[$secondpage['dataType']];
    
    $datatype_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '54740',
      'value' => $datatype
    ));
    
    $studytype_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    
    $study_type = $studytype_options[$secondpage['studyType']];
    
    $study_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
      'project_id' => $project_id,
      'type_id' => '128021',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
      'value' => $study_type
    ));
    
    /******************************************
     * Specific Questions based on study type *
     ******************************************/
    
    switch($secondpage['studyType']){
        case ('1'):
            $natural_population = $secondpage['naturalPopulation'];
            $number_assessions = $natural_population['assessions'];
            $seasons = "";
            foreach ($natural_population['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            break;
        case ('2'):
            $growth_chamber = $secondpage['growthChamber'];
            $co2 = $growth_chamber['co2Control'];
            $humidity = $growth_chamber['humidityControl'];
            $light = $growth_chamber['lightControl'];
            $temp_high = $growth_chamber['temp']['high'];
            $temp_low = $growth_chamber['temp']['low'];
            $rooting = $growth_chamber['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($co2['option'] == '1'){
                $co2_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $co2_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['controlled']
                ));
            }
            else{
                $co2_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $co2_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['uncontrolled']
                ));
            }

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['uncontrolled']
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['uncontrolled']
                ));
            }

            $temp_high_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['uncontrolled']
                ));
            }

            $treatment_ids = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('3'):
            $greenhouse = $secondpage['greenhouse'];
            $humidity = $greenhouse['humidityControl'];
            $light = $greenhouse['lightControl'];
            $temp_high = $greenhouse['temp']['high'];
            $temp_low = $greenhouse['temp']['low'];
            $rooting = $greenhouse['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $temp_high_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('4'):
            $commonGarden = $secondpage['commonGarden'];
            $salinity = $commonGarden['salinity'];
            $biotic_env = $commonGarden['bioticEnv']['option'];
            $seasons = "";
            $treatments = $commonGarden['treatment'];

            $irrigation_options = array(
              0 => '- Select -',
              1 => 'Irrigation from top',
              2 => 'Irrigation from bottom',
              3 => 'Drip Irrigation',
              4 => 'Other',
              5 => 'No Irrigation',
            );
            $irrigation_type = $irrigation_options[$commonGarden['irrigation']['option']];
            if ($irrigation_type == 'Other'){
                $irrigation_type = $commonGarden['irrigation']['other'];
            }
            
            $irrigation_type_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128016',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $irrigation_type
            ));

            if ($salinity['option'] == '1'){
                $salinity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $salinity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['controlled']
                ));
            }
            else{
                $salinity_control_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $salinity_value_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['uncontrolled']
                ));
            }

            $biotic_env['Other'] = $commonGarden['bioticEnv']['other'];
            $biotic_env_id = array();
            foreach ($biotic_env as $key => $check){
                if ($check == '1'){
                    $biotic_env_id[$key] = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '128019',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $key
                    ));
                }
            }

            foreach ($commonGarden['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            $season_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('5'):
            $plantation = $secondpage['plantation'];
            $number_assessions = $plantation['assessions'];
            $seasons = "";
            $treatments = $plantation['treatment'];
            
            foreach ($plantation['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            
            if ($plantation['treatment']['check'] != 0){
                $treatment_id = array();
                $is_description = FALSE;
                $rank = 0;
                foreach ($treatments as $item){
                    if (!$is_description){
                        if ($item == '1'){
                            $record_next = TRUE;
                        }
                        else{
                            $record_next = FALSE;
                        }
                        $is_description = TRUE;
                    }
                    else{
                        if ($record_next){
                            array_push($treatment_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                              'project_id' => $project_id,
                              'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $item,
                              'rank' => $rank
                            )));
                            $rank++;
                        }
                        $is_description = FALSE;
                    }
                }
            }
            break;
        default:
            break;
    }
    /**************************
     * Third Page submissions *
     **************************/
    
    $thirdpage = $values['thirdPage'];
    $fourthpage = $values['fourthPage'];
    
    if ($organism_number == '1' or $thirdpage['tree-accession']['check'] == 0){
        $tree_accession_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($thirdpage['tree-accession']['file'])->uri)
        ));
    }
    else {
        for($i = 0; $i < $organism_number; $i++){
            $tree_accession_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($thirdpage['tree-accession']["species-$i"]['file'])->uri)
            ));
        }
    }
    
    /***************************
     * Fourth Page submissions *
     ***************************/
    
    //these are messy. File parsing will clean them up. currently, all file paths are being stored in the chado.projectprop table.
    //it will be better when they can be stored in genotypeprop or phenotypeprop, but that required file parsing first.
    
    for ($i = 0; $i < $organism_number; $i++){
        
        if (isset($fourthpage["organism-$i"]['phenotype'])){
            $phenotype = $fourthpage["organism-$i"]['phenotype'];
            $phenotype_number = $phenotype['number'];
            
            if ($phenotype['check'] !== '1'){
                $phenotype_ids = array();
                for ($j = 1; $j < $phenotype_number; $j++){
                    $current_phenotype = $phenotype[$j];
                    
                    $phenotype_ids[$j] = tpps_create_record('tpps_phenotype', 'tpps_phenotype_id', array(
                      'uniquename' => $current_phenotype['name']
                    ));
                    
                    $unit_options = array(
                      0 => '- Select -',
                      1 => 'mm', 
                      2 => 'cm',
                      3 => 'm', 
                      4 => 'Degrees Celsius',
                      5 => 'Degrees Fahrenheit',
                      6 => 'Other'
                    );
                    
                    if ($current_phenotype['environment-check'] == '1'){
                        $environment = $current_phenotype['environment'];
                        
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '2834',
                          'value' => $environment['description']
                        ));
                        
                        if ($environment['units'] !== '6'){
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $unit_options[$environment['units']]
                            ));
                        }
                        else {
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $environment['units-other']
                            ));
                        }
                        
                    }
                    else {
                        $non_environment = $current_phenotype['non-environment'];
                        
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '2834',
                          'value' => $non_environment['description']
                        ));
                        
                        if ($non_environment['units'] !== '6'){
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $unit_options[$non_environment['units']]
                            ));
                        }
                        else {
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '2842',
                              'value' => $non_environment['units-other']
                            ));
                        }
                        
                        $type = $non_environment['type'];
                        $structure = $non_environment['structure'];
                        $developmental = $non_environment['developmental'];
                        
                        if ($type === '1'){
                            $binary_1 = $non_environment['binary'][1];
                            $binary_2 = $non_environment['binary'][2];
                            
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '128023',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $binary_1
                            ));
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '128023',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $binary_2
                            ));
                        }
                        elseif ($type === '2'){
                            $min = $non_environment['quantitative']['min'];
                            $max = $non_environment['quantitative']['max'];

                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '52214',
                              'value' => $min
                            ));
                            tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                              'phenotype_id' => $phenotype_ids[$j],
                              'type_id' => '52213',
                              'value' => $max
                            ));
                        }
                        
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '50292',
                          'value' => $structure
                        ));
                        tpps_create_record('tpps_phenotypeprop', 'tpps_phenotypeprop_id', array(
                          'phenotype_id' => $phenotype_ids[$j],
                          'type_id' => '50292',
                          'value' => $developmental
                        ));
                    }
                }
            }
            else{
                $phenotype_file_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($phenotype['metadata'])->uri)
                ));
            }
            
            
        }
        
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $genotype = $fourthpage["organism-$i"]['genotype'];
            
            if ($genotype['marker-type']['SNPs'] == 'SNPs'){
                $snps = $genotype['SNPs'];
                $assembly_check = $snps['assembly-check'];
                
                if ($assembly_check === '0'){
                    $project_dbxref_id = tpps_create_record('tpps_project_dbxref', 'tpps_project_dbxref_id', array(
                      'project_id' => $project_id,
                      'dbxref_id' => $snps['BioProject-id'],
                    ));
                    
                    $bioproject_assembly_file_ids = array();
                    
                    foreach ($genotype['SNPs']['assembly-auto'] as $item){
                        if ($item !== '0'){
                            array_push($bioproject_assembly_file_ids, tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                              'project_id' => $project_id,
                              'type_id' => '2836',
                              'value' => "https://www.ncbi.nlm.nih.gov/nuccore/$item"
                            )));
                        }
                    }
                }
                else {
                    $assembly_user = $snps['assembly-user'];
                    $assembly_user_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
                      'project_id' => $project_id,
                      'type_id' => '2836',
                      'value' => file_create_url(file_load($assembly_user)->uri)
                    ));
                }
                
            }
            
            $genotype_file_id = tpps_create_record('tpps_projectprop', 'tpps_projectprop_id', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($genotype['file']))
            ));
            
        }
    }
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function _species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function _phenotype_autocomplete($string){
    $matches = array();
    
    $result = db_select('chado.phenotype', 'phenotype')
        ->fields('phenotype', array('name'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function parse_xlsx_headers_and_sample_rows($location){
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = DRUPAL_ROOT . '/sites/default/files';
    //echo $dir;
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;
	//echo file_get_contents($dir . '/xl/worksheets/sheet1.xml');
	$row_count = 0;
    foreach ($xlrows as $xlrow) {
        $arr = array();
		$row_count = $row_count + 1;
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if ($row_count == 1) {
            $headers = $arr;
            $content['headers'] = $headers;
			
			
        } 
		
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content['rows'][] = $row;
			if ($row_count == 3) {
				break; //exit the parent foreach loop since all we need is the headers
			}
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function parse_xlsx($location){
    
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = '/var/www/Drupal/sites/default/files';
    
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;

    foreach ($xlrows as $xlrow) {
        $arr = array();
        
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if (!isset($headers)) {
            $headers = $arr;
            $content['headers'] = $headers;
        } 
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content[] = $row;
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function tpps_test_page($form, &$form_state){
    
    
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
    );
    
    return $form;
}

function tpps_test_page_validate($form, &$form_state){
    
}

function tpps_test_page_submit($form, &$form_state) {
    
}

function tpps_block_info() { 
  dpm("BLOCK INFO");   
  $blocks['tpps_status'] = array(
    // info: The name of the block.
    'info' => t('TPPS Status'),
  );

  return $blocks;
}

/***********************
This was supposed to be the function to display the block
But as usual with Drupal, things work and things just don't
work.
***********************/
function ttps_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  //dpm("TPPS Block executed");
  //$block = array();
  
  /*
  switch ($delta) {
    case 'tpps_status':
      // Create your block content here
		$block['subject'] = t('My last 3 news');
		$block['content'] = t('This is the content');
		
		break;
   }
  return $block;]
  */
}

function tpps_block_view_alter(&$data, $block) {
	//dpm($block);
	//dpm($data);
	global $base_url;
  switch ($block->delta) {
    case 'tpps_status':
		//dpm($_REQUEST);
		
		$css = "
		.tgdr_status_block img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}		
		";
		drupal_add_css($css, 'inline');
		
	  	$data['subject'] = t('TPPS Status');
		$content = "<div class='tgdr_status_block'>";
		global $user;
		
		//Don't get mix upload
		if(count($_REQUEST) <= 0) {
			unset($_SESSION['tgdr_submit_data']);
		}
		
		//This deals with page 1
		if(isset($_REQUEST['primaryAuthor'])) {
			unset($_SESSION['tgdr_submit_data']);
			$_SESSION['tgdr_submit_data'][0] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['primaryAuthor'])) {
			$content .= "Step 1 - Complete<br />";
			$content .= "Author/Species Information<hr />";
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Author: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['primaryAuthor'])) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['organization'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Organization: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['organization'])) . "<br />";
		}	
		if(isset($_SESSION['tgdr_submit_data'][0]['publication']['title'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Pub Title: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['publication']['title'])) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['publication']['yearInPress'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Pub Year: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['publication']['yearInPress'])) . "<br />";
		}	
		if(isset($_SESSION['tgdr_submit_data'][0]['publication']['secondaryAuthors']['number'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Secondary Authors: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['publication']['secondaryAuthors']['number'])) . "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][0]['organism']['number'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Organisms: '. filter_xss(check_plain($_SESSION['tgdr_submit_data'][0]['organism']['number'])) . "<br />";
		}	

		//This deals with page 2
		if(isset($_REQUEST['StartingDate'])) {
			if(isset($_SESSION['tgdr_submit_data'][1])) {
				unset($_SESSION['tgdr_submit_data'][1]);
			}
			$_SESSION['tgdr_submit_data'][1] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
		}
		//dpm($_SESSION['tgdr_submit_data']);
		if(isset($_SESSION['tgdr_submit_data'][1]['StartingDate'])) {
			$content .= "<br />";
			$content .= "Step 2 - Complete<br />";
			$content .= "Experimental Conditions<br /><hr />";
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Starting Date' .  "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][1]['EndingDate'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Ending Date' .  "<br />";
		}
		if(isset($_SESSION['tgdr_submit_data'][1]['studyLocation'])) {
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Study Location' .  "<br />";
		}

		//This deals with page 3
		if(isset($_REQUEST['tree-accession'])) {
			if(isset($_SESSION['tgdr_submit_data'][2])) {
				unset($_SESSION['tgdr_submit_data'][2]);
			}
			$_SESSION['tgdr_submit_data'][2] = $_REQUEST; //wondering if this is actually safe... not sure... I guess it's in a variable so yes?...
		}		
		if(isset($_SESSION['tgdr_submit_data'][2]['tree-accession'])) {
			$content .= "<br />";
			$content .= "Step 3 - Complete<br />";
			$content .= "Tree Accession<br /><hr />";
			$content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Tree Accession data' .  "<br />";
		}
		
		//Page 4 cannot really be dealt with at this point because this it the submission page which will load whichever page
		//it is redirected to
		
		$content .= "</div>";
		$data['content'] = t($content);
		
       break;
  }
}
