<?php

//hook_init
function tpps_init() {

//    drupal_set_message("Hello");
}

function tpps_menu() {

    $items = array();

    $items['master'] = array(
      'title' => 'Tripal Plant PopGen Submit pipeline',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_master'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['user/%user/TPPS'] = array(
      'title' => 'TPPS Submissions',
      'page callback' => 'tpps_tab_create',
      'page arguments' => array('user', 1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK
    );
    
    $items['completed-submission'] = array(
      'title' => 'TPPS Completed Submission',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_completed_display'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['testpage'] = array(
      'title' => 'TPPS test page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tpps_test_page'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );

    $items['getHello'] = array(
      'page callback' => 'tpps_ajaxCallHandler',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['author/autocomplete'] = array(
      'title' => 'Autocomplete for Authors',
      'page callback' => '_author_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['organization/autocomplete'] = array(
      'title' => 'Autocomplete for Organizations',
      'page callback' => '_organization_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['journal/autocomplete'] = array(
      'title' => 'Autocomplete for Publications',
      'page callback' => '_journal_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['phenotype/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Name',
      'page callback' => '_phenotype_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['attribute/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Attribute',
      'page callback' => '_attribute_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['units/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Units',
      'page callback' => '_units_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items['structure/autocomplete'] = array(
      'title' => 'Autocomplete for Phenotype Structure',
      'page callback' => '_structure_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    return $items;
}

function tpps_tab_create($type, $user, $name = NULL){
    
    $email = $user->mail;
    $state_name = 'tpps_incomplete_' . $email;
    $params = drupal_get_query_parameters();
    $final = "";
    $t1 = $t2 = FALSE;
    
    if (isset($params['accession']) and isset($params['action']) and $params['action'] === 'DELETE'){
        $delete_name = $state_name . $params['accession'];
        $results = db_select("public.variable", "variable")
            ->fields('variable')
            ->condition('name', db_like($delete_name), 'LIKE')
            ->execute()
            ->fetchAssoc();
        
        variable_del($results['name']);
        $and = db_and()
            ->condition('accession', $params['accession'])
            ->condition('db_id', 95);
        $results = db_delete('chado.tpps_dbxref')
            ->condition($and)
            ->execute();
        
        //dpm($results);
    }
    
    $results = db_select("public.variable", "variable")
        ->fields('variable')
        ->condition('name', db_like($state_name) . '%', 'LIKE')
        ->execute();
    
    $style = 
    '<style>
        .tpps_profile_tab {
            background: #ffffff;
            border: 1px solid #cccccc;
            border-radius: 4px;
            padding: 0px 10px;
        }
    </style>';
    $display = "<label for='tpps_incomplete_table'>Incomplete Submissions</label><div class='tpps_profile_tab'><table id='tpps_incomplete_table' style='width:-webkit-fill-available' border='1'><thead>";
    $display .= "<tr><th>Title</th><th>Primary Author</th><th>Number of Species</th><th>Abstract</th><th>Journal</th><th></th></tr>";
    $display .= "</thead><tbody>";
    
    foreach ($results as $item){
        $name = $item->name;
        $state = variable_get($name, NULL);
        
        $display .= "<tr>";
        
        if (isset($state['saved_values']['Hellopage']['publication']['title'])){
            $title = check_plain($state['saved_values']['Hellopage']['publication']['title']);
            $display .= "<td><a href='/Drupal/master?accession={$state['accession']}' style='text-decoration: underline;'>$title</a></td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['primaryAuthor'])){
            $author = check_plain($state['saved_values']['Hellopage']['primaryAuthor']);
            $display .= "<td>$author</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['organism']['number'])){
            $species_number = check_plain($state['saved_values']['Hellopage']['organism']['number']);
            $display .= "<td>$species_number</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['abstract'])){
            $abstract = check_plain($state['saved_values']['Hellopage']['publication']['abstract']);
            if (strlen($abstract) > 103){
                $abstract = check_plain(substr($abstract, 0, 100) . "...");
            }
            $display .= "<td>$abstract</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['journal'])){
            $journal = check_plain($state['saved_values']['Hellopage']['publication']['journal']);
            $display .= "<td>$journal</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['accession'])){
            $display .= "<td style='text-align:center'><input type='submit' id='delete-{$state['accession']}' onclick='";
            $title = (isset($state['saved_values']['Hellopage']['publication']['title'])) ? ' titled ' . $state['saved_values']['Hellopage']['publication']['title'] : '';
            $display .= "if (confirm(\"Attention! \\n\\nAre you sure you want to delete your submission{$title}?\\nThis action cannot be undone, and all of your data will be lost!\")){window.location.href = \"/Drupal/user/{$user->uid}/TPPS?accession={$state['accession']}&action=DELETE\"}";
            $display .= "' name='op' class='form-button' value='Delete'></td>";
        }
        else {
            $display .= '<td></td>';
        }
        
        $display .= "</tr>";
    }
    
    if (!isset($name)){
        $display = $style;
    }
    else {
        $display .= "</tbody></table></div><br>";
        $t1 = TRUE;
    }
    
    $final .= $display;
    $state_name = 'tpps_complete_' . $email;
    $name = NULL;
    
    $results = db_select("public.variable", "variable")
        ->fields('variable')
        ->condition('name', db_like($state_name) . '%', 'LIKE')
        ->execute();
    
    $display = "<label for='tpps_complete_table'>Complete Submissions Pending Approval</label><div class='tpps_profile_tab'><table id='tpps_complete_table' style='width:-webkit-fill-available' border='1'><thead>";
    $display .= "<tr><th>Title</th><th>Primary Author</th><th>Number of Species</th><th>Abstract</th><th>Journal</th></tr>";
    $display .= "</thead><tbody>";
    
    foreach ($results as $item){
        $name = $item->name;
        $state = variable_get($name, NULL);
        
        $display .= "<tr>";
        
        if (isset($state['saved_values']['Hellopage']['publication']['title'])){
            $title = check_plain($state['saved_values']['Hellopage']['publication']['title']);
            $display .= "<td><a href='/Drupal/completed-submission?id={$state['accession']}' style='text-decoration: underline;'>$title</a></td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['primaryAuthor'])){
            $author = check_plain($state['saved_values']['Hellopage']['primaryAuthor']);
            $display .= "<td>$author</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['organism']['number'])){
            $species_number = check_plain($state['saved_values']['Hellopage']['organism']['number']);
            $display .= "<td>$species_number</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['abstract'])){
            $abstract = check_plain($state['saved_values']['Hellopage']['publication']['abstract']);
            if (strlen($abstract) > 103){
                $abstract = check_plain(substr($abstract, 0, 100) . "...");
            }
            $display .= "<td>$abstract</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        if (isset($state['saved_values']['Hellopage']['publication']['journal'])){
            $journal = check_plain($state['saved_values']['Hellopage']['publication']['journal']);
            $display .= "<td>$journal</td>";
        }
        else {
            $display .= "<td></td>";
        }
        
        $display .= "</tr>";
    }
    
    if (!isset($name)){
        $display = "";
    }
    else {
        $display .= "</tbody></table></div><br>";
        $t2 = TRUE;
    }
    
    if (!$t1 and !$t2){
        $display = $style;
        $display .= "<h2>Could not find any Submissions</h2>";
        $display .= "<p>We could not find any incomplete TPPS Submissions or TPPS Submissions pending approval. If you would like to start a new TPPS Submission, you can start <a href=/Drupal/master>here.</a></p>";
    }
    
    $final .= $display;
    
    return $final;
}

function tpps_completed_display($form, $form_state){
    
    global $user;
    $params = drupal_get_query_parameters();
    $accession = $params['id'];
    $link = "/Drupal/tpps_details/accession/$accession";
    
    $old_form_state = variable_get('tpps_complete_' . $user->mail . $accession);
    $values = $old_form_state['saved_values'];
    
    $css = "
    .tgdr_complete_submission {
        background: #ffffff;
        border: 1px solid #cccccc;
        border-radius: 4px;
        padding: 0px 10px;
    }		
    ";
    drupal_add_css($css, 'inline');
    
    $display = "<label for='tpps_$accession'>{$values['Hellopage']['publication']['title']}</label><p>You can view the TPPS Details page with completed and approved TPPS and TGDR data <a href=\"$link\">here</a></p>";
    $display .= "<div class='tpps_complete_submission'><table id='tpps_$accession' style='width:-webkit-fill-available' border='1'><thead>";
    //$display .= "<tr><th>Field</th><th>Value</th>";
    $display .= "</thead><tbody>";
    
    $data = array(
      'Title' => $values['Hellopage']['publication']['title'],
      'Primary Author' => $values['Hellopage']['primaryAuthor'],
      'Organization' => $values['Hellopage']['organization'],
    );
    
    if ((int)($values['Hellopage']['publication']['secondaryAuthors']['number']) > 0 and $values['Hellopage']['publication']['secondaryAuthors']['check'] === 0){
        $data['Secondary Authors'] = $values['Hellopage']['publication']['secondaryAuthors'][1];
        for ($i = 2; $i <= $values['Hellopage']['publication']['secondaryAuthors']['number']; $i++){
            $data['Secondary Authors'] .= ", " . $values['Hellopage']['publication']['secondaryAuthors'][$i];
        }
    }
    elseif ($values['Hellopage']['publication']['secondaryAuthors']['check'] !== 0){
        $file = $values['Hellopage']['publication']['secondaryAuthors']['file'];
        $filename = file_load($file)->filename;
        $file_url = check_plain(file_create_url(file_load($file)->uri));
        $data['Secondary Authors File'] = "<a href='$file_url' target='blank'>$filename</a>";
    }
    
    $data['Publication Status'] = $values['Hellopage']['publication']['status'];
    $data['Publication Year'] = $values['Hellopage']['publication']['year'];
    $data['Abstract'] = $values['Hellopage']['publication']['abstract'];
    $data['Journal'] = $values['Hellopage']['publication']['journal'];
    
    for ($i = 1; $i <= $values['Hellopage']['organism']['number']; $i++){
        $data["Species $i"] = $values['Hellopage']['organism'][$i]['species'];
    }
    
    $data['Experiment Starting Date'] = $values['secondPage']['StartingDate']['month'] . ' ' . $values['secondPage']['StartingDate']['year'];
    $data['Experiment Ending Date'] = $values['secondPage']['EndingDate']['month'] . ' ' . $values['secondPage']['EndingDate']['year'];
    
    if ($values['secondPage']['studyLocation']['type'] != '2'){
        $data['Study Location'] = $values['secondPage']['studyLocation']['coordinates'];
    }
    else {
        $data['Study Location'] = $values['secondPage']['studyLocation']['custom'];
    }
    
    $study_type_options = array(
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    
    $data['Study Type'] = $study_type_options[$values['secondPage']['studyType']];
    
    switch ($values['secondPage']['studyType']){
        case '1':
            $data['Seasons assessed'] = '';
            foreach ($values['secondPage']['naturalPopulation']['season'] as $key => $item){
                if ($item != '0'){
                    $data['Seasons assessed'] .= $item . ' ';
                }
            }
            $data['Average number of assessions'] = $values['secondPage']['naturalPopulation']['assessions'];
            
            break;
        case '2':
            $growth = $values['secondPage']['growthChamber'];
            if ($growth['co2Control']['option'] == '1'){
                $data['CO2 Control'] = 'Controlled';
                $data['CO2 Value'] = $growth['co2Control']['controlled'];
            }
            else {
                $data['CO2 Control'] = 'Uncontrolled';
                $data['CO2 Value'] = $growth['co2Control']['uncontrolled'];
            }
            
            if ($growth['humidityControl']['option'] == '1'){
                $data['Humidity Control'] = 'Controlled';
                $data['Humidity Value'] = $growth['humidityControl']['controlled'];
            }
            else {
                $data['Humidity Control'] = 'Uncontrolled';
                $data['Humidity Value'] = $growth['humidityControl']['uncontrolled'];
            }
            
            if ($growth['lightControl']['option'] == '1'){
                $data['Light Intensity Control'] = 'Controlled';
                $data['Light Intensity Value'] = $growth['lightControl']['controlled'];
            }
            else {
                $data['Light Intensity Control'] = 'Uncontrolled';
                $data['Light Intensity Value'] = $growth['lightControl']['uncontrolled'];
            }
            
            $data['Average High Temperature'] = $growth['temp']['high'];
            $data['Average Low Temperature'] = $growth['temp']['low'];
            
            $rooting_options = array(
              1 => 'Aeroponics',
              2 => 'Hydroponics',
              3 => 'Soil',
            );
            
            $data['Rooting Type'] = $rooting_options[$growth['rooting']['option']];
            
            if ($growth['rooting']['option'] == '3'){
                $soil_options = array(
                  1 => 'Sand',
                  2 => 'Peat',
                  3 => 'Clay',
                  4 => 'Mixed',
                  5 => 'Other'
                );
                $data['Soil Type'] = $soil_options[$growth['rooting']['soil']['type']];
                if ($growth['rooting']['soil']['type'] == '5'){
                    $data['Custom Soil Type'] = $growth['rooting']['soil']['other'];
                }
                $data['Soil Container Type'] = $growth['rooting']['soil']['container'];
            }
            
            if ($growth['rooting']['ph']['option'] == '1'){
                $data['pH Control'] = 'Controlled';
                $data['pH Value'] = $growth['rooting']['ph']['controlled'];
            }
            else {
                $data['pH Control'] = 'Uncontrolled';
                $data['pH Value'] = $growth['rooting']['ph']['uncontrolled'];
            }
            
            $treatment = $growth['rooting']['treatment'];
            $selected = false;
            $description = false;

            foreach ($treatment as $field => $value){
                if (!$description){
                    $description = true;
                    $selected = $value;
                    continue;
                }
                elseif ($selected == '1'){
                    $treatment_name = substr($field, 0, -12);
                    $data["Treatment: $treatment_name description"] = $value;
                }
                $description = false;
            }
            
            break;
        case '3':
            $green = $values['secondPage']['greenhouse'];
            if ($green['humidityControl']['option'] == '1'){
                $data['Humidity Control'] = 'Controlled';
                $data['Humidity Value'] = $green['humidityControl']['controlled'];
            }
            else {
                $data['Humidity Control'] = 'Uncontrolled';
            }
            
            if ($green['lightControl']['option'] == '1'){
                $data['Light Intensity Control'] = 'Controlled';
                $data['Light Intensity Value'] = $green['lightControl']['controlled'];
            }
            else {
                $data['Light Intensity Control'] = 'Uncontrolled';
            }
            
            $data['Average High Temperature'] = $green['temp']['high'];
            $data['Average Low Temperature'] = $green['temp']['low'];
            
            $rooting_options = array(
              1 => 'Aeroponics',
              2 => 'Hydroponics',
              3 => 'Soil',
            );
            
            $data['Rooting Type'] = $rooting_options[$green['rooting']['option']];
            
            if ($green['rooting']['option'] == '3'){
                $soil_options = array(
                  1 => 'Sand',
                  2 => 'Peat',
                  3 => 'Clay',
                  4 => 'Mixed',
                  5 => 'Other'
                );
                $data['Soil Type'] = $soil_options[$green['rooting']['soil']['type']];
                if ($green['rooting']['soil']['type'] == '5'){
                    $data['Custom Soil Type'] = $green['rooting']['soil']['other'];
                }
                $data['Soil Container Type'] = $green['rooting']['soil']['container'];
            }
            
            if ($green['rooting']['ph']['option'] == '1'){
                $data['pH Control'] = 'Controlled';
                $data['pH Value'] = $green['rooting']['ph']['controlled'];
            }
            else {
                $data['pH Control'] = 'Uncontrolled';
            }
            
            $treatment = $green['rooting']['treatment'];
            $selected = false;
            $description = false;

            foreach ($treatment as $field => $value){
                if (!$description){
                    $description = true;
                    $selected = $value;
                    continue;
                }
                elseif ($selected == '1'){
                    $treatment_name = substr($field, 0, -12);
                    $data["Treatment: $treatment_name description"] = $value;
                }
                $description = false;
            }
            
            break;
        case '4':
            $garden = $values['secondPage']['commonGarden'];
            
            $irrigation_options = array(
              1 => 'Irrigation from top',
              2 => 'Irrigation from bottom',
              3 => 'Drip Irrigation',
              4 => 'Other',
              5 => 'No Irrigation',
            );
            
            $data['Irrigation Type'] = $irrigation_options[$garden['irrigation']['option']];
            
            if ($garden['irrigation']['option'] == '4'){
                $data['Custom Irrigation Type'] = $garden['irrigation']['other'];
            }
            
            if ($garden['salinity']['option'] == '1'){
                $data['Salinity Control'] = 'Controlled';
                $data['Salinity Value'] = $garden['salinity']['controlled'];
            }
            else {
                $data['Salinity Control'] = 'Uncontrolled';
                $data['Salinity Value'] = $garden['salinity']['uncontrolled'];
            }
            
            $data['Biotic Environment'] = '';
            foreach ($garden['bioticEnv']['option'] as $key => $val){
                if ($val !== 0){
                    $data['Biotic Environment'] .= $key . ', ';
                }
            }
            
            if ($garden['bioticEnv']['option']['Other'] !== 0){
                $data['Custom Biotic Environment'] = $garden['bioticEnv']['other'];
            }
            
            $data['Seasons assessed'] = '';
            foreach ($garden['season'] as $key => $item){
                if ($item != '0'){
                    $data['Seasons assessed'] .= $item . ' ';
                }
            }
            
            if ($garden['treatment']['check'] !== 0){
                $treatment = $garden['treatment'];
                $selected = false;
                $description = false;

                foreach ($treatment as $field => $value){
                    if ($field != 'check'){
                        if (!$description){
                            $description = true;
                            $selected = $value;
                            continue;
                        }
                        elseif ($selected == '1'){
                            $treatment_name = substr($field, 0, -12);
                            $data["Treatment: $treatment_name description"] = $value;
                        }
                        $description = false;
                    }
                }
            }
            
            break;
        case '5':
            $data['Seasons assessed'] = '';
            foreach ($values['secondPage']['plantation']['season'] as $key => $item){
                if ($item != '0'){
                    $data['Seasons assessed'] .= $item . ' ';
                }
            }
            $data['Average number of assessions'] = $values['secondPage']['plantation']['assessions'];
            
            if ($values['secondpage']['plantation']['treatment']['check'] !== 0){
                $treatment = $values['secondpage']['plantation']['treatment'];
                $selected = false;
                $description = false;

                foreach ($treatment as $field => $value){
                    if ($field != 'check'){
                        if (!$description){
                            $description = true;
                            $selected = $value;
                            continue;
                        }
                        elseif ($selected == '1'){
                            $treatment_name = substr($field, 0, -12);
                            $data["Treatment: $treatment_name description"] = $value;
                        }
                        $description = false;
                    }
                }
            }
            
            break;
        default:
            break;
    }
    
    $data_type_options = array(
      1 => 'Genotype x Phenotype',
      2 => 'Genotype',
      3 => 'Genotype x Phenotype x Environment',
      4 => 'Phenotype x Environment',
      5 => 'Genotype x Environment'
    );
    
    $data['Data Type'] = $data_type_options[$values['secondPage']['dataType']];
    
    if (isset($values['thirdPage']['tree-accession']['check']) and $values['thirdPage']['tree-accession']['check'] != '0'){
        for ($i = 1; $i <= $values['Hellopage']['organism']['number']; $i++){
            $file = $values['thirdPage']['tree-accession']["species-$i"]['file'];
            $filename = file_load($file)->filename;
            $file_url = check_plain(file_create_url(file_load($file)->uri));
            $organism_name = $values['Hellopage']['organism'][$i]['species'];
            $data["$organism_name Accession File"] = "<a href='$file_url' target='blank'>$filename</a>";
        }
    }
    else {
        $file = $values['thirdPage']['tree-accession']['file'];
        if (($file = file_load($file))){
            $filename = $file->filename;
            $file_url = check_plain(file_create_url($file->uri));
            $data['Tree Accession File'] = "<a href='$file_url' target='blank'>$filename</a>";
        }
    }
    
    $units_options = array(
      0 => '- Select -',
      1 => 'mm', 
      2 => 'cm',
      3 => 'm',
      4 => 'Degrees Celsius',
      5 => 'Degrees Fahrenheit',
      6 => 'Other'
    );
    
    $type_options = array(
      1 => 'Binary',
      2 => 'Quantitative',
      3 => 'Qualitative'
    );
    
    for ($i = 1; $i <= $values['Hellopage']['organism']['number']; $i++){
        if ($values['secondPage']['dataType'] == '1' or $values['secondPage']['dataType'] == '3' or $values['secondPage']['dataType'] == '4'){
            $phenotype = $values['fourthPage']["organism-$i"]['phenotype'];
            if ($phenotype['check'] === 0){
                for ($j = 1; $j <= $phenotype['number']; $j++){
                    $data["Phenotype $j"] = $phenotype[$j]['name'];
                    if ($phenotype[$j]['environment-check'] !== 0){
                        $data["Phenotype $j Environmental?"] = 'Yes';
                        $data["Phenotype $j Description"] = $phenotype[$j]['environment']['description'];
                        $data["Phenotype $j Units"] = $units_options[$phenotype[$j]['environment']['units']];
                        if ($phenotype[$j]['environment']['units'] == '6'){
                            $data["Phenotype $j Custom Units"] = $phenotype[$j]['environment']['units-other'];
                        }
                    }
                    else {
                        $data["Phenotype $j Environmental?"] = 'No';
                        $data["Phenotype $j Type"] = $type_options[$phenotype[$j]['non-environment']['type']];
                        if ($phenotype[$j]['non-environment']['type'] == '1'){
                            $data["Phenotype $j Binary Type 1"] = $phenotype[$j]['non-environment']['binary'][1];
                            $data["Phenotype $j Binary Type 2"] = $phenotype[$j]['non-environment']['binary'][2];
                        }
                        elseif ($phenotype[$j]['non-environment']['type'] == '2'){
                            $data["Phenotype $j Minimum"] = $phenotype[$j]['non-environment']['quantitative']['min'];
                            $data["Phenotype $j Maximum"] = $phenotype[$j]['non-environment']['quantitative']['max'];
                        }
                        $data["Phenotype $j Description"] = $phenotype[$j]['non-environment']['description'];
                        $data["Phenotype $j Units"] = $units_options[$phenotype[$j]['non-environment']['units']];
                        if ($phenotype[$j]['non-environment']['units'] == '6'){
                            $data["Phenotype $j Custom Units"] = $phenotype[$j]['non-environment']['units-other'];
                        }
                        $data["Phenotype $j Plant Structure"] = $phenotype[$j]['non-environment']['structure'];
                        $data["Phenotype $j Developmental Stage"] = $phenotype[$j]['non-environment']['developmental'];
                    }
                }
            }
            else {
                $file = $phenotype['metadata'];
                $filename = file_load($file)->filename;
                $file_url = check_plain(file_create_url(file_load($file)->uri));
                $data['Phenotype Metadata File'] = "<a href='$file_url' target='blank'>$filename</a>";
            }
            $file = $phenotype['file'];
            $filename = file_load($file)->filename;
            $file_url = check_plain(file_create_url(file_load($file)->uri));
            $data['Phenotype File'] = "<a href='$file_url' target='blank'>$filename</a>";
        }
        
        if ($values['secondPage']['dataType'] != '4'){
            $genotype = $values['fourthPage']["organism-$i"]['genotype'];
            $data['Marker Types'] = '';
            foreach ($genotype['marker-type'] as $key => $val){
                if ($val !== 0){
                    $data['Marker Types'] .= $key . ', ';
                }
            }
            
            if ($genotype['marker-type']['SNPs'] !== 0){
                $design_options = array(
                  1 => 'GBS',
                  2 => 'Targeted Capture',
                  3 => 'Whole Genome Resequencing',
                  4 => 'RNA-Seq',
                  5 => 'Genotyping Array'
                );
                $data['Genotyping Design'] = $design_options[$genotype['SNPs']['genotyping-design']];
                if ($genotype['SNPs']['genotyping-design'] == '1'){
                    $gbs_options = array(
                      1 => 'RADSeq',
                      2 => 'ddRAD-Seq',
                      3 => 'NextRAD',
                      4 => 'RAPTURE',
                      5 => 'Other'
                    );
                    $data['GBS Type'] = $gbs_options[$genotype['SNPs']['GBS']];
                    if ($genotype['SNPs']['GBS'] == '5'){
                        $data['Custom GBS Type'] = $genotype['SNPs']['GBS-other'];
                    }
                }
                elseif ($genotype['SNPs']['genotyping-design'] == '2'){
                    if ($genotype['SNPs']['targeted-capture'] == '1'){
                        $data['Targeted Capture Type'] = 'Exome Capture';
                    }
                    else {
                        $data['Targeted Capture Type'] = $genotype['SNPs']['targeted-capture-other'];
                    }
                }
            }
            if ($genotype['marker-type']['SSRs/cpSSRs'] !== 0){
                $data['SSRs/cpSSRs Type'] = $genotype['SSRs/cpSSRs'];
            }
            if ($genotype['marker-type']['Other'] !== 0){
                $data['Other Marker Type'] = $genotype['other-marker'];
            }
            
            $ref_genome = $genotype['ref-genome'];
            if ($ref_genome != 'url' and $ref_genome != 'bio' and $ref_genome != 'manual'){
                $data['Reference Genome Version'] = $ref_genome;
            }
            elseif ($ref_genome == 'url') {
                $data['Reference Genome Link'] = "<a href='{$genotype['ref-genome-other']}' target='blank'>{$genotype['ref-genome-other']}</a>";
            }
            elseif ($ref_genome == 'bio') {
                $bio_id = $genotype['BioProject-id'];
                if (strlen($bio_id) > 5){
                    $bio_id = substr($bio_id, 5);
                }
                $data['Reference Genome BioProject ID'] = "<a href='https://www.ncbi.nlm.nih.gov/bioproject/$bio_id' target='blank'>$bio_id</a>";
            }
            else {
                $file = $genotype['assembly-user'];
                $filename = file_load($file)->filename;
                $file_url = check_plain(file_create_url(file_load($file)->uri));
                $data['Genotype Assembly File'] = "<a href='$file_url' target='blank'>$filename</a>";
            }
            
            if ($genotype['marker-type']['SNPs'] !== 0){
                $file = $genotype['vcf'];
                $filename = file_load($file)->filename;
                $file_url = check_plain(file_create_url(file_load($file)->uri));
                $data['Genotype VCF File'] = "<a href='$file_url' target='blank'>$filename</a>";
            }
            if ($genotype['marker-type']['Other'] !== 0 or $genotype['marker-type']['SSRs/cpSSRs'] !== 0){
                $file = $genotype['file'];
                $filename = file_load($file)->filename;
                $file_url = check_plain(file_create_url(file_load($file)->uri));
                $data['Genotype File'] = "<a href='$file_url' target='blank'>$filename</a>";
            }
        }
    }
    
    foreach ($data as $key => $val){
        $display .= "<tr><td>$key</td><td>$val</td></tr>";
    }
    
    $display .= "</tbody></table></div><br>";
    
    $form['a'] = array(
      '#type' => 'hidden',
      '#suffix' => $display
    );
    
    return $form;
}

function tpps_compare_temp($table, $column, $is_primary = FALSE, array $condition = array()){
    
    /*  A function to compare the max value in a temp table to the max value in a public table
     *  $is_primary denotes whether or not the $column being compared is the primary key, default false
     *  $condition is optional, if provided is passed into condition() when the function is looking for the max
     */
    
    if ($is_primary){
        $temp_column = "tpps_$column";
    }
    else{
        $temp_column = $column;
    }
    
    $temp_max = db_select("chado.tpps_$table", "tpps_$table")
        ->fields("tpps_$table", array("$temp_column"));

    $public_max = db_select("chado.$table", "$table")
        ->fields("$table", array("$column"));
    
    if ($condition != array()){
        call_user_func_array(array($temp_max, 'condition'), $condition);
        call_user_func_array(array($public_max, 'condition'), $condition);
    }
    
    $temp_max->orderBy("$temp_column", 'DESC')
        ->range(0, 1);
    $public_max->orderBy("$column", 'DESC')
        ->range(0, 1);
    
    $temp_max = $temp_max->execute();
    $public_max = $public_max->execute();
    
    foreach($temp_max as $row){
        $temp_val = $row->{$temp_column};
        break;
    }
    
    foreach($public_max as $row){
        $public_val = $row->{$column};
        break;
    }
    
    if (!isset($public_val) and !isset($temp_val)){
        return NULL;
    }
    elseif (!isset($temp_val)){
        return $public_val;
    }
    else {
        return (!isset($public_val) or $temp_val > $public_val) ? $temp_val : $public_val;
    }
}

function tpps_init_project($form, &$form_state){
    
    //Get next dbxref_id and accession # for project
    $dbxref_id = tpps_compare_temp('dbxref', 'dbxref_id', TRUE) + 1;
    $accession = tpps_compare_temp('dbxref', 'accession', FALSE, array('accession', db_like('TGDR') . '%', 'LIKE'));
    
    if ($accession === NULL){
        $accession = "TGDR001";
    }
    else {
        $accession = substr($accession, 4) + 1;
    }
    
    while (strlen($accession) < 3){
        $accession = "0" . $accession;
    }
    if (substr($accession, 0, 4) != 'TGDR'){
        $accession = "TGDR" . $accession;
    }
    
    //make new record in temp table
    $values = array(
      'tpps_dbxref_id' => $dbxref_id,
      'db_id' => '95',
      'accession' => $accession
    );
    
    $insert = db_insert('chado.tpps_dbxref')
        ->fields($values)
        ->execute();
    
    $form_state['dbxref_id'] = $dbxref_id;
    $form_state['accession'] = $accession;
    $form_state['saved_values']['frontpage']['accession'] = $accession;
    
    //project will be created when name is provided, after the first page is complete.
    return $insert;
}

function tpps_create_record($table, array $values){
    $default_fields = array();
    $insert = NULL;
    $primary_key = tpps_get_primary_key($table);
    
    if (substr($primary_key, 0, 5) == 'tpps_'){
        $compare_primary = substr($primary_key, 5);
    }
    else {
        $compare_primary = $primary_key;
    }
    
    if (substr($table, 0, 5) == 'tpps_'){
        $compare_table = substr($table, 5);
    }
    else {
        $compare_table = $table;
    }
    
    //get the new primary key (increment by 1 from the old primary key)
    $new_primary = tpps_compare_temp($compare_table, $compare_primary, TRUE) + 1;
    $values["$primary_key"] = $new_primary;
    
    //check record exists
    if (($existing_key = tpps_record_exists($compare_table, $values)) or ($existing_key = tpps_record_exists($table, $values))){
        //if it does, do not attempt to re-write it.
        //drupal_set_message(t('Error: Record already exists.'), 'error');
        return $existing_key;
    }
    
    $fields = db_query("select column_name from INFORMATION_SCHEMA.columns where table_name='$table'");
    
    //get default values
    while (($field = $fields->fetchAssoc())){
        $key = $field['column_name'];
        if (!isset($values[$key])){
            array_push($default_fields, $key);
            unset($values[$key]);
        }
    }
    
    //print_r($default_fields);
//    dpm($table);
//    dpm($values);
//    dpm($default_fields);
    
    //Insert the record
    $insert = db_insert("chado.$table")
        ->useDefaults($default_fields)
        ->fields($values)
        ->execute();
    
    return $insert;
}

function tpps_record_exists($table, array $values){
    
    $unique_columns = tpps_get_unique_columns($table);
    
    $results = db_select("chado.$table", 't')
        ->fields('t');
    
    $and = db_and();
    foreach ($unique_columns as $field){
        if (isset($values[$field])){
            $value = $values[$field];
            if ($value != ''){
                $and->condition("$field", db_like("$value"), 'LIKE');
            }
        }
    }
    
    $results->condition($and);
    
    $results = $results->execute()
        ->fetchAssoc();
    
    if ($results){
        $primary = tpps_get_primary_key($table);
        return $results[$primary];
    }
    
    return FALSE;
}

function tpps_get_unique_columns($table){
    
        $result = db_query("select indexdef from pg_indexes where tablename = '$table' and indexdef LIKE '%UNIQUE%' and indexname NOT LIKE '%_pkey';")
        ->fetchAssoc();
    
    $result = preg_split('/(\(|\))/',$result['indexdef']);
    $result = explode(', ', $result[1]);
    
    return $result;
}

function tpps_get_primary_key($table){
    
    $result = db_query("select indexdef from pg_indexes where tablename = '$table' and indexdef LIKE '%UNIQUE%' and indexname LIKE '%_pkey';")
    ->fetchAssoc();
    
    $result = preg_split('/(\(|\))/',$result['indexdef']);
    $result = $result[1];
    
    return $result;
}

function tpps_custom_cvterm($term, $definition){
    
    $dbxref = db_query('select d.accession from chado.dbxref d where d.db_id=95 and d.accession ~ \'^\\d+$\' order by cast(d.accession as bigint) desc');
    $tpps_dbxref = db_query('select d.accession from chado.tpps_dbxref d where d.db_id=95 and d.accession ~ \'^\\d+$\' order by cast(d.accession as bigint) desc');
    
    foreach ($dbxref as $row){
        $accession = $row->accession + 1;
        break;
    }
    foreach ($tpps_dbxref as $row){
        $tpps_accession = $row->accession + 1;
        break;
    }
    
    if (!isset($accession) or (isset($tpps_accession) and $tpps_accession > $accession)){
        $accession = isset($tpps_accession) ? $tpps_accession : NULL;
    }
    if (!isset($accession)){
        $accession = 1;
    }
    
    $dbxref = db_insert('chado.dbxref')
        ->useDefaults(array(
          'version',
          'description',
          'dbxref_id'
        ))
        ->fields(array(
          'db_id' => '95',
          'accession' => "$accession"
        ))
        ->execute();
    
    $cvterm = db_insert('chado.tpps_cvterm')
        ->useDefaults(array(
          'tpps_cvterm_id',
          'is_obsolete',
          'is_relationshiptype'
        ))
        ->fields(array(
          'cv_id' => '61',
          'name' => $term,
          'definition' => $definition,
          'dbxref_id' => $dbxref
        ))
        ->execute();
    
    return $cvterm;
}

function tpps_compare_files($fid_1, $fid_2, $file_1_id_name, $file_2_id_name){
    
    $file_1 = file_load($fid_1);
    $file_2 = file_load($fid_2);
    
    $file_1_name = $file_1->uri;
    $file_2_name = $file_2->uri;
    
    $file_1_location = drupal_realpath("$file_1_name");
    $file_2_location = drupal_realpath("$file_2_name");
    $file_1_content = parse_xlsx($file_1_location);
    $file_2_content = parse_xlsx($file_2_location);
    
    if (gettype($file_1_id_name) == 'integer'){
        $file_1_id_name = $file_1_content['headers'][$file_1_id_name];
        $last_row = array();
        foreach($file_1_content['headers'] as $num => $val){
            $last_row[$val] = $val;
        }
        $file_1_content[] = $last_row;
    }
    if (gettype($file_2_id_name) == 'integer'){
        $file_2_id_name = $file_2_content['headers'][$file_2_id_name];
        $last_row = array();
        foreach($file_2_content['headers'] as $num => $val){
            $last_row[$val] = $val;
        }
        $file_2_content[] = $last_row;
    }
    
    $missing_ids = array();
    
    for ($i = 0; $i < count($file_1_content) - 1; $i++){
        $row = $file_1_content[$i];
        
        $needle_id = $row[$file_1_id_name];
        $found = FALSE;
        
        for ($j = 0; $j < count($file_2_content) - 1; $j++){
            if ($needle_id === $file_2_content[$j][$file_2_id_name]){
                $found = TRUE;
                break;
            }
        }
        
        if (!$found){
            array_push($missing_ids, $needle_id);
        }
    }
    
    return $missing_ids;
}

function tpps_standard_coord($raw_coordinate){
    
    $matches = array();
    $valid = TRUE;

    if (preg_match('/(([0-9]+)° ?([0-9]+)\' ?([0-9|\.]+)" ?([N|S])),? ?(([0-9]+)° ?([0-9]+)\' ?([0-9|\.]+)" ?([E|W]))/', $raw_coordinate, $matches)){
        $lat = $matches[2] + ($matches[3] / 60) + ($matches[4] / 3600);
        $long = $matches[7] + ($matches[8] / 60) + ($matches[9] / 3600);
    }
    elseif (preg_match('/(([0-9]+)° ?([0-9|\.]+)\' ?([N|S])),? ?(([0-9]+)° ?([0-9|\.]+)\' ?([E|W]))/', $raw_coordinate, $matches)){
        $lat = $matches[2] + ($matches[3] / 60);
        $long = $matches[6] + ($matches[7] / 60);
    }
    elseif (preg_match('/([0-9|\.]+), ?[\+|-]?([0-9|\.]+)/', $raw_coordinate, $matches)){
        $lat = $matches[1];
        $long = $matches[2];
    }
    elseif (preg_match('/([0-9|\.]+)°? ?([N|S]),? ?([0-9|\.]+)°? ?([E|W])/', $raw_coordinate, $matches)){
        $lat = $matches[1];
        $long = $matches[3];
    }
    else {
        $valid = FALSE;
    }

    if (preg_match('/(-).+,/', $raw_coordinate, $matches) and $valid){
        $lat = $lat * -1;
    }
    if (preg_match('/,.*(-)/', $raw_coordinate, $matches) and $valid){
        $long = $long * -1;
    }

    if (preg_match('/([N|S]).+([E|W])/', $raw_coordinate, $matches) and $valid){
        if ($matches[1] == 'S'){
            $lat = $lat * -1;
        }
        if ($matches[2] == 'W'){
            $long = $long * -1;
        }
    }
    
    if ($valid){
        return "$lat,$long";
    }
    else {
        return FALSE;
    }
}

function tpps_page_build(&$page){
    
    //dpm($page['content']['system_main']['step']['#default_value']);
    if (!isset($page['content']['system_main']['form_id']['#value']) or $page['content']['system_main']['form_id']['#value'] != 'tpps_master'){
        return $page;
    }
    
    if (isset($page['content']['system_main']['step']) and $page['content']['system_main']['step']['#default_value'] != 'frontpage' and $page['content']['system_main']['step']['#default_value'] != 'Hellopage'){
        $blockObject = block_load('views', 'tpps_status');
        $blockObject->title = ($page['content']['system_main']['step']['#default_value'] != 'summarypage') ? 'TPPS Status' : '';
        $blockObject->subject = '';
        $blockObject->region = 'Content';
        $block = _block_get_renderable_array(_block_render_blocks(array($blockObject)));
        $tpps_status = $block['views_tpps_status']['#markup'];
        if ($page['content']['system_main']['step']['#default_value'] != 'summarypage'){
            $tpps_status = "<div class='block block-system contextual-links-region block-menu tpps-status-block'>$tpps_status</div>";
            drupal_add_region_content('sidebar_second', $tpps_status);
        }
        else {
            $tpps_status = "<div id='tpps-status'></br>$tpps_status</div>";
            drupal_add_region_content('content', $tpps_status);
        }
    }
    
    return $page;
}

function tpps_master($form, &$form_state){
    
    global $user;
    $params = drupal_get_query_parameters();
    
    if (!isset($user->mail) and !isset($form_state['stage'])){
        //first access, not logged in
        $form_state['stage'] = 'frontpage';
    
        front_create_form($form, $form_state);
    
        drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
        
        return $form;
    }
    elseif (!isset($user->mail)){
        //not first access, but not logged in
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (isset($params['accession']) and !isset($form_state['stage'])) {
        //logged in, and with accession in link
        $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $params['accession']);
        $form_state['saved_values'] = $old_form_state['saved_values'];
        $form_state['stage'] = $old_form_state['stage'];
        $form_state['accession'] = $old_form_state['accession'];
        $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
    }
    else {
        //logged in, with plain link
        if (!isset($form_state['stage'])){
            //first access
            $form_state['stage'] = 'frontpage';
    
            front_create_form($form, $form_state);

            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");

            return $form;
        }
        else {
            //not first access
            if (!isset($form_state['saved_values']['frontpage']['accession']) or (isset($form_state['saved_values']['frontpage']['accession']) and $form_state['saved_values']['frontpage']['accession'] === 'new')){
                //no submissions, or selected to create new submission
                tpps_init_project($form, $form_state);
                variable_set('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession'], $form_state);
            }
            $old_form_state = variable_get('tpps_incomplete_' . $user->mail . $form_state['saved_values']['frontpage']['accession']);
            $form_state['saved_values'] = $old_form_state['saved_values'];
            $form_state['stage'] = $old_form_state['stage'];
            $form_state['accession'] = $old_form_state['accession'];
            $form_state['dbxref_id'] = $old_form_state['dbxref_id'];
        }
    }
    
    $form['step'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#default_value' => $form_state['stage'],
    );
    
    $form['accession'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['accession'],
    );
    
    if (!isset($form_state['dbxref_id']) or !isset($form_state['accession'])){
        tpps_init_project($form, $form_state);
    }
    
	global $base_url;
	
	/******************************************
	Add status bar showing completed parts at the top
	*******************************************/
	//dpm($form_state['saved_values']);

	$form['#prefix'] = '<style>
		.tgdr_form_status div {
			display: inline-block;
			padding: 3px;
			margin-right: 10px;
		}
		
		.tgdr_form_status div img {
			vertical-align: middle;
			margin-bottom: 4px;
			margin-right: 2px;
		}
		
		.tgdr_form_status {
			padding: 5px;
			background-color: #ffffff;
			border: 1px solid #cccccc;
			border-radius: 4px;
                        margin-bottom: 10px;
		}
                
                .btn-primary[name=op]{
                        margin: 10px 10px 10px 0px;
                }
                
	</style>';
	$form['#prefix'] .= '<div class="tgdr_form_status">';
	
	/**** Page 1 ****/
	if(isset($form_state['saved_values']['Hellopage']) and $form_state['stage'] != 'Hellopage') {
            $image_fname = 'message-16-ok.png';
	}
        else{
            $image_fname = 'message-16-warning.png';
        }
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Author and Species Information</div>";
	
	/**** Page 2 ****/
        if($form_state['stage'] != 'secondPage' and !isset($form_state['saved_values']['secondPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'secondPage' and $form_state['saved_values']['secondPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Experimental Conditions</div>";	

	/**** Page 3 ****/
	if($form_state['stage'] != 'thirdPage' and !isset($form_state['saved_values']['thirdPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'thirdPage' and $form_state['saved_values']['thirdPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Tree Accession</div>";	
	
	/**** Page 4 ****/
	if($form_state['stage'] != 'fourthPage' and !isset($form_state['saved_values']['fourthPage']['#cleared'])){
            $image_fname = 'message-16-error.png';
        }
        elseif($form_state['stage'] != 'fourthPage' and $form_state['saved_values']['fourthPage']['#cleared'] == TRUE) {
            $image_fname = 'message-16-ok.png';
	}
	else {
            $image_fname = 'message-16-warning.png';
	}
	$form['#prefix'] .= "<div><img src='$base_url/misc/$image_fname'> Submit Data</div>";	
	
	$form['#prefix'] .= '</div>';
	
	/******************************************
	END of status bar code
	*******************************************/
    
    if (!isset($form_state['saved_values']['Hellopage']['primaryAuthor']) or !isset($form_state['saved_values']['Hellopage']['organization'])){
  	$and = db_and();
	$and->condition('value', $user->mail);
	$and->condition('type_id', '50268');
	$contact_id = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('contact_id'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$contact_id = $contact_id['contact_id'];
        $name = db_select('chado.contact', 'contact')
	    ->fields('contact', array('name'))
	    ->condition('contact_id', $contact_id)
	    ->execute()
	    ->fetchAssoc();
	$name = $name['name'];
	$form_state['saved_values']['Hellopage']['primaryAuthor'] = $name;
	$and = db_and();
	$and->condition('contact_id', $contact_id);
	$and->condition('type_id', '72');
	$org = db_select('chado.contactprop', 'contactprop')
	    ->fields('contactprop', array('value'))
	    ->condition($and)
	    ->execute()
	    ->fetchAssoc();
	$org = $org['value'];
	$form_state['saved_values']['Hellopage']['organization'] = $org;
	//dpm($contact_id);
	//dpm($name);
	//dpm($org);
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_create_form($form, $form_state);
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_create_form($form, $form_state);
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_create_form($form, $form_state);
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_create_form($form, $form_state);
            break;
        
        case 'summarypage':
            summary_create_form($form, $form_state);
            break;
        
        default:
            dpm('Invalid form stage.', 'error');
            break;
    }
    
    $suffix = '
        <script>
        jQuery(document).ready(function(){
            jQuery(\'[data-toggle="tooltip"]\').tooltip();   
        });
        </script>';
    
    if (isset($form['#suffix'])){
        $form['#suffix'] .= $suffix;
    }
    else {
        $form['#suffix'] = $suffix;
    }
    
    drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
    
    return $form;
}

function tpps_master_validate(&$form, &$form_state){
    
    if ($form_state['triggering_element']['#value'] == 'Back' or $form_state['triggering_element']['#value'] == 'Save'){
        
        if ($form_state['stage'] == 'thirdPage'){
            if ($form_state['saved_values']['Hellopage']['organism']['number'] == '1' or $form_state['values']['tree-accession']['check'] == '0'){
                
                $form_state['values']['tree-accession']['file-columns'] = array();

                foreach ($form['tree-accession']['file']['columns'] as $col => $val){
                    if (isset($form['tree-accession']['file']['columns'][$col]['#value']) and $col[0] != '#'){
                        $form_state['values']['tree-accession']['file-columns'][$col] = $form['tree-accession']['file']['columns'][$col]['#value'];
                    }
                }
            }
            else {
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    
                    $form_state['values']['tree-accession']["species-$i"]['file-columns'] = array();
                    
                    if (isset($form['tree-accession']["species-$i"]['file']['#value']['columns'])){
                        foreach ($form['tree-accession']["species-$i"]['file']['#value']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']['tree-accession']["species-$i"]['file-columns'][$col] = $form['tree-accession']["species-$i"]['file']['#value']['columns'][$col];
                            }
                        }
                    }
                }
            }
        }
        elseif ($form_state['stage'] == 'fourthPage'){
            if (isset($form['organism-1']['genotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                    
                    if ($form_state['values']["organism-$i"]['genotype']['marker-type']['Other'] != '0' or $form_state['values']["organism-$i"]['genotype']['marker-type']['SSRs/cpSSRs'] != '0'){
                        $form_state['values']["organism-$i"]['genotype']['file-columns'] = array();
                        
                        if (isset($form["organism-$i"]['genotype']['file']['#value']['columns'])){
                            foreach ($form["organism-$i"]['genotype']['file']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['genotype']['file-columns'][$col] = $form["organism-$i"]['genotype']['file']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                    if ($form_state['values']["organism-$i"]['genotype']['ref-genome'] == 'manual'){
                        $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'] = array();
                        
                        if (isset($form["organism-$i"]['genotype']['assembly-user']['#value']['columns'])){
                            foreach ($form["organism-$i"]['genotype']['assembly-user']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['genotype']['assembly-user-columns'][$col] = $form["organism-$i"]['genotype']['assembly-user']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                }
            }
            
            if (isset($form['organism-1']['phenotype'])){
                for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){

                    $form_state['values']["organism-$i"]['phenotype']['file-columns'] = array();
                    
                    if (isset($form["organism-$i"]['phenotype']['file']['#value']['columns'])){
                        foreach ($form["organism-$i"]['phenotype']['file']['#value']['columns'] as $col => $val){
                            if ($col[0] != '#'){
                                $form_state['values']["organism-$i"]['phenotype']['file-columns'][$col] = $form["organism-$i"]['phenotype']['file']['#value']['columns'][$col];
                            }
                        }
                    }
                    
                    if ($form_state['values']["organism-$i"]['phenotype']['check'] != '0'){
                        $form_state['values']["organism-$i"]['phenotype']['metadata-columns'] = array();
                        
                        if (isset($form["organism-$i"]['phenotype']['metadata']['#value']['columns'])){
                            foreach ($form["organism-$i"]['phenotype']['metadata']['#value']['columns'] as $col => $val){
                                if ($col[0] != '#'){
                                    $form_state['values']["organism-$i"]['phenotype']['metadata-columns'][$col] = $form["organism-$i"]['phenotype']['metadata']['#value']['columns'][$col];
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return;
    }
    
    switch ($form_state['stage']){
        case 'Hellopage':
            include_once('page_1.php');
            page_1_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'secondPage':
            include_once('page_2.php');
            page_2_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'thirdPage':
            include_once('page_3.php');
            page_3_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        case 'fourthPage':
            include_once('page_4.php');
            page_4_validate_form($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'tpps') . "/tpps.js");
            break;
        
        default:
            break;
    }
    
    if (!form_get_errors()){
        $form_state['values']['#cleared'] = TRUE;
        //dpm($form_state['values']['#cleared']);
    }
    else {
        $form_state['values']['#cleared'] = FALSE;
    }
}

function tpps_master_submit($form, &$form_state){
    
    global $user;
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    $persist = TRUE;
    
    if ($form_state['triggering_element']['#value'] == 'Save'){
        dpm('Your information has been saved!');
        
        if (isset($form_state['saved_values']['form_build_id'])){
            $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
        }
        $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
        $form_state['rebuild'] = TRUE;
        
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
        return;
    }
    
    switch ($form_state['stage']){
        case 'frontpage':
            $persist = FALSE;
            $form_state['stage'] = 'Hellopage';
            break;
        
        case 'Hellopage':
            $form_state['stage'] = 'secondPage';
            break;
            
        case 'secondPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'Hellopage';
            }
            else{
                $form_state['stage'] = 'thirdPage';
            }
            break;
            
        case 'thirdPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'secondPage';
            }
            else{
                $form_state['stage'] = 'fourthPage';
            }
            break;
            
        case 'fourthPage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'thirdPage';
            }
            else{
                $form_state['stage'] = 'summarypage';
            }
            break;
            
        case 'summarypage':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'fourthPage';
            }
            else{
                submit_all($form, $form_state);
                dpm('submit');
                variable_del('tpps_incomplete_' . $user->mail . $form_state['accession']);
                variable_set('tpps_complete_' . $user->mail . $form_state['accession'], $form_state);
                tpps_submit_email($form, $form_state);
                drupal_goto('<front>');
                return;
            }
            break;
        
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
    
    if ($persist){
        variable_set('tpps_incomplete_' . $user->mail . $form_state['accession'], $form_state);
    }
}

function tpps_submit_email($form, $form_state){
    
    global $user;
    
    $to = $user->mail;
    $from = "nginx@tgwebdev.cam.uchc.edu";
    $subject = "TPPS Submission Received";
    $message = 
"Congratulations!<br><br>

Your TPPS submission has been received and is pending approval from a TreeGenes administrator! Here's a brief summary of the information you provided:<ul>
    <li>Primary Author: {$form_state['saved_values']['Hellopage']['primaryAuthor']}</li>
    <li>Organization: {$form_state['saved_values']['Hellopage']['organization']}</li>
    <li>Publication title: {$form_state['saved_values']['Hellopage']['publication']['title']}</li>
    <li>Journal: {$form_state['saved_values']['Hellopage']['publication']['journal']}</li>
    <li>Organisms: {$form_state['saved_values']['Hellopage']['organism']['number']}</li>
";
    for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
        $message .= 
"   <li>Organism $i: {$form_state['saved_values']['Hellopage']['organism'][$i]['species']}</li>
";
    }
    $study_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    $data_options = array(
      '- Select -',
      'Genotype x Phenotype',
      'Genotype',
      'Genotype x Phenotype x Environment',
      'Phenotype x Environment',
      'Genotype x Environment'
    );
    $study_type = $study_options[$form_state['saved_values']['secondPage']['studyType']];
    $data_type = $data_options[$form_state['saved_values']['secondPage']['dataType']];
    $message .= 
"   <li>Study Type: $study_type</li>
    <li>Data Type: $data_type</li></ul>

If you have any questions about your submission, please feel free to contact us <a href='https://tgwebdev.cam.uchc.edu/Drupal/contactform'>here</a>.<br><br>
";
    
    $headers[] = 'MIME-Version: 1.0';
    $headers[] = 'Content-type: text/html; charset=iso-8859-1';

    // Additional headers
    $headers[] = "To: <$to>";
    $headers[] = "From: Nginx web server <$from>";
    
//    dpm($to);
//    dpm($subject);
//    dpm($message);
//    dpm($headers);
    
    mail($to, $subject, $message, implode("\r\n", $headers));
    
    return;
}

function submit_all($form, &$form_state){
    
    $dbxref_id = $form_state['dbxref_id'];
    $accession = $form_state['accession'];

    $values = $form_state['saved_values'];
    $firstpage = $values['Hellopage'];

    $project_id = tpps_create_record('tpps_project', array(
      'name' => $firstpage['publication']['title'],
      'description' => $firstpage['publication']['abstract']
    ));

    $project_dbxref_id = tpps_create_record('tpps_project_dbxref', array(
      'project_id' => $project_id,
      'dbxref_id' => $dbxref_id
    ));

    $primary_author_id = tpps_create_record('tpps_contact', array(
      'name' => $firstpage['primaryAuthor'],
      'type_id' => '71',
    ));

    $author_string = $firstpage['primaryAuthor'];
    $secondary_author_ids = array();
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){

        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $secondary_author_ids[] = tpps_create_record('tpps_contact', array(
              'name' => $firstpage['publication']['secondaryAuthors'][$i],
              'type_id' => '71'
            ));
            $author_string .= "; {$firstpage['publication']['secondaryAuthors'][$i]}";
        }
    }
    elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0){
        $secondary_author_file = tpps_create_record('tpps_projectprop', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($firstpage['publication']['secondaryAuthors']['file'])->uri)
        ));
        
        $file = file_load($firstpage['publication']['secondaryAuthors']['file']);
        $location = drupal_realpath($file->uri);
        $content = parse_xlsx($location);
        $column_vals = $firstpage['publication']['secondaryAuthors']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '1'){
                $first_name = $col;
            }
            if ($val == '2'){
                $last_name = $col;
            }
            if ($val == '3'){
                $middle_initial = $col;
            }
        }
        
        for ($i = 0; $i < count($content) - 1; $i++){
            $secondary_author_ids[] = tpps_create_record('tpps_contact', array(
              'name' => "{$content[$i][$last_name]}, {$content[$i][$first_name]} {$content[$i][$middle_initial]}",
              'type_id' => '71'
            ));
            $author_string .= "; {$content[$i][$last_name]}, {$content[$i][$first_name]} {$content[$i][$middle_initial]}";
        }
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
    }
    
    $publication_id = tpps_create_record('tpps_pub', array(
      'title' => $firstpage['publication']['title'],
      'series_name' => $firstpage['publication']['journal'],
      'type_id' => '229',
      'pyear' => $firstpage['publication']['year'],
      'uniquename' => "$author_string {$firstpage['publication']['title']}. {$firstpage['publication']['journal']}; {$firstpage['publication']['year']}"
    ));

    $project_pub_id = tpps_create_record('tpps_project_pub', array(
      'project_id' => $project_id,
      'pub_id' => $publication_id
    ));

    $organization_id = tpps_create_record('tpps_contact', array(
      'name' => $firstpage['organization'],
      'type_id' => '72',
    ));

    $names = explode(" ", $firstpage['primaryAuthor']);
    $first_name = $names[0];
    $last_name = implode(" ", array_slice($names, 1));

    $pubauthor_ids = array();
    $pubauthor_ids[] = tpps_create_record('tpps_pubauthor', array(
      'pub_id' => $publication_id,
      'rank' => '0',
      'surname' => $last_name,
      'givennames' => $first_name
    ));
    
    if ($firstpage['publication']['secondaryAuthors']['check'] == 0 and $firstpage['publication']['secondaryAuthors']['number'] != 0){
        for ($i = 1; $i <= $firstpage['publication']['secondaryAuthors']['number']; $i++){
            $names = explode(" ", $firstpage['publication']['secondaryAuthors'][$i]);
            $first_name = $names[0];
            $last_name = implode(" ", array_slice($names, 1));
            $pubauthor_ids[] = tpps_create_record('tpps_pubauthor', array(
              'pub_id' => $publication_id,
              'rank' => "$i",
              'surname' => $last_name,
              'givennames' => $first_name
            ));
        }
    }
    elseif ($firstpage['publication']['secondaryAuthors']['check'] != 0){
        
        $file = file_load($firstpage['publication']['secondaryAuthors']['file']);
        $location = drupal_realpath($file->uri);
        $content = parse_xlsx($location);
        $column_vals = $firstpage['publication']['secondaryAuthors']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '1'){
                $first_name = $col;
            }
            if ($val == '2'){
                $last_name = $col;
            }
            if ($val == '3'){
                $middle_initial = $col;
            }
        }
        
        for ($i = 0; $i < count($content) - 1; $i++){
            $rank = $i + 1;
            $pubauthor_ids[] = tpps_create_record('tpps_pubauthor', array(
              'pub_id' => $publication_id,
              'rank' => "$rank",
              'surname' => $content[$i][$last_name],
              'givennames' => $content[$i][$first_name] . " " . $content[$i][$middle_initial]
            ));
        }
    }

    $organism_ids = array();
    $organism_number = $firstpage['organism']['number'];

    for ($i = 1; $i <= $organism_number; $i++){
        $parts = explode(" ", $firstpage['organism'][$i]['species']);
        $genus = $parts[0];
        $species = implode(" ", array_slice($parts, 1));
        if (isset($parts[2]) and ($parts[2] == 'var.' or $parts[2] == 'subsp.')){
            $infra = implode(" ", array_slice($parts, 2));
        }
        else {
            $infra = NULL;
        }
        $organism_ids[$i] = tpps_create_record('tpps_organism', array(
          'genus' => $genus,
          'species' => $species,
          'infraspecific_name' => $infra
        ));
    }
    /***************************
     * Second Page submissions *
     ***************************/

    $secondpage = $values['secondPage'];

    $start = $secondpage['StartingDate']['month'] . " " . $secondpage['StartingDate']['year'];
    $end = $secondpage['EndingDate']['month'] . " " . $secondpage['EndingDate']['year'];

    $start_id = tpps_create_record('tpps_projectprop', array(
      'project_id' => $project_id,
      'type_id' => '127996',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $start
    ));
    
    $end_id = tpps_create_record('tpps_projectprop', array(
      'project_id' => $project_id,
      'type_id' => '127997',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
      'value' => $end
    ));
    
    if ($secondpage['studyLocation']['type'] !== '2'){
        $standard_coordinate = tpps_standard_coord($secondpage['studyLocation']['coordinates']);
        $standard_coordinate = explode(',', $standard_coordinate);
        $latitude = $standard_coordinate[0];
        $longitude = $standard_coordinate[1];
        
        $study_location_id = tpps_create_record('tpps_projectprop', array(
          'project_id' => $project_id,
          'type_id' => '54718',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $latitude
        ));
        
        $study_location_id = tpps_create_record('tpps_projectprop', array(
          'project_id' => $project_id,
          'type_id' => '54717',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $longitude
        ));
    }
    else{
        $location = $secondpage['studyLocation']['custom'];
        
        $study_location_id = tpps_create_record('tpps_projectprop', array(
          'project_id' => $project_id,
          'type_id' => '127998',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it. 
          'value' => $location
        ));
    }
    
    $datatype_options = array(
      '0' => '- Select -',
      '1' => 'Genotype x Phenotype',
      '2' => 'Genotype',
      '3' => 'Genotype x Phenotype x Environment',
      '4' => 'Phenotype x Environment',
      '5' => 'Genotype x Environment'
    );
    
    $datatype = $datatype_options[$secondpage['dataType']];
    
    $datatype_id = tpps_create_record('tpps_projectprop', array(
      'project_id' => $project_id,
      'type_id' => '54740',
      'value' => $datatype
    ));
    
    $studytype_options = array(
      0 => '- Select -',
      1 => 'Natural Population (Landscape)',
      2 => 'Growth Chamber',
      3 => 'Greenhouse',
      4 => 'Experimental/Common Garden',
      5 => 'Plantation',
    );
    
    $study_type = $studytype_options[$secondpage['studyType']];
    
    $study_type_id = tpps_create_record('tpps_projectprop', array(
      'project_id' => $project_id,
      'type_id' => '128021',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
      'value' => $study_type
    ));
    
    /******************************************
     * Specific Questions based on study type *
     ******************************************/
    
    switch($secondpage['studyType']){
        case ('1'):
            $natural_population = $secondpage['naturalPopulation'];
            $number_assessions = $natural_population['assessions'];
            $seasons = "";
            foreach ($natural_population['season'] as $key => $item){
                if ($item != '0'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            break;
        case ('2'):
            $growth_chamber = $secondpage['growthChamber'];
            $co2 = $growth_chamber['co2Control'];
            $humidity = $growth_chamber['humidityControl'];
            $light = $growth_chamber['lightControl'];
            $temp_high = $growth_chamber['temp']['high'];
            $temp_low = $growth_chamber['temp']['low'];
            $rooting = $growth_chamber['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($co2['option'] == '1'){
                $co2_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $co2_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['controlled']
                ));
            }
            else{
                $co2_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128002',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $co2_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128003',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $co2['uncontrolled']
                ));
            }

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['uncontrolled']
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['uncontrolled']
                ));
            }

            $temp_high_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['uncontrolled']
                ));
            }

            $treatment_ids = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('3'):
            $greenhouse = $secondpage['greenhouse'];
            $humidity = $greenhouse['humidityControl'];
            $light = $greenhouse['lightControl'];
            $temp_high = $greenhouse['temp']['high'];
            $temp_low = $greenhouse['temp']['low'];
            $rooting = $greenhouse['rooting'];
            $rooting_type = $rooting['option'];
            $soil = $rooting['soil'];
            $soil_container = $soil['container'];
            $ph = $rooting['ph'];
            $treatments = $rooting['treatment'];

            if ($humidity['option'] == '1'){
                $humidity_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $humidity_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128005',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $humidity['controlled']
                ));
            }
            else{
                $humidity_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128004',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            if ($light['option'] == '1'){
                $light_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $light_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128007',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $light['controlled']
                ));
            }
            else{
                $light_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128006',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $temp_high_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128008',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_high
            ));
            $temp_low_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128009',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $temp_low
            ));

            switch((string) $rooting_type){
                case '1':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Aeroponics'
                    ));
                    break;
                case '2':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Hydroponics'
                    ));
                    break;
                case '3':
                    $rooting_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128010',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => 'Soil'
                    ));
                    $soil_options = array(
                      0 => '- Select -',
                      1 => 'Sand',
                      2 => 'Peat',
                      3 => 'Clay',
                      4 => 'Mixed',
                      5 => 'Other'
                    );
                    $soil_type = $soil_options[$soil['type']];
                    if ($soil_type == 'Other'){
                        $soil_type = $soil['other'];
                    }
                    
                    $soil_type_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_type
                    ));
                    $soil_container_id = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128011',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $soil_container
                    ));
                    break;
                default:
                    break;
            }

            if ($ph['option'] == '1'){
                $ph_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $ph_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128014',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $ph['controlled']
                ));
            }
            else{
                $ph_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128013',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
            }

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('4'):
            $commonGarden = $secondpage['commonGarden'];
            $salinity = $commonGarden['salinity'];
            $biotic_env = $commonGarden['bioticEnv']['option'];
            $seasons = "";
            $treatments = $commonGarden['treatment'];

            $irrigation_options = array(
              0 => '- Select -',
              1 => 'Irrigation from top',
              2 => 'Irrigation from bottom',
              3 => 'Drip Irrigation',
              4 => 'Other',
              5 => 'No Irrigation',
            );
            $irrigation_type = $irrigation_options[$commonGarden['irrigation']['option']];
            if ($irrigation_type == 'Other'){
                $irrigation_type = $commonGarden['irrigation']['other'];
            }
            
            $irrigation_type_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128016',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $irrigation_type
            ));

            if ($salinity['option'] == '1'){
                $salinity_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'True'
                ));
                $salinity_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['controlled']
                ));
            }
            else{
                $salinity_control_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128017',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => 'False'
                ));
                $salinity_value_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '128018',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                  'value' => $salinity['uncontrolled']
                ));
            }

            $biotic_env['Other'] = $commonGarden['bioticEnv']['other'];
            $biotic_env_id = array();
            foreach ($biotic_env as $key => $check){
                if ($check == '1'){
                    $biotic_env_id[$key] = tpps_create_record('tpps_projectprop', array(
                      'project_id' => $project_id,
                      'type_id' => '128019',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                      'value' => $key
                    ));
                }
            }

            foreach ($commonGarden['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            $season_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));

            $treatment_id = array();
            $is_description = FALSE;
            $rank = 0;
            foreach ($treatments as $item){
                if (!$is_description){
                    if ($item == '1'){
                        $record_next = TRUE;
                    }
                    else{
                        $record_next = FALSE;
                    }
                    $is_description = TRUE;
                }
                else{
                    if ($record_next){
                        array_push($treatment_ids, tpps_create_record('tpps_projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                          'value' => $item,
                          'rank' => $rank
                        )));
                        $rank++;
                    }
                    $is_description = FALSE;
                }
            }
            break;
        case ('5'):
            $plantation = $secondpage['plantation'];
            $number_assessions = $plantation['assessions'];
            $seasons = "";
            $treatments = $plantation['treatment'];
            
            foreach ($plantation['season'] as $key => $item){
                if ($item == '1'){
                    $seasons .= $key . ', ';
                }
            }
            
            $season_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128000',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $seasons
            ));
            
            $assessions_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '128001',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
              'value' => $number_assessions
            ));
            
            if ($plantation['treatment']['check'] != 0){
                $treatment_id = array();
                $is_description = FALSE;
                $rank = 0;
                foreach ($treatments as $item){
                    if (!$is_description){
                        if ($item == '1'){
                            $record_next = TRUE;
                        }
                        else{
                            $record_next = FALSE;
                        }
                        $is_description = TRUE;
                    }
                    else{
                        if ($record_next){
                            array_push($treatment_ids, tpps_create_record('tpps_projectprop', array(
                              'project_id' => $project_id,
                              'type_id' => '128015',    //this cvterm id was created custom for TG. Chado may have one, but I was unable to find it.
                              'value' => $item,
                              'rank' => $rank
                            )));
                            $rank++;
                        }
                        $is_description = FALSE;
                    }
                }
            }
            break;
        default:
            break;
    }
    /**************************
     * Third Page submissions *
     **************************/
    
    $thirdpage = $values['thirdPage'];
    $fourthpage = $values['fourthPage'];
    $stock_ids = array();
    $stockprop_ids = array();
    
    if ($organism_number == '1' or $thirdpage['tree-accession']['check'] == 0){
        //single file
        $tree_accession_id = tpps_create_record('tpps_projectprop', array(
          'project_id' => $project_id,
          'type_id' => '2836',
          'value' => file_create_url(file_load($thirdpage['tree-accession']['file'])->uri)
        ));
        
        $file = file_load($thirdpage['tree-accession']['file']);
        $location = drupal_realpath($file->uri);
        $content = parse_xlsx($location);
        $column_vals = $thirdpage['tree-accession']['file-columns'];
        
        foreach ($column_vals as $col => $val){
            if ($val == '4'){
                $lat_name = $col;
            }
            if ($val == '1'){
                $id_col_accession_name = $col;
            }
            if ($val == '5'){
                $long_name = $col;
            }
            if ($val == '2'){
                $country_col_name = $col;
            }
            if ($val == '3'){
                $state_col_name = $col;
            }
            if ($val == '8'){
                $county_col_name = $col;
            }
            if ($val == '9'){
                $district_col_name = $col;
            }
        }
        
        if ($organism_number == '1'){
            //only one species
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_ids[$tree_id] = tpps_create_record('tpps_stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $organism_ids[1],
                ));
            }
        }
        else {
            //multiple species in one tree accession file -> users must define species and genus columns
            
            //get genus column
            foreach ($column_vals as $col => $val){
                if ($val == '6'){
                    $genus_col_name = $col;
                    break;
                }
            }
            
            //get species column
            foreach ($column_vals as $col => $val){
                if ($val == '7'){
                    $species_col_name = $col;
                    break;
                }
            }
            
            //parse file
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                for ($j = 1; $j <= $organism_number; $j++){
                    //match genus and species to genus and species given on page 1
                    if ($firstpage['organism'][$j]['species'] == "{$content[$i][$genus_col_name]} {$content[$i][$species_col_name]}"){
                        //obtain organism id from matching species
                        $id = $organism_ids[$j];
                        break;
                    }
                }
                
                //create record with the new id
                $stock_ids[$tree_id] = tpps_create_record('tpps_stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $id,
                ));
            }
        }
        
        if (isset($lat_name) and isset($long_name)){
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_id = $stock_ids[$tree_id];
                
                $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '54718',
                  'value' => $content[$i][$lat_name]
                ));
                
                $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '54717',
                  'value' => $content[$i][$long_name]
                ));
            }
        }
        else {
            for ($i = 0; $i < count($content) - 1; $i++){
                $tree_id = $content[$i][$id_col_accession_name];
                $stock_id = $stock_ids[$tree_id];
                
                $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '128162',
                  'value' => $content[$i][$country_col_name]
                ));
                
                $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                  'stock_id' => $stock_id,
                  'type_id' => '128947',
                  'value' => $content[$i][$state_col_name]
                ));
                
                if (isset($county_col_name)){
                    $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128946',
                      'value' => $content[$i][$county_col_name]
                    ));
                }
                
                if (isset($district_col_name)){
                    $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128945',
                      'value' => $content[$i][$district_col_name]
                    ));
                }
            }
        }
        
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
    }
    else {
        //multiple files, sorted by species
        for($i = 0; $i < $organism_number; $i++){
            $tree_accession_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($thirdpage['tree-accession']["species-$i"]['file'])->uri)
            ));
            
            $file = file_load($thirdpage['tree-accession']["species-$i"]['file']);
            $location = drupal_realpath($file->uri);
            $content = parse_xlsx($location);
            $column_vals = $thirdpage['tree-accession']["species-$i"]['file-columns'];

            foreach ($column_vals as $col => $val){
                if ($val == '4'){
                    $lat_name = $col;
                }
                if ($val == '1'){
                    $id_col_accession_name = $col;
                }
                if ($val == '5'){
                    $long_name = $col;
                }
                if ($val == '2'){
                    $country_col_name = $col;
                }
                if ($val == '3'){
                    $state_col_name = $col;
                }
                if ($val == '8'){
                    $county_col_name = $col;
                }
                if ($val == '9'){
                    $district_col_name = $col;
                }
            }

            for ($j = 0; $j < count($content) - 1; $j++){
                $tree_id = $content[$j][$id_col_accession_name];
                $stock_ids[$tree_id] = tpps_create_record('tpps_stock', array(
                  'uniquename' => t($tree_id),
                  'type_id' => '2824',
                  'organism_id' => $organism_ids[$i],
                ));
                
                if (isset($lat_name) and isset($long_name)){
                    $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                      'stock_id' => $stock_ids[$tree_id],
                      'type_id' => '54718',
                      'value' => $content[$j][$lat_name]
                    ));

                    $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                      'stock_id' => $stock_ids[$tree_id],
                      'type_id' => '54717',
                      'value' => $content[$j][$long_name]
                    ));
                }
                else {
                    
                    $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128162',
                      'value' => $content[$j][$country_col_name]
                    ));

                    $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                      'stock_id' => $stock_id,
                      'type_id' => '128947',
                      'value' => $content[$j][$state_col_name]
                    ));

                    if (isset($county_col_name)){
                        $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                          'stock_id' => $stock_id,
                          'type_id' => '128946',
                          'value' => $content[$j][$county_col_name]
                        ));
                    }

                    if (isset($district_col_name)){
                        $stockprop_ids[] = tpps_create_record('tpps_stockprop', array(
                          'stock_id' => $stock_id,
                          'type_id' => '128945',
                          'value' => $content[$j][$district_col_name]
                        ));
                    }
                }
            }

            $file->status = FILE_STATUS_PERMANENT;
            $file = file_save($file);
        }
    }
    
    $project_stock_ids = array();
    foreach ($stock_ids as $tree_id => $stock_id){
        $project_stock_ids[] = tpps_create_record('tpps_project_stock', array(
          'stock_id' => $stock_id,
          'project_id' => $project_id
        ));
    }
    
    /***************************
     * Fourth Page submissions *
     ***************************/
    
    //these are messy. File parsing will clean them up. currently, all file paths are being stored in the chado.projectprop table.
    //it will be better when they can be stored in genotypeprop or phenotypeprop, but that required file parsing first.
    
    for ($i = 1; $i <= $organism_number; $i++){
        
        if (isset($fourthpage["organism-$i"]['phenotype'])){
            $phenotype = $fourthpage["organism-$i"]['phenotype'];
            $phenotype_number = $phenotype['number'];
            $phenotype_ids = array();
            $phenotypeprop_ids = array();
            $phenotypes_meta = array();
            
            $phenotype_file_id = tpps_create_record('tpps_projectprop', array(
              'project_id' => $project_id,
              'type_id' => '2836',
              'value' => file_create_url(file_load($phenotype['file'])->uri)
            ));
            $phenotype_file = file_load($phenotype['file']);
            
            for ($j = 1; $j <= $phenotype_number; $j++){
                $name = strtolower($phenotype['phenotypes-meta'][$j]['name']);
                $phenotypes_meta[$name] = array();
                $phenotypes_meta[$name]['attr'] = $phenotype['phenotypes-meta'][$j]['attribute'];
                $phenotypes_meta[$name]['desc'] = $phenotype['phenotypes-meta'][$j]['description'];
                $phenotypes_meta[$name]['unit'] = $phenotype['phenotypes-meta'][$j]['units'];
                if ($phenotype['phenotypes-meta'][$j]['struct-check'] == '1'){
                    $phenotypes_meta[$name]['struct'] = $phenotype['phenotypes-meta'][$j]['structure'];
                }
                if ($phenotype['phenotypes-meta'][$j]['val-check'] == '1'){
                    $phenotypes_meta[$name]['min'] = $phenotype['phenotypes-meta'][$j]['min'];
                    $phenotypes_meta[$name]['max'] = $phenotype['phenotypes-meta'][$j]['max'];
                }
            }
            
            if ($phenotype['check'] == '1'){
                $phenotype_meta_file_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($phenotype['metadata'])->uri)
                ));
                $file = file_load($phenotype['metadata']);
                $location = drupal_realpath($file->uri);
                $content = parse_xlsx($location);
                $column_vals = $phenotype['metadata-columns'];
                
                foreach ($column_vals as $col => $val){
                    if ($val == '1'){
                        $phenotype_name = $col;
                    }
                    if ($val == '2'){
                        $phenotype_attr = $col;
                    }
                    if ($val == '3'){
                        $phenotype_desc = $col;
                    }
                    if ($val == '4'){
                        $phenotype_unit = $col;
                    }
                    if ($val == '5'){
                        $phenotype_struct = $col;
                    }
                    if ($val == '6'){
                        $phenotype_min = $col;
                    }
                    if ($val == '7'){
                        $phenotype_max = $col;
                    }
                }
                
                for ($j = 0; $j < count($content) - 1; $j++){
                    $name = strtolower($content[$j][$phenotype_name]);
                    $phenotypes_meta[$name] = array();
                    $phentoypes_meta[$name]['attr'] = $content[$j][$phenotype_attr];
                    $phentoypes_meta[$name]['desc'] = $content[$j][$phenotype_desc];
                    $phentoypes_meta[$name]['unit'] = $content[$j][$phenotype_unit];
                    if (isset($phenotype_struct) and isset($content[$j][$phenotype_struct]) and $content[$j][$phenotype_struct] != ''){
                        $phenotypes_meta[$name]['struct'] = $content[$j][$phenotype_struct];
                    }
                    if (isset($phenotype_min) and isset($content[$j][$phenotype_min]) and $content[$j][$phenotype_min] != ''){
                        $phenotypes_meta[$name]['min'] = $content[$j][$phenotype_min];
                    }
                    if (isset($phenotype_max) and isset($content[$j][$phenotype_max]) and $content[$j][$phenotype_max] != ''){
                        $phenotypes_meta[$name]['max'] = $content[$j][$phenotype_max];
                    }
                }
                
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
            }
            
            $location = drupal_realpath($phenotype_file->uri);
            $content = parse_xlsx($location);
            $column_vals = $phenotype['file-columns'];

            foreach ($column_vals as $col => $val){
                if ($val == '1'){
                    $tree_id_col = $col;
                }
                if ($val == '2'){
                    $phenotype_name = $col;
                }
                if ($val == '3'){
                    $phenotype_val = $col;
                }
            }

            for ($j = 0; $j < count($content) - 1; $j++){
                $name = strtolower($content[$j][$phenotype_name]);
                $value = $content[$j][$phenotype_val];
                $stock_unique = $content[$j][$tree_id_col];
                
                $attr = db_select('chado.cvterm', 'c')
                    ->fields('c', array('cvterm_id'))
                    ->condition('c.name', db_like($phenotypes_meta[$name]['attr']), 'LIKE')
                    ->execute()
                    ->fetchAssoc();
                $attr_id = $attr['cvterm_id'];
                if (!isset($attr_id) or $attr_id == ''){
                    $attr = db_select('chado.tpps_cvterm', 'c')
                        ->fields('c', array('tpps_cvterm_id'))
                        ->condition('c.name', db_like($phenotypes_meta[$name]['attr']), 'LIKE')
                        ->execute()
                        ->fetchAssoc();
                    $attr_id = isset($attr['tpps_cvterm_id']) ? $attr['tpps_cvterm_id'] : tpps_custom_cvterm($phenotypes_meta[$name]['attr'], '');
                }
                
                if (isset($phenotypes_meta[$name]['struct'])){
                    $obs = db_select('chado.cvterm', 'c')
                        ->fields('c', array('cvterm_id'))
                        ->condition('c.name', db_like($phenotypes_meta[$name]['struct']), 'LIKE')
                        ->execute()
                        ->fetchAssoc();
                    $observable_id = $obs['cvterm_id'];

                    if (!isset($observable_id) or $observable_id == ''){
                        $obs = db_select('chado.tpps_cvterm', 'c')
                            ->fields('c', array('tpps_cvterm_id'))
                            ->condition('c.name', db_like($phenotypes_meta[$name]['struct']), 'LIKE')
                            ->execute()
                            ->fetchAssoc();
                        $observable_id = isset($obs['tpps_cvterm_id']) ? $obs['tpps_cvterm_id'] : tpps_custom_cvterm($phenotypes_meta[$name]['struct'], '');
                    }

                }
                else {
                    $observable_id = NULL;
                }
                
                $phenotype_ids[] = tpps_create_record('tpps_phenotype', array(
                  'uniquename' => "$stock_unique-$name-$j",
                  'name' => $name,
                  'attr_id' => $attr_id,
                  'observable_id' => $observable_id,
                  'value' => $value
                ));
                
                $phenotypeprop_ids[] = tpps_create_record('tpps_phenotypeprop', array(
                  'phenotype_id' => end($phenotype_ids),
                  'type_id' => '2871',
                  'value' => $phenotypes_meta[$name]['desc']
                ));
                
                $phenotypeprop_ids[] = tpps_create_record('tpps_phenotypeprop', array(
                  'phenotype_id' => end($phenotype_ids),
                  'type_id' => '2883',
                  'value' => $phenotypes_meta[$name]['unit']
                ));
                
                if (isset($phenotypes_meta[$name]['min'])){
                    $phenotypeprop_ids[] = tpps_create_record('tpps_phenotypeprop', array(
                      'phenotype_id' => end($phenotype_ids),
                      'type_id' => '52214',
                      'value' => $phenotypes_meta[$name]['min']
                    ));
                }
                
                if (isset($phenotypes_meta[$name]['max'])){
                    $phenotypeprop_ids[] = tpps_create_record('tpps_phenotypeprop', array(
                      'phenotype_id' => end($phenotype_ids),
                      'type_id' => '52213',
                      'value' => $phenotypes_meta[$name]['max']
                    ));
                }
            }
            
            $phenotype_file->status = FILE_STATUS_PERMANENT;
            $phenotype_file = file_save($phenotype_file);
        }
        
        if (isset($fourthpage["organism-$i"]['genotype'])){
            $genotype = $fourthpage["organism-$i"]['genotype'];
            
            if ($genotype['ref-genome'] == 'url'){
                $reference_genome_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '1912',
                  'value' => $genotype['ref-genome-other']
                ));
            }
            elseif ($genotype['ref-genome'] == 'bio'){
                $project_dbxref_id = tpps_create_record('tpps_project_dbxref', array(
                  'project_id' => $project_id,
                  'dbxref_id' => $genotype['BioProject-id'],
                ));
                
                $bioproject_assembly_file_ids = array();

                foreach ($genotype['assembly-auto'] as $item){
                    if ($item !== '0'){
                        array_push($bioproject_assembly_file_ids, tpps_create_record('tpps_projectprop', array(
                          'project_id' => $project_id,
                          'type_id' => '2836',
                          'value' => "https://www.ncbi.nlm.nih.gov/nuccore/$item"
                        )));
                    }
                }
            }
            elseif ($genotype['ref-genome'] == 'manual'){
                $assembly_user = $genotype['assembly-user'];
                $assembly_user_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($assembly_user)->uri)
                ));
                $file = file_load($assembly_user);
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
            }
            else {
                $reference_genome_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '1912',
                  'value' => $genotype['ref-genome']
                ));
            }
            
            if ($genotype['marker-type']['SSRs/cpSSRs'] != '0' or $genotype['marker-type']['Other'] != '0'){
                $genotype_file_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['file'])->uri)
                ));
                $file = file_load($genotype['file']);
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
            }
                
            if ($genotype['marker-type']['SNPs'] != '0'){
                $genotype_vcf_id = tpps_create_record('tpps_projectprop', array(
                  'project_id' => $project_id,
                  'type_id' => '2836',
                  'value' => file_create_url(file_load($genotype['vcf'])->uri)
                ));
                $file = file_load($genotype['vcf']);
                $file->status = FILE_STATUS_PERMANENT;
                $file = file_save($file);
            }
        }
    }
}

function _author_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '71', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _organization_autocomplete($string){
    $matches = array();
    $result = db_select('chado.contact', 'contact')
        ->fields('contact', array('name', 'type_id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->condition('type_id', '72', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _journal_autocomplete($string){
    $matches = array();
    $result = db_select('chado.pub', 'pub')
        ->fields('pub', array('series_name'))
        ->condition('series_name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->series_name] = check_plain($row->series_name);
    }
    
    drupal_json_output($matches);
}

function _species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function _phenotype_autocomplete($string){
    $matches = array();
    
    $result = db_select('chado.phenotype', 'phenotype')
        ->fields('phenotype', array('name'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _attribute_autocomplete($string){
    $matches = array();
    
    $attributes = db_select('chado.phenotype', 'p')
        ->distinct()
        ->fields('p', array('attr_id'));
    
    $and = db_and()
        ->condition('c.cvterm_id', $attributes, 'IN')
        ->condition('c.name', db_like($string) . '%', 'LIKE');
    
    $result = db_select('chado.cvterm', 'c')
        ->fields('c', array('name'))
        ->condition($and)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name);
    }
    
    drupal_json_output($matches);
}

function _units_autocomplete($string){
    $matches = array();
    
    $and = db_and()
        ->condition('type_id', '2842')
        ->condition('value', db_like($string) . '%', 'LIKE');
    
    $result = db_select('chado.phenotypeprop', 'p')
        ->distinct()
        ->fields('p', array('value'))
        ->condition($and)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->value] = check_plain($row->value);
    }
    
    drupal_json_output($matches);
}

function _structure_autocomplete($string){
    $matches = array();
    
    $structures = db_select('chado.phenotype', 'p')
        ->distinct()
        ->fields('p', array('observable_id'));
    
    $and = db_and()
        ->condition('c.cvterm_id', $structures, 'IN')
        ->condition('c.name', db_like($string) . '%', 'LIKE');
    
    $result = db_select('chado.cvterm', 'c')
        ->fields('c', array('name', 'definition'))
        ->condition($and)
        ->execute();
    
    foreach($result as $row){
        $matches[$row->name] = check_plain($row->name . ': ' . $row->definition);
    }
    
    drupal_json_output($matches);
}

function parse_xlsx($location){
    
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = drupal_realpath("public://");
    
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;

    foreach ($xlrows as $xlrow) {
        $arr = array();
        
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if (!isset($headers)) {
            $headers = $arr;
            $content['headers'] = $headers;
        } 
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content[] = $row;
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function tpps_content_no_header(&$content){
    $top_row = $content['headers'];
    $headers = array();
    for ($i = 0; $i < count($content['headers']); $i++){
        $headers[$i] = $i;
    }
    $other_rows = array_slice($content, 1);

    foreach ($other_rows as $row_num => $row){
        $new_row = array();
        for ($i = 0; $i < count($row); $i++){
            $new_row[$i] = $row[$top_row[$i]];
        }
        $other_rows[$row_num] = $new_row;
    }
    array_unshift($other_rows, $top_row);

    $content = $other_rows;
    $content['headers'] = $headers;
}

function front_create_form(&$form, $form_state){
    
    global $base_url;
    global $user;
    
    if (isset($user->mail)){
        //logged in
        $options_arr = array();
        $options_arr['new'] = 'Create new TPPS Submission';
        
        $results = db_select("public.variable", "variable")
            ->fields('variable', array('name'))
            ->condition('name', db_like('tpps_incomplete_' . $user->mail) . '%', 'LIKE')
            ->execute();
        
        foreach ($results as $item){
            $name = $item->name;
            $state = variable_get($name, NULL);
            
            if ($state != NULL and isset($state['saved_values']['Hellopage']['publication']['title'])){
                $title = ($state['saved_values']['Hellopage']['publication']['title'] != NULL) ? $state['saved_values']['Hellopage']['publication']['title'] : "No Title";
                $tgdr_id = $state['accession'];
                $options_arr["$tgdr_id"] = "$title";
            }
            else {
                if (isset($state) and !isset($state['saved_values']['Hellopage'])){
                    variable_del($name);
                    $and = db_and()
                        ->condition('accession', $state['accession'])
                        ->condition('db_id', 95);
                    $results = db_delete('chado.tpps_dbxref')
                        ->condition($and)
                        ->execute();
                }
            }
        }
        
        if (count($options_arr) > 1){
            //has submissions
            $form['accession'] = array(
              '#type' => 'select',
              '#title' => t('Would you like to load an old TPPS submission, or create a new one?'),
              '#options' => $options_arr,
              '#default_value' => isset($form_state['saved_values']['frontpage']['accession']) ? $form_state['saved_values']['frontpage']['accession'] : 'new',
            );
        }
    }
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Continue to TPPS'),
    );
    
    $prefix_text = 
"<div>
Welcome to TPPS!<br><br>
The Tripal PopGen Submit (TPPS) workflow provides researchers with a streamlined submission interface for studies resulting from any combination of genotype, phenotype, and environmental data for georeferenced forest trees.  TPPS will guide users through questions about their study design and data in order to collect information on trees, genotypes, and phenotypes if applicable.  Phenotypic, genotypic, and environmental descriptors will be mapped to ontologies where possible and the collected metadata will enable this information to be displayed in <a href='$base_url/cartogratree' target='blank'>CartograTree</a>.  An accession number will be provided to the user following successful completion that uniquely identifies this study in the database.  This number should be used in the manuscript describing this work.  Specific flat-files and metadata associated with this identifier can be accessed by the public with this information.<br><br>
To get started, you will need to have a few things handy:<br>
<ul>
    <li>An enabled and approved TreeGenes account - you can create one <a href='$base_url/user/register'>here</a>. There may be a waiting period to have your account approved by a TreeGenes administrator.</li>
    <li>Information about the paper connected to your study, and the organisms being studied. This must include at least the following:
        <ul>
            <li>Primary author of the publication</li>
            <li>Organization of the Primary Author</li>
            <li>Publication year</li>
            <li>Publication title</li>
            <li>Publication abstract</li>
            <li>Journal the publication can be found in</li>
            <li>Genus and species of the organism(s) being studied</li>
        </ul>
    </li>
    <li>Metadata about the study itself. This must include at least the following:
        <ul>
            <li>Dates when the study took place (month, year)</li>
            <li>The location of the study (coordinates or country/region)</li>
            <li>Type of study (natural population, growth chamber, common garden, etc.)</li>
            <li>Type of data collected (some combination of genotype, phenotype, and environmental)</li>
            <li>Relevant quantitative information based on the type of study, such as the seasons of a natural population study, or the soil pH of a growth chamber study</li>
        </ul>
    </li>
    <li>Geographic locations of the trees (for common garden studies, this would be the location of the source tree). This should be a spreadsheet with a column for tree identifiers and column(s) for the location of each tree.</li>
    <li>Genotypic and/or phenotypic data and metadata (depending on the type(s) of data collected).</li>
</ul>
If you would like to submit your data, you can click the button 'Continue to TPPS' below!<br><br>
</div>";
    
    if (isset($form['accession'])){
        $form['accession']['#prefix'] = $prefix_text;
    }
    else {
        $form['Next']['#prefix'] = $prefix_text;
    }
    
    return $form;
}

function summary_create_form(&$form, $form_state){
    
    $form['Back'] = array(
      '#type' => 'submit',
      '#value' => t('Back'),
    );
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
    
    return $form;
}

function tpps_test_page($form, &$form_state){
    
    $form['file'] = array(
      '#type' => 'managed_file',
      '#title' => 'file',
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => array('txt csv xlsx')
      )
    );
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
    );
    
    return $form;
}

function tpps_test_page_validate($form, &$form_state){
    if ($form_state['submitted'] == '1'){
        
        form_set_error('Next', 'error');
    }
    /*for ($i = 0; $i < 1000; $i++){
        $file = file_load($i);
        if ($file){
            //dpm($i);
            //dpm($file->uri);
            if (substr($file->filename, 0, 5) === 'ssrs_'){
                dpm($i);
                dpm($file->filename);
                //file_delete($file);
            }
        }
    }*/
    
}

function tpps_test_page_submit($form, &$form_state) {
    
}

function tpps_block_info() { 
  dpm("BLOCK INFO");   
  $blocks['tpps_status'] = array(
    // info: The name of the block.
    'info' => t('TPPS Status'),
  );

  return $blocks;
}

/***********************
This was supposed to be the function to display the block
But as usual with Drupal, things work and things just don't
work.
***********************/
function ttps_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  //dpm("TPPS Block executed");
  //$block = array();
  
  /*
  switch ($delta) {
    case 'tpps_status':
      // Create your block content here
		$block['subject'] = t('My last 3 news');
		$block['content'] = t('This is the content');
		
		break;
   }
  return $block;]
  */
}

function tpps_block_view_alter(&$data, $block) {
    //dpm($block);
    //dpm($data);
    global $base_url;
    switch ($block->delta) {
        case 'tpps_status':
            //dpm($_REQUEST);

            $css = "
            .tgdr_status_block img {
                    vertical-align: middle;
                    margin-bottom: 4px;
                    margin-right: 2px;
            }		
            ";
            drupal_add_css($css, 'inline');

            $data['subject'] = t('TPPS Status');
            $content = "<div class='tgdr_status_block'>";
            global $user;
            if (isset($_REQUEST['accession'])){
                $accession = $_REQUEST['accession'];
                $form_state = variable_get('tpps_incomplete_' . $user->mail . $accession);
            }
            else {
                $content .= '</div>';
                $data['content'] = t($content);
                break;
            }
            //dpm($form_state['saved_values']);
            
            //This deals with page 1
            if (isset($form_state['saved_values']['Hellopage']['#cleared']) and $form_state['saved_values']['Hellopage']['#cleared']){
                $content .= "Step 1 - Complete<br />";
                $content .= "Author/Species Information<hr />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Author: '. filter_xss(check_plain($form_state['saved_values']['Hellopage']['primaryAuthor'])) . "<br />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Organization: '. filter_xss(check_plain($form_state['saved_values']['Hellopage']['organization'])) . "<br />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Pub Title: '. filter_xss(check_plain($form_state['saved_values']['Hellopage']['publication']['title'])) . "<br />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Pub Year: '. filter_xss(check_plain($form_state['saved_values']['Hellopage']['publication']['year'])) . "<br />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Secondary Authors: '. filter_xss(check_plain($form_state['saved_values']['Hellopage']['publication']['secondaryAuthors']['number'])) . "<br />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Organisms: '. filter_xss(check_plain($form_state['saved_values']['Hellopage']['organism']['number'])) . "<br />";
            }

            //This deals with page 2
            if (isset($form_state['saved_values']['secondPage']['#cleared']) and $form_state['saved_values']['secondPage']['#cleared']){
                $content .= "<br />";
                $content .= "Step 2 - Complete<br />";
                $content .= "Experimental Conditions<br /><hr />";
                $start = $form_state['saved_values']['secondPage']['StartingDate']['month'] . " " . $form_state['saved_values']['secondPage']['StartingDate']['year'];
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Starting Date: ' . filter_xss(check_plain($start)) . "<br />";
                $end = $form_state['saved_values']['secondPage']['EndingDate']['month'] . " " . $form_state['saved_values']['secondPage']['EndingDate']['year'];
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Ending Date: ' . filter_xss(check_plain($end)) . "<br />";
                if ($form_state['saved_values']['secondPage']['studyLocation']['type'] == '2'){
                    $location = $form_state['saved_values']['secondPage']['studyLocation']['custom'];
                    $query = $location;
                }
                else {
                    $location = $form_state['saved_values']['secondPage']['studyLocation']['coordinates'];
                    $standard_coordinate = tpps_standard_coord($location);
                    if ($standard_coordinate){
                        $query = $standard_coordinate;
                    }
                }
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Study Location: <a id="sidebar_map" style="cursor:pointer">' . filter_xss(check_plain($location)) .  "</a><br>";
                if (isset($query)){
                    $map = "<iframe frameborder=\\\"0\\\" style=\\\"border:0;width:100%;height:100%\\\" src=\\\"https://www.google.com/maps?q=$query&output=embed&key=AIzaSyDkeQ6KN6HEBxrIoiSCrCHFhIbipycqouY&z=5\\\" allowfullscreen> </iframe></div>";
                    $js = "jQuery(document).ready(function ($) {
                        jQuery(\"#sidebar_map\").click(function() {
                            jQuery(\"#sidebar_map_wrapper\").remove();
                            jQuery(\"#sidebar_map\").after( \"<div id=\\\"sidebar_map_wrapper\\\">$map</div>\" );
                        });
                    });";
                    drupal_add_js($js, 'inline');
                }
                $type = $form_state['saved_values']['secondPage']['studyType'];
                $type_arr = array(
                  0 => '- Select -',
                  1 => 'Natural Population (Landscape)',
                  2 => 'Growth Chamber',
                  3 => 'Greenhouse',
                  4 => 'Experimental/Common Garden',
                  5 => 'Plantation',
                );
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Study Type: ' . filter_xss(check_plain($type_arr[$type])) .  "<br />";
                $type = $form_state['saved_values']['secondPage']['dataType'];
                $type_arr = array(
                  '- Select -',
                  'Genotype x Phenotype',
                  'Genotype',
                  'Genotype x Phenotype x Environment',
                  'Phenotype x Environment',
                  'Genotype x Environment'
                );
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Data Type: ' . filter_xss(check_plain($type_arr[$type])) .  "<br />";
            }

            //This deals with page 3
            if (isset($form_state['saved_values']['thirdPage']['#cleared']) and $form_state['saved_values']['thirdPage']['#cleared']){
                $content .= "<br />";
                $content .= "Step 3 - Complete<br />";
                $content .= "Tree Accession<br /><hr />";
                $content .= "<img src='$base_url/misc/message-16-ok.png'>" . ' Tree Accession data' .  "<br />";
                if ($form_state['saved_values']['Hellopage']['organism']['number'] == '1' or $form_state['saved_values']['thirdPage']['tree-accession']['check'] == '0'){
                    $file_name = file_load($form_state['saved_values']['thirdPage']['tree-accession']['file'])->filename;
                    $file_url = check_plain(file_create_url(file_load($form_state['saved_values']['thirdPage']['tree-accession']['file'])->uri));
                    $content .= "<img src='$base_url/misc/message-16-ok.png'> Tree Accession File: <a href='$file_url' target='blank'>$file_name</a><br />";
                }
                else {
                    for ($i = 1; $i <= $form_state['saved_values']['Hellopage']['organism']['number']; $i++){
                        $species_name = $form_state['saved_values']['Hellopage']['organism'][$i]['species'];
                        $file_name = file_load($form_state['saved_values']['thirdPage']['tree-accession']["species-$i"]['file'])->filename;
                        $file_url = check_plain(file_create_url(file_load($form_state['saved_values']['thirdPage']['tree-accession']["species-$i"]['file'])->uri));
                        $content .= "<img src='$base_url/misc/message-16-ok.png'> $species_name Tree Accession File: <a href='$file_url' target='blank'>$file_name</a><br />";
                    }
                }
            }
            
            //This deals with page 4
            if (isset($form_state['saved_values']['fourthPage']['#cleared']) and $form_state['saved_values']['fourthPage']['#cleared']){
                $organism_number = $form_state['saved_values']['Hellopage']['organism']['number'];
                for ($i = 1; $i <= $organism_number; $i++){
                    $current_name = $form_state['saved_values']['Hellopage']['organism'][$i]['species'];
                    $content .= "<br />";
                    $content .= "Step 4 - Complete<br />";
                    $content .= "Submit Data<br /><hr />";
                    $content .= "<img src='$base_url/misc/message-16-ok.png'> " . filter_xss(check_plain($current_name)) .  "<br />";
                    
                    if (isset($form_state['saved_values']['fourthPage']["organism-$i"]['genotype'])){
                        $content .= "<img src='$base_url/misc/message-16-ok.png'> " . filter_xss(check_plain($current_name)) .  " Genotypic Data<br />";
                        
                        if (isset($form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['file']) and $form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['file'] != 0){
                            $genotype_file_name = file_load($form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['file'])->filename;
                            $genotype_url = check_plain(file_create_url(file_load($form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['file'])->uri));
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> Genotype File: <a href='$genotype_url' target='blank'>$genotype_file_name</a><br />";
                        }
                        if (isset($form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['vcf']) and $form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['vcf'] != 0){
                            $genotype_file_name = file_load($form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['vcf'])->filename;
                            $genotype_url = check_plain(file_create_url(file_load($form_state['saved_values']['fourthPage']["organism-$i"]['genotype']['vcf'])->uri));
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> Genotype VCF File: <a href='$genotype_url' target='blank'>$genotype_file_name</a><br />";
                        }
                    }
                    if (isset($form_state['saved_values']['fourthPage']['phenotype'])){
                        $content .= "<img src='$base_url/misc/message-16-ok.png'> " . filter_xss(check_plain($current_name)) .  " Phenotypic Data<br />";
                        
                        if (isset($form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['metadata']) and $form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['metadata'] != 0){
                            $phenotype_file_name = file_load($form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['metadata'])->filename;
                            $phenotype_url = check_plain(file_create_url(file_load($form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['metadata'])->uri));
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> Phenotype Metadata File: <a href='$phenotype_url' target='blank'>$phenotype_file_name</a><br />";
                        }
                        if (isset($form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['file']) and $form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['file'] != 0){
                            $phenotype_file_name = file_load($form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['file'])->filename;
                            $phenotype_url = check_plain(file_create_url(file_load($form_state['saved_values']['fourthPage']["organism-$i"]['phenotype']['file'])->uri));
                            $content .= "<img src='$base_url/misc/message-16-ok.png'> Phenotype File: <a href='$phenotype_url' target='blank'>$phenotype_file_name</a><br />";
                        }
                    }
                    
                    $content .= "<hr />";
                }
            }
            
            $content .= "</div>";
            $data['content'] = t($content);

            break;
        default:
            break;
    }
}
