<?php

/**
 * @file
 * Defines module schema and install/uninstall processes.
 */

/**
 * Implements hook_install().
 *
 * Define local cvterms, add necessary foreign keys to schema tables, create
 * necessary materialized views.
 */
function tpps_install() {

  tpps_alter_tpps_submissions();

  chado_create_custom_table('genotype_call', array(
    'description' => '',
    'fields' => array(
      'genotype_call_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'variant_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'marker_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'genotype_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'meta_data' => array(
        'description' => '',
        'type' => 'json',
      ),
    ),
    'foreign keys' => array(
      'genotype' => array(
        'table' => 'genotype',
        'columns' => array(
          'genotype_id' => 'genotype_id',
        ),
      ),
      'variant' => array(
        'table' => 'feature',
        'columns' => array(
          'variant_id' => 'feature_id',
        ),
      ),
      'marker' => array(
        'table' => 'feature',
        'columns' => array(
          'marker_id' => 'feature_id',
        ),
      ),
      'project' => array(
        'table' => 'project',
        'columns' => array(
          'project_id' => 'project_id',
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
    'primary key' => array(
      'genotype_call_id',
    ),
    'referring_tables' => array(
      'genotype',
      'feature',
      'project',
      'stock',
    ),
  ), TRUE, NULL, FALSE);

  tpps_alter_genotype_call();

  chado_create_custom_table('stock_phenotype', array(
    'description' => '',
    'fields' => array(
      'phenotype_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'stock_phenotype_c1' => array(
        'stock_id',
        'phenotype_id',
      ),
    ),
    'foreign keys' => array(
      'phenotype' => array(
        'table' => 'phenotype',
        'columns' => array(
          'phenotype_id' => 'phenotype_id',
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
    'primary key' => array(
      'phenotype_id',
      'stock_id',
    ),
    'referring_tables' => array(
      'phenotype',
      'stock',
    ),
  ), TRUE, NULL, FALSE);

  tpps_create_plusgeno_view();

  tpps_install_cvterms();

  tpps_default_permissions();

  tpps_create_entities();
}

/**
 * Implements hook_uninstall().
 *
 * Removes TPPS variables from the public.variable table. Also removes TPPS file
 * usage from public.file_usage.
 */
function tpps_uninstall() {

  // Remove all incomplete submissions connected to user profiles.
  $results = db_delete('public.variable')
    ->condition('name', db_like('tpps_incomplete_') . '%', 'LIKE')
    ->execute();

  // Remove all complete submissions connected to user profiles.
  $results = db_delete('public.variable')
    ->condition('name', db_like('tpps_complete_') . '%', 'LIKE')
    ->execute();

  $tpps_usage = db_select('public.file_usage', 'f')
    ->fields('f')
    ->condition('module', 'tpps')
    ->execute();

  foreach ($tpps_usage as $row) {
    file_usage_delete(file_load($row->fid), $row->module, $row->type, $row->id, $row->count);
  }
}

/**
 * Implements hook_schema().
 *
 * This function defines and creates the tpps_submission table that TPPS uses to
 * keep track of submissions.
 */
function tpps_schema() {
  $schema['tpps_submission'] = array(
    'description' => 'Contains TPPS Submissions',
    'fields' => array(
      'tpps_submission_id' => array(
        'description' => 'The id of the TPPS submission.',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'user id of the user who created the submission.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Status of the submission - Incomplete, Pending Approval, Submission Job Running or Approved.',
        'type' => 'varchar',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'accession' => array(
        'description' => 'The TGDR### accession number of the submission',
        'type' => 'varchar',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'dbxref_id' => array(
        'description' => 'The dbxref_id from chado.dbxref.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'submission_state' => array(
        'description' => 'The form_state of the submission.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
      'dbxref_id' => array(
        'table' => 'chado.dbxref',
        'columns' => array(
          'dbxref_id' => 'dbxref_id',
        ),
      ),
    ),
    'primary key' => array(
      'tpps_submission_id',
    ),
  );

  if (!db_table_exists('chado.genotype_call')) {
    $schema['chado.genotype_call'] = array(
      'description' => '',
      'fields' => array(
        'genotype_call_id' => array(
          'description' => '',
          'type' => 'serial',
          'size' => 'normal',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'variant_id' => array(
          'description' => '',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'marker_id' => array(
          'description' => '',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'genotype_id' => array(
          'description' => '',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'project_id' => array(
          'description' => '',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'stock_id' => array(
          'description' => '',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'meta_data' => array(
          'description' => '',
          // Drupal does not support the json data type by default, we will use
          // a placeholder for meta_data for now, and upon install we will
          // change the type to json.
          'type' => 'text',
        ),
      ),
      'foreign keys' => array(
        'genotype_id' => array(
          'table' => 'chado.genotype',
          'columns' => array(
            'genotype_id' => 'genotype_id',
          ),
        ),
        'variant_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'variant_id' => 'feature_id',
          ),
        ),
        'marker_id' => array(
          'table' => 'chado.feature',
          'columns' => array(
            'marker_id' => 'feature_id',
          ),
        ),
        'project_id' => array(
          'table' => 'chado.project',
          'columns' => array(
            'project_id' => 'project_id',
          ),
        ),
        'stock_id' => array(
          'table' => 'chado.stock',
          'columns' => array(
            'stock_id' => 'stock_id',
          ),
        ),
      ),
      'primary key' => array(
        'genotype_call_id',
      ),
    );
  }

  return $schema;
}

/**
 * Adds local TPPS cvterms.
 */
function tpps_install_cvterms() {
  $local_cv = chado_get_cv(array('name' => 'local'));
  $local_db = variable_get('tpps_local_db');

  $terms = array(
    'study_start' => 'The month and year that the study began.',
    'study_end' => 'The month and year that the study ended.',
    'experiment_location' => 'Geographic location of the experiment.',
    'assession_season' => 'Season the trees were assessed.',
    'assession_number' => 'Number of times the trees were assessed, on average.',
    'co2_control' => 'Whether or not the co2 level of the environment was controlled. True or False.',
    'co2_level' => 'Must have an associated co2_control property. If co2_control is True, this term describes the co2 level the environment was kept at. If co2_control is False, this term describes the average measured co2 value in the environment.',
    'humidity_control' => 'Whether or not the air humidity level of the environment was controlled. True or False.',
    'humidity_level' => 'Must have an associated humidity_control property. If humidity_control is True, this term describes the air humidity level the environment was kept at. If humidity_control is False, this term describes the average measured air humidity value in the environment.',
    'light_control' => 'Whether or not the light intensity level of the environment was controlled. True or False.',
    'light_level' => 'Must have an associated light_control property. If light_control is True, this term describes the light intensity level the environment was kept at. If light_control is False, this term describes the average measured light intensity value in the environment.',
    'temperature_high' => 'Average high temperature of the environment.',
    'temperature_low' => 'Average low temperature of the environment.',
    'rooting_type' => 'Type of rooting. Aeroponics, Hydroponics, or Soil.',
    'soil_type' => 'Type of soil. For example: Sand, Peat, Mixed, etc.',
    'soil_container' => 'Type of soil container.',
    'pH_control' => 'Whether or not the pH level of the environment was controlled. True or False.',
    'pH_level' => 'Must have an associated pH_control property. If pH_control is True, this term describes the pH level the environment was kept at. If pH_control is False, this term describes the average measured pH value in the environment.',
    'treatment' => 'Describes the treatment of the trees during the study. For example, air or soil temperature regimes, chemical administration, fertilizer, non-mineral nutrient, or rainfall regimes, disease status, etc.',
    'irrigation_type' => 'Describes the type of irrigation. For example, drip irrigation, irrigation from the top, no irrigation, etc.',
    'salinity_control' => 'Whether or not the salinity level of the environment was controlled. True or False.',
    'salinity_level' => 'Must have an associated salinity_control property. If salinity_control is True, this term describes the salinity level the environment was kept at. If salinity_control is False, this term describes the average measured salinity value in the environment.',
    'biotic_environment' => 'Describes the biotic environment.',
    'study_type' => 'Describes the type of environment the trees were in during the study. Possible values are Natural Population (Landscape), Growth Chamber, Greenhouse, Experimental/Common Garden, Plantation.',
    'phenotype_binary_type' => 'Describes one type of a binary phenotype.',
    'file_path' => 'Specifies the path to a file',
    'contact photo' => 'A profile photo for a contact record',
    'gps_latitude' => 'Coordinate that specifies north-south position on Earth\'s surface',
    'gps_longitude' => 'Coordinate that specifies east-west position on Earth\'s surface',
    'association_results_type' => 'The type of the association results.',
    'county' => 'A political and administrative division of a state',
    'district' => 'A distinct area of a geographic entity, such as a country or city',
    'organism 4 letter code' => '4 letter abbreviation of species. Usually first two letters of genus + first two letters of species, may be different if that code already exists (use next letters from species if possible).',
    'cpSSR' => 'Chloroplast simple sequence repeats.',
    'SSR' => 'Simple sequence repeats. Microsatellite.',
    'time' => 'A quality in which events occur in sequence.',
    'source_description' => 'A textual description of study type and comments for a source.',
  );

  foreach ($terms as $term_name => $term_definition) {
    if (!chado_get_cvterm(array('name' => $term_name))) {
      $term = array(
        'id' => "{$local_db->name}:$term_name",
        'name' => $term_name,
        'definition' => $term_definition,
        'cv_name' => $local_cv->name,
      );
      chado_insert_cvterm($term);
    }
  }
}

/**
 * Add foreign key constraints to the chado.genotype_call table.
 */
function tpps_alter_genotype_call() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'genotype_call' AND contype like 'f';");
  if (!$results->rowCount()) {
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES chado.genotype(genotype_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES chado.feature(feature_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_variant_id_fkey FOREIGN KEY (variant_id) REFERENCES chado.feature(feature_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_project_id_fkey FOREIGN KEY (project_id) REFERENCES chado.project(project_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES chado.stock(stock_id) ON DELETE CASCADE;');
  }

  $and = db_and()
    ->condition('column_name', 'meta_data')
    ->condition('table_name', 'genotype_call');
  $meta_type = db_select('information_schema.columns', 'c')
    ->fields('c', array('data_type'))
    ->condition($and)
    ->execute()->fetchObject()->data_type;

  if ($meta_type != 'json') {
    db_query('ALTER TABLE chado.genotype_call ALTER COLUMN meta_data TYPE json USING meta_data::json;');
  }
}

/**
 * Add foreign key constraints to the tpps_submission table.
 */
function tpps_alter_tpps_submissions() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'tpps_submission' AND contype like 'f';");
  if (!$results->rowCount()) {
    // Create foreign key for tpps_submission to reference users table.
    db_query('ALTER TABLE tpps_submission ADD CONSTRAINT tpps_submission_uid_fkey FOREIGN KEY (uid) REFERENCES users(uid) ON DELETE CASCADE;');
    db_query('ALTER TABLE tpps_submission ADD CONSTRAINT tpps_submission_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES chado.dbxref(dbxref_id) ON DELETE CASCADE;');
  }
}

/**
 * Create the chado.plusgeno_view materialized view.
 */
function tpps_create_plusgeno_view() {
  $local_db = chado_get_db(array('name' => 'local'));

  $query = db_select('pg_class', 'p')
    ->fields('p')
    ->condition('relname', 'plusgeno_view')
    ->execute();
  if (!($result = $query->fetchObject())) {
    // Create plusgeno_view if it does not exist.
    db_query('create materialized view chado.plusgeno_view as SELECT DISTINCT p.project_id,
   d.accession,
   ppub.title,
   o.species,
   count(o.stock_id) OVER (PARTITION BY p.project_id) AS tree_count,
   sum(phen.count) OVER (PARTITION BY p.project_id) AS phen_count,
   unique_phen.phenotypes_assessed,
   g.gen_count
  FROM chado.project_dbxref p
    JOIN chado.dbxref d ON p.dbxref_id = d.dbxref_id
    JOIN ( SELECT pp.project_id,
       pub.title
      FROM chado.project_pub pp
        JOIN chado.pub ON pp.pub_id = pub.pub_id) ppub ON p.project_id = ppub.project_id
    JOIN ( SELECT DISTINCT ps.project_id,
       (org.genus::text || \' \'::text) || org.species::text AS species,
       stock.stock_id
      FROM chado.project_stock ps
        JOIN chado.stock ON ps.stock_id = stock.stock_id
        JOIN chado.organism org ON stock.organism_id = org.organism_id) o ON p.project_id = o.project_id
    LEFT JOIN ( SELECT stock_phenotype.stock_id,
       count(stock_phenotype.phenotype_id) OVER (PARTITION BY stock_phenotype.stock_id) AS count
      FROM chado.stock_phenotype) phen ON o.stock_id = phen.stock_id
    LEFT JOIN ( SELECT DISTINCT pc.project_id,
       count(pc.name) OVER (PARTITION BY pc.project_id) AS phenotypes_assessed
      FROM ( SELECT DISTINCT ps.project_id,
           ph.name
           FROM chado.phenotype ph
            JOIN chado.stock_phenotype sp ON ph.phenotype_id = sp.phenotype_id
            JOIN chado.stock s ON sp.stock_id = s.stock_id
            JOIN chado.project_stock ps ON s.stock_id = ps.stock_id) pc) unique_phen ON p.project_id = unique_phen.project_id
    LEFT JOIN ( SELECT DISTINCT genotype_call.project_id,
       count(genotype_call.genotype_call_id) OVER (PARTITION BY genotype_call.project_id) AS gen_count
      FROM chado.genotype_call) g ON p.project_id = g.project_id
   WHERE d.db_id = ' . $local_db->db_id . ';');
    variable_set('tpps_local_db', $local_db);
  }
  else {
    $matches = array();
    $definition = db_select('pg_matviews', 'p')
      ->fields('p', array('definition'))
      ->condition('matviewname', 'plusgeno_view')
      ->execute()
      ->fetchObject()->definition;
    preg_match('/d\.db_id ?= ?(\d+)\);/', $definition, $matches);
    variable_set('tpps_local_db', chado_get_db(array('db_id' => (int) $matches[1])));
  }
}

/**
 * Sets default TPPS module permissions.
 */
function tpps_default_permissions() {
  $admin_query = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', 'administrator')
    ->execute();

  $auth_query = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', 'authenticated user')
    ->execute();

  if (($admin = $admin_query->fetchObject()) and ($auth = $auth_query->fetchObject())) {
    $perms = tpps_permission();
    foreach ($perms as $name => $info) {
      db_insert('role_permission')
        ->fields(array(
          'rid' => $admin->rid,
          'permission' => $name,
          'module' => 'tpps',
        ))
        ->execute();
    }

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'access tpps form',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'user tpps submissions',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'tpps delete submission',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'view own tpps submission',
        'module' => 'tpps',
      ))
      ->execute();

    drupal_set_message(t('Attention: @t default permissions have been set. Go to @p to manage and customize @t permissions.', array('@t' => 'TPPS', '@p' => 'admin/people/permissions')), 'status');
  }
}

/**
 * Creates Tripal Entity types if they do not already exist.
 */
function tpps_create_entities() {
  $transaction = db_transaction();
  try {
    if (empty(tripal_load_bundle_entity(array('label' => 'Genotype')))) {
      tpps_create_genotype_entity();
    }

    if (empty(tripal_load_bundle_entity(array('label' => 'Stock')))) {
      tpps_create_stock_entity();
    }
  }
  catch (Exception $e) {
    watchdog_exception('tpps', $e);
    $transaction->rollback();
  }

}

/**
 * Creates the Genotype Tripal Entity type.
 */
function tpps_create_genotype_entity() {
  $local_db = variable_get('tpps_local_db');
  $local_cv = chado_get_cv(array('name' => 'local'));
  $genotype_term = chado_get_cvterm(array(
    'name' => 'genotype',
    'cv_id' => array(
      'name' => 'sequence',
    ),
  ), array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  $args = array(
    'vocabulary' => $genotype_term->dbxref_id->db_id->name,
    'accession' => $genotype_term->dbxref_id->accession,
    'term_name' => $genotype_term->name,
    'storage_args' => array(
      'data_table' => 'genotype',
    ),
  );

  tripal_create_bundle($args);
  $bundle = tripal_load_bundle_entity(array('label' => 'Genotype'));

  $prop_terms = array(
    array(
      'id' => 'sep:00007',
      'name' => 'format',
      'cvname' => 'sep',
      'field' => 'sep__format',
      'label' => 'Genotype Format',
      'dbname' => 'sep',
      'def' => 'A format is a quality that is a specificiation or arrangement of a specified form. The structure, layout, or the digital manifestation of an entity. [ PSI:GEL ]',
    ),
    array(
      'id' => 'SO:0001686',
      'name' => 'quality_value',
      'cvname' => 'sequence',
      'field' => 'so__quality_value',
      'label' => 'Genotype Quality Score',
      'dbname' => 'SO',
      'def' => 'An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score. [ http://www.sequenceontology.org/browser/current_svn/term/SO:ke ]',
    ),
    array(
      'id' => 'operation:3187',
      'name' => 'Sequence contamination filtering',
      'cvname' => 'operation',
      'field' => 'edam__filter',
      'label' => 'Genotype Contamination Filter',
      'dbname' => 'EDAM_operation',
      'def' => 'Identify and filter a (typically large) sequence data set to remove sequences from contaminants in the sample that was sequenced.',
    ),
    array(
      'id' => 'SO:0002119',
      'name' => 'allelic_frequency',
      'cvname' => 'sequence',
      'field' => 'so__allelic_frequency',
      'label' => 'Genotype Allelic Frequency',
      'dbname' => 'SO',
      'def' => 'A physical quality which inheres to the allele by virtue of the number instances of the allele within a population. This is the relative frequency of the allele at a given locus in a population. [ http://www.sequenceontology.org/browser/current_svn/term/SO:ke ]',
    ),
    array(
      'id' => 'NCIT:C155320',
      'name' => 'Read Depth',
      'cvname' => 'ncit',
      'field' => 'ncit__read_depth',
      'label' => 'Genotype Read Depth',
      'dbname' => 'NCIT',
      'def' => 'The number of times a particular locus (site, nucleotide, amplicon, region) was sequenced. [ NCI ]',
    ),
    array(
      'id' => "{$local_db->name}:number_samples",
      'name' => 'number_samples',
      'cvname' => $local_cv->name,
      'field' => "{$local_cv->name}__number_samples",
      'label' => 'Genotype Number of Samples',
      'dbname' => $local_db->name,
      'def' => 'Number of samples',
    ),
  );

  foreach ($prop_terms as $prop_term) {
    $term = chado_insert_cvterm(array(
      'id' => $prop_term['id'],
      'name' => $prop_term['name'],
      'definition' => $prop_term['def'],
      'db_name' => $prop_term['dbname'],
      'cv_name' => $prop_term['cvname'],
    ));

    if ($prop_term['cvname'] != $term->cvname) {
      db_update('chado.cvterm')
        ->fields(array(
          'cv_id' => chado_get_cv(array('name' => $prop_term['cvname']))->cv_id,
        ))
        ->condition('cvterm_id', $term->cvterm_id)
        ->execute();
    }
    $term->cvname = $prop_term['cvname'];

    $info = field_info_field($prop_term['field']);
    if (empty($info['bundles']['TripalEntity'])) {
      field_create_field(array(
        'field_name' => $prop_term['field'],
        'type' => 'chado_linker__prop',
        'settings' => array(
          'storage' => 'field_chado_storage',
        ),
        'storage' => array(
          'type' => 'field_chado_storage',
          'module' => 'tripal_chado',
          'active' => 1,
        ),
      ));
    }
    elseif (array_search($bundle->name, $info['bundles']['TripalEntity']) !== FALSE) {
      continue;
    }

    field_create_instance(array(
      'field_name' => $prop_term['field'],
      'entity_type' => 'TripalEntity',
      'label' => $prop_term['label'],
      'bundle' => $bundle->name,
      'required' => FALSE,
      'settings' => array(
        'user_register_form' => 0,
        'term_vocabulary' => $term->dbname,
        'term_name' => $term->name,
        'term_accession' => $term->accession,
        'base_table' => 'genotype',
        'chado_table' => 'genotypeprop',
        'chado_column' => 'genotype_id',
        'auto_attach' => 1,
        'term_fixed' => 0,
      ),
    ));
  }
}

/**
 * Creates the Stock Tripal Entity type.
 */
function tpps_create_stock_entity() {
  chado_insert_cvterm(array(
    'id' => 'PO:0000003',
    'name' => 'whole plant',
    'definition' => 'A plant structure (PO:0005679) which is a whole organism. [ POC:curators ]',
    'db_name' => 'PO',
  ));

  $stock_term = chado_get_cvterm(array(
    'name' => 'whole plant',
    'dbxref_id' => array(
      'db_id' => array(
        'name' => 'PO',
      ),
    ),
  ), array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  chado_associate_semweb_term('stock', 'stock_id', $stock_term);
  chado_populate_mview(chado_get_mview_id('db2cv_mview'));

  $args = array(
    'vocabulary' => $stock_term->dbxref_id->db_id->name,
    'accession' => $stock_term->dbxref_id->accession,
    'term_name' => $stock_term->name,
    'storage_args' => array(
      'data_table' => 'stock',
    ),
  );
  tripal_create_bundle($args);

  db_update('tripal_bundle')
    ->fields(array(
      'label' => 'Stock',
    ))
    ->condition('label', 'Whole Plant')
    ->execute();
  $bundle = tripal_load_bundle_entity(array('label' => 'Stock'));
  tripal_save_title_format($bundle, '[data__identifier]');

  $phenotype_term = chado_get_cvterm(array(
    'name' => 'phenotype',
    'cv_id' => array(
      'name' => 'sbo',
    ),
  ), array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  $info = field_info_field('sbo__phenotype');
  if (empty($info['bundles']['TripalEntity'])) {
    field_create_field(array(
      'field_name' => 'sbo__phenotype',
      'type' => 'sbo__phenotype',
      'settings' => array(
        'storage' => 'field_chado_storage',
      ),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_chado',
        'active' => 1,
      ),
    ));
  }

  field_create_instance(array(
    'field_name' => 'sbo__phenotype',
    'entity_type' => 'TripalEntity',
    'label' => 'Phenotype',
    'bundle' => $bundle->name,
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => 0,
      'term_vocabulary' => $phenotype_term->dbxref_id->db_id->name,
      'term_name' => $phenotype_term->name,
      'term_accession' => $phenotype_term->dbxref_id->accession,
      'base_table' => 'stock',
      'chado_table' => 'stock_phenotype',
      'chado_column' => 'phenotype_id',
      'auto_attach' => 1,
      'term_fixed' => 0,
    ),
  ));

  $genotype_term = chado_get_cvterm(array(
    'name' => 'genotype',
    'cv_id' => array(
      'name' => 'sequence',
    ),
  ), array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  $info = field_info_field('so__genotype');
  if (empty($info['bundles']['TripalEntity'])) {
    field_create_field(array(
      'field_name' => 'so__genotype',
      'type' => 'so__genotype',
      'settings' => array(
        'storage' => 'field_chado_storage',
      ),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_chado',
        'active' => 1,
      ),
    ));
  }

  field_create_instance(array(
    'field_name' => 'so__genotype',
    'entity_type' => 'TripalEntity',
    'label' => 'Genotype',
    'bundle' => $bundle->name,
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => 0,
      'term_vocabulary' => $genotype_term->dbxref_id->db_id->name,
      'term_name' => $genotype_term->name,
      'term_accession' => $genotype_term->dbxref_id->accession,
      'base_table' => 'stock',
      'chado_table' => 'stock_genotype',
      'chado_column' => 'genotype_id',
      'auto_attach' => 1,
      'term_fixed' => 0,
    ),
  ));
}
