<?php

/**
 * @file
 * Defines module schema and install/uninstall processes.
 */

/**
 * Implements hook_install().
 *
 * Define local cvterms, add necessary foreign keys to schema tables, create
 * necessary materialized views.
 */
function tpps_install() {
  // API.
  variable_set('tpps_api_token', '');
  // Admin Panel.
  variable_set('tpps_admin_panel_cache_lists', FALSE);
  variable_set('tpps_admin_panel_cache_new_species_list', FALSE);
  variable_set('tpps_admin_panel_cache_resubmit_list', FALSE);
  variable_set('tpps_admin_panel_show_execution_time', FALSE);
  // Cronjob.
  variable_set('tpps_latest_job_status_slack_updates_job_frequency', '*/15 * * * *');
  variable_set('tpps_refresh_views_job_frequency', '0 */12 * * *');
  variable_set('tpps_refresh_plusgeno_view_frequency', '0 0 * * SAT');
  variable_set('tpps_delayed_submissions_job_frequency', '0 */6 * * *');
  variable_set('tpps_cron_rule_ref_genomes_recreate', '0 0 */3 * *');
  // Report Titles.
  // See tpps_reports_settings_form();
  variable_set('tpps_report_variable_list_title', 'TPPS module variables');
  variable_set('tpps_report_items_per_page', 20);
  variable_set(
    'tpps_report_submissions_all_files_title',
    "Submission's All Files"
  );
  variable_set(
    'tpps_report_submissions_without_files_title',
    'Submissions without Files'
  );
  variable_get(
    'tpps_report_submissions_missing_files_title',
    'Submissions Missing Files'
  );
  variable_set('tpps_report_missing_doi_title', 'Missing DOI');
  variable_set(
    'tpps_report_imported_studies_title', 'Imported Studies'
  );
  variable_set('tpps_report_missing_files_title', 'List of missing files');
  variable_set('tpps_report_no_synonym_title',
    'List of phenotypes without Synonyms'
  );
  variable_set('tpps_report_unit_warning_title',
    'Unit Warning (list of phenotypes which unit differs from Synonym)'
  );
  variable_set('tpps_report_order_family_not_exist_title',
    'Order/Family not exist'
  );
  variable_set('tpps_report_organism_list_title', 'Organism List');
  variable_set('tpps_report_doi_duplicates_title', 'DOI Duplicates');
  // Submission Tools.
  variable_set('tpps_submission_secret_key', '');
  // Main settings.
  variable_set('tpps_theme', 'default');
  variable_set('tpps_top_bar', 'status');
  variable_set('tpps_dark_theme', FALSE);
  variable_set('tpps_debug_mode', FALSE);
  variable_set('tpps_autofocus_delay', 1000);
  variable_set('tpps_dump_max_len_state', 300000);
  variable_set('tpps_dump_max_len_sharedState', 300000);
  // Front page.
  variable_set('tpps_front_cache_accession_list', TRUE);
  variable_set('tpps_front_show_pending_status_mine', FALSE);
  variable_set('tpps_front_show_approved_status_mine', FALSE);
  variable_set('tpps_front_show_pending_status_others', FALSE);
  variable_set('tpps_front_show_others_studies', TRUE);
  // Page 1 Settings.
  variable_set('tpps_page_1_doi_check_source', 'public.tpps_submissions');
  variable_set('tpps_page_1_cache_ajax_responses', TRUE);
  variable_set('tpps_page_1_dryad_api_url', 'http://datadryad.org/api/v2/datasets/');
  variable_set('tpps_page_1_ajax_debug', FALSE);
  // Page 4 Settings.
  variable_set('tpps_page_4_cache_synonym_list', FALSE);
  variable_set('tpps_page_4_cache_unit_list', FALSE);
  variable_set('tpps_page_4_update_ploidy_description', TRUE);
  // Submit All.
  variable_set('tpps_submitall_log_cli_show_time', FALSE);
  variable_set('tpps_submitall_skip_gps_request', FALSE);
  variable_set('tpps_submitall_phenotype_debug_mode', FALSE);

  // #TODO Update to 'submitall.
  variable_set('tpps_submit_all_log_cli_show_time', TRUE);
  // Misc Settings.
  variable_set('tpps_theme_fix_pager', FALSE);
  variable_set('tpps_js_debug_mode', ['quickDebugMode' => 'quickDebugMode']);
  // Google Maps.
  variable_set('tpps_google_map_id', '');
  variable_set('tpps_maps_api_key', '');
  variable_set('tpps_google_map_zoom_smooth_timeout', 100);
  variable_set('tpps_google_map_zoom_default_level', 3);
  variable_set('tpps_google_map_zoom_custom_level', 14);
  // Submission Export.
  // @TODO Add ability to change those variables at settings page.
  variable_set('tpps_submission_export_show_file_search_report', FALSE);
  variable_set('tpps_submission_file_salt', md5(REQUEST_TIME));
  variable_set('tpps_submission_export_exclude_data', TRUE);
  variable_set('tpps_submission_export_exclude_tree_info', TRUE);
  // Submission Import.
  variable_set('tpps_staging_http_username', '');
  variable_set('tpps_staging_http_password', '');
  // Files.
  variable_set('tpps_file_use_api', FALSE);

  // [/VS]
  tpps_alter_tpps_submissions();
  tpps_alter_tpps_submission_dbxref();
  tpps_alter_tpps_project_file_managed();
  tpps_alter_tpps_submission_tag();

  chado_create_custom_table('genotype_call', array(
    'description' => '',
    'fields' => array(
      'genotype_call_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'variant_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'marker_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'genotype_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'meta_data' => array(
        'description' => '',
        'type' => 'json',
      ),
    ),
    'foreign keys' => array(
      'genotype' => array(
        'table' => 'genotype',
        'columns' => array(
          'genotype_id' => 'genotype_id',
        ),
      ),
      'variant' => array(
        'table' => 'feature',
        'columns' => array(
          'variant_id' => 'feature_id',
        ),
      ),
      'marker' => array(
        'table' => 'feature',
        'columns' => array(
          'marker_id' => 'feature_id',
        ),
      ),
      'project' => array(
        'table' => 'project',
        'columns' => array(
          'project_id' => 'project_id',
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
    'primary key' => array(
      'genotype_call_id',
    ),
    'referring_tables' => array(
      'genotype',
      'feature',
      'project',
      'stock',
    ),
  ), TRUE, NULL, FALSE);

  tpps_alter_genotype_call();

  chado_create_custom_table('stock_phenotype', array(
    'description' => '',
    'fields' => array(
      'phenotype_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'stock_phenotype_c1' => array(
        'stock_id',
        'phenotype_id',
      ),
    ),
    'foreign keys' => array(
      'phenotype' => array(
        'table' => 'phenotype',
        'columns' => array(
          'phenotype_id' => 'phenotype_id',
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
    'primary key' => array(
      'phenotype_id',
      'stock_id',
    ),
    'referring_tables' => array(
      'phenotype',
      'stock',
    ),
    'indexes' => array(
      'stock_phenotype_idx1' => array(
        'phenotype_id',
      ),
      'stock_phenotype_idx2' => array(
        'stock_id',
      ),
    ),
  ), TRUE, NULL, FALSE);

  chado_create_custom_table('project_organism', array(
    'description' => '',
    'fields' => array(
      'project_organism_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'organism_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'organism' => array(
        'table' => 'organism',
        'columns' => array(
          'organism_id' => 'organism_id',
        ),
      ),
      'project' => array(
        'table' => 'project',
        'columns' => array(
          'project_id' => 'project_id',
        ),
      ),
    ),
    'unique keys' => array(
      'project_organism_c1' => array(
        'project_id',
        'organism_id',
      ),
    ),
    'primary key' => array(
      'project_organism_id',
    ),
  ), TRUE, NULL, FALSE);

  chado_create_custom_table('pub_organism', array(
    'description' => '',
    'fields' => array(
      'pub_organism_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'organism_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'pub_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'organism' => array(
        'table' => 'organism',
        'columns' => array(
          'organism_id' => 'organism_id',
        ),
      ),
      'pub' => array(
        'table' => 'pub',
        'columns' => array(
          'pub_id' => 'pub_id',
        ),
      ),
    ),
    'unique keys' => array(
      'pub_organism_c1' => array(
        'pub_id',
        'organism_id',
      ),
    ),
    'primary key' => array(
      'pub_organism_id',
    ),
  ), TRUE, NULL, FALSE);

  tpps_create_plusgeno_view();

  tpps_create_genotype_search_views();

  tpps_install_miappe_ontology();

  tpps_install_cvterms();

  tpps_default_permissions();

  tpps_default_tags();

  tpps_create_entities();

  tpps_add_dryad();

}

/**
 * Implements hook_uninstall().
 *
 * Removes TPPS variables from the public.variable table. Also removes TPPS file
 * usage from public.file_usage.
 */
function tpps_uninstall() {
  // API.
  variable_del('tpps_api_token');
  // Admin Panel.
  variable_del('tpps_admin_panel_cache_study_lists');
  variable_del('tpps_admin_panel_cache_new_species_list');
  variable_del('tpps_admin_panel_cache_resubmit_list');
  variable_del('tpps_admin_panel_show_execution_time');
  // Cronjob.
  variable_del('tpps_latest_job_status_slack_updates_job_frequency');
  variable_del('tpps_refresh_views_job_frequency');
  variable_del('tpps_refresh_plusgeno_view_frequency');
  variable_del('tpps_delayed_submissions_job_frequency');
  variable_del('tpps_cron_rule_ref_genomes_recreate');
  // Reports Titles.
  // See tpps_reports_settings_form();
  variable_del('tpps_report_variable_list_title');
  variable_del('tpps_report_items_per_page');
  variable_del('tpps_report_submissions_all_files_title');
  variable_del('tpps_report_submissions_without_files_title');
  variable_del('tpps_report_submissions_missing_files_title');
  variable_del('tpps_report_missing_doi_title');
  variable_del('tpps_report_imported_studies_title');
  variable_del('tpps_report_missing_files_title');
  variable_del('tpps_report_no_synonym_title');
  variable_del('tpps_report_unit_warning_title');
  variable_del('tpps_report_order_family_not_exist_title');
  variable_del('tpps_report_organism_list_title');
  variable_del('tpps_report_doi_duplicates_title');
  // Submission Tools.
  variable_del('tpps_submission_secret_key');
  // Main settings.
  variable_del('tpps_theme');
  variable_del('tpps_top_bar');
  variable_del('tpps_dark_theme');
  variable_del('tpps_debug_mode');
  variable_del('tpps_autofocus_delay');
  variable_del('tpps_dump_max_len_state');
  variable_del('tpps_dump_max_len_sharedState');
  // Front page.
  variable_del('tpps_front_cache_accession_list');
  variable_del('tpps_front_show_pending_status_mine');
  variable_del('tpps_front_show_approved_status_mine');
  variable_del('tpps_front_show_pending_status_others');
  variable_del('tpps_front_show_others_studies');
  // Page 1.
  variable_det('tpps_page_1_doi_check_source');
  variable_del('tpps_page_1_cache_ajax_responses');
  variable_del('tpps_page_1_dryad_api_url');
  variable_del('tpps_page_1_ajax_debug');
  // Page 4 Settings.
  variable_del('tpps_page_4_cache_synonym_list');
  variable_del('tpps_page_4_cache_unit_list');
  variable_del('tpps_page_4_update_ploidy_description');
  // Submit All settings.
  variable_del('tpps_submitall_skip_gps_request');
  variable_del('tpps_submitall_phenotype_debug_mode');
  variable_del('tpps_submitall_log_cli_show_time');
  variable_del('tpps_submit_all_log_cli_show_time');

  // Misc Settings.
  variable_del('tpps_theme_fix_pager');
  variable_del('tpps_js_debug_mode');
  // Google Maps.
  variable_del('tpps_google_map_id');
  variable_del('tpps_maps_api_key');
  variable_del('tpps_google_map_zoom_smooth_timeout');
  variable_del('tpps_google_map_zoom_default_level');
  variable_del('tpps_google_map_zoom_custom_level');

  variable_del('tpps_imported_studies_list');
  // Submission Import/Export.
  variable_del('tpps_submission_export_show_file_search_report');
  variable_del('tpps_submission_file_salt');
  variable_del('tpps_submission_export_exclude_data');
  variable_del('tpps_submission_export_exclude_tree_info');
  // Submission Import.
  variable_del('tpps_staging_http_username');
  variable_del('tpps_staging_http_password');
  // Files.
  variable_del('tpps_file_use_api');
  // [/VS]

  // Remove all incomplete submissions connected to user profiles.
  db_delete('public.variable')
    ->condition('name', db_like('tpps_incomplete_') . '%', 'LIKE')
    ->execute();

  // Remove all complete submissions connected to user profiles.
  db_delete('public.variable')
    ->condition('name', db_like('tpps_complete_') . '%', 'LIKE')
    ->execute();

  $tpps_usage = db_select('public.file_usage', 'f')
    ->fields('f')
    ->condition('module', 'tpps')
    ->execute();

  foreach ($tpps_usage as $row) {
    file_usage_delete(file_load($row->fid), $row->module, $row->type, $row->id, $row->count);
  }
}

/**
 * Implements hook_schema().
 *
 * This function defines and creates the tpps_submission table that TPPS uses to
 * keep track of submissions.
 */
function tpps_schema() {
  $schema['tpps_submission'] = array(
    'description' => 'Contains TPPS Submissions',
    'fields' => array(
      'tpps_submission_id' => array(
        'description' => 'The id of the TPPS submission.',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'user id of the user who created the submission.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Status of the submission - Incomplete, Pending Approval, Submission Job Running or Approved.',
        'type' => 'varchar',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'accession' => array(
        'description' => 'The TGDR### accession number of the submission',
        'type' => 'varchar',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'dbxref_id' => array(
        'description' => 'The dbxref_id from chado.dbxref.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'submission_state' => [
        'description' => 'The form_state of the submission.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'shared_state' => [
        'description' => 'Submission Shared State for pipeline processing.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ],
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
      'dbxref_id' => array(
        'table' => 'chado.dbxref',
        'columns' => array(
          'dbxref_id' => 'dbxref_id',
        ),
      ),
    ),
    'primary key' => array(
      'tpps_submission_id',
    ),
  );

  $schema['chado.genotype_call'] = array(
    'description' => '',
    'fields' => array(
      'genotype_call_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'variant_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'marker_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'genotype_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'meta_data' => array(
        'description' => '',
        // Drupal does not support the json data type by default, we will use
        // a placeholder for meta_data for now, and upon install we will
        // change the type to json.
        'type' => 'text',
      ),
    ),
    'foreign keys' => array(
      'genotype_id' => array(
        'table' => 'chado.genotype',
        'columns' => array(
          'genotype_id' => 'genotype_id',
        ),
      ),
      'variant_id' => array(
        'table' => 'chado.feature',
        'columns' => array(
          'variant_id' => 'feature_id',
        ),
      ),
      'marker_id' => array(
        'table' => 'chado.feature',
        'columns' => array(
          'marker_id' => 'feature_id',
        ),
      ),
      'project_id' => array(
        'table' => 'chado.project',
        'columns' => array(
          'project_id' => 'project_id',
        ),
      ),
      'stock_id' => array(
        'table' => 'chado.stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
    'primary key' => array(
      'genotype_call_id',
    ),
  );

  $schema['tpps_submission_dbxref'] = array(
    'description' => '',
    'fields' => array(
      'tpps_submission_dbxref_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tpps_submission_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'dbxref_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'tpps_submission_id' => array(
        'table' => 'tpps_submission',
        'columns' => array(
          'tpps_submission_id' => 'tpps_submission_id',
        ),
      ),
      'dbxref_id' => array(
        'table' => 'chado.dbxref',
        'columns' => array(
          'dbxref_id' => 'dbxref_id',
        ),
      ),
    ),
    'unique keys' => array(
      'tpps_submission_dbxref_c1' => array(
        'tpps_submission_id',
        'dbxref_id',
      ),
    ),
    'primary key' => array(
      'tpps_submission_dbxref_id',
    ),
  );

  $schema['tpps_project_file_managed'] = array(
    'description' => '',
    'fields' => array(
      'tpps_project_file_managed_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'project_id' => array(
        'table' => 'chado.project',
        'columns' => array(
          'project_id' => 'project_id',
        ),
      ),
      'fid' => array(
        'table' => 'file_managed',
        'columns' => array(
          'fid' => 'fid',
        ),
      ),
    ),
    'unique keys' => array(
      'tpps_project_file_managed_c1' => array(
        'project_id',
        'fid',
      ),
    ),
    'primary key' => array(
      'tpps_project_file_managed_id',
    ),
  );

  $schema['tpps_tag'] = array(
    'description' => '',
    'fields' => array(
      'tpps_tag_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => '',
        'type' => 'varchar',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'color' => array(
        'description' => '',
        'type' => 'varchar',
        'size' => 'normal',
      ),
      'static' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'tpps_tag_c1' => array(
        'name',
      ),
    ),
    'primary key' => array(
      'tpps_tag_id',
    ),
  );

  $schema['tpps_submission_tag'] = array(
    'description' => '',
    'fields' => array(
      'tpps_submission_tag_id' => array(
        'description' => '',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tpps_submission_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'tpps_tag_id' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'tpps_submission_id' => array(
        'table' => 'tpps_submission',
        'columns' => array(
          'tpps_submission_id' => 'tpps_submission_id',
        ),
      ),
      'tpps_tag_id' => array(
        'table' => 'tpps_tag',
        'columns' => array(
          'tpps_tag_id' => 'tpps_tag_id',
        ),
      ),
    ),
    'unique keys' => array(
      'tpps_submission_tag_c1' => array(
        'tpps_submission_id',
        'tpps_tag_id',
      ),
    ),
    'primary key' => array(
      'tpps_submission_tag_id',
    ),
  );

  // [VS]
  // #3kged9b Phenotypes synonyms table integrated on TPPS.
  $schema['tpps_phenotype_unit_warning'] = [
    'description' => 'List of studies with Custom Units.',
    'fields' => [
      'study_name' => [
        'description' => 'Study Name.',
        'type' => 'varchar',
        'size' => 'normal',
      ],
    ],
    'unique keys' => [
      'study_name' => ['study_name'],
    ],
  ];
  // #861n70hh6 Add custom cache table to have ability to clear only module's data.
  $schema[TPPS_CACHE_BIN] = drupal_get_schema_unprocessed('system', 'cache');
  // [/VS]

  return $schema;
}

/**
 * Install the MIAPPE ontology using via the obo file and tripal_cv_load_obo().
 *
 * The MIAPPE ontology obo file was created using http://robot.obolibrary.org/
 * on the owl file found here: https://github.com/MIAPPE/MIAPPE-ontology.
 */
function tpps_install_miappe_ontology() {
  module_load_include('inc', 'tripal_chado', 'includes/tripal_chado.cv');
  $transaction = db_transaction();

  $file_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'tpps') . '/includes/lib/ppeo.obo';

  try {
    $obo_id = db_insert('tripal_cv_obo')
      ->fields(array(
        'name' => 'PPEO',
        'path' => $file_path,
      ))
      ->execute();
    tripal_cv_load_obo($obo_id);
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Adds local TPPS cvterms.
 */
function tpps_install_cvterms() {
  $terms_function = "tpps_get_cvterms_v" . TPPS_MAJOR_VERSION . "_" . TPPS_MINOR_VERSION;
  $terms = $terms_function();

  $transaction = db_transaction();

  try {
    foreach ($terms as $key => $info) {
      if (empty($info)) {
        continue;
      }

      if ($key == 'new_terms' and is_array($info)) {
        foreach ($info as $term_info) {
          tpps_ols_install_term($term_info);
        }
        continue;
      }

      $result = tpps_ols_install_term($info);
      if ($result === 'local') {
        tpps_local_install_term($key);
      }
    }
    variable_set('tpps_cvterms_version', TPPS_MAJOR_VERSION . '_' . TPPS_MINOR_VERSION);
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Add foreign key constraints to the chado.genotype_call table.
 */
function tpps_alter_genotype_call() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'genotype_call' AND contype like 'f';");
  if (!$results->rowCount()) {
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES chado.genotype(genotype_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES chado.feature(feature_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_variant_id_fkey FOREIGN KEY (variant_id) REFERENCES chado.feature(feature_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_project_id_fkey FOREIGN KEY (project_id) REFERENCES chado.project(project_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE chado.genotype_call ADD CONSTRAINT genotype_call_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES chado.stock(stock_id) ON DELETE CASCADE;');
  }

  $and = db_and()
    ->condition('column_name', 'meta_data')
    ->condition('table_name', 'genotype_call');
  $meta_type = db_select('information_schema.columns', 'c')
    ->fields('c', array('data_type'))
    ->condition($and)
    ->execute()->fetchObject()->data_type;

  if ($meta_type != 'json') {
    db_query('ALTER TABLE chado.genotype_call ALTER COLUMN meta_data TYPE json USING meta_data::json;');
  }
}

/**
 * Add foreign key constraints to the tpps_submission table.
 */
function tpps_alter_tpps_submissions() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'tpps_submission' AND contype like 'f';");
  if (!$results->rowCount()) {
    // Create foreign key for tpps_submission to reference users table.
    db_query('ALTER TABLE tpps_submission ADD CONSTRAINT tpps_submission_uid_fkey FOREIGN KEY (uid) REFERENCES users(uid) ON DELETE CASCADE;');
    db_query('ALTER TABLE tpps_submission ADD CONSTRAINT tpps_submission_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES chado.dbxref(dbxref_id) ON DELETE CASCADE;');
  }
}

/**
 * Add foreign key constraints to the tpps_submission_dbxref table.
 */
function tpps_alter_tpps_submission_dbxref() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'tpps_submission_dbxref' AND contype like 'f';");
  if (!$results->rowCount()) {
    db_query('ALTER TABLE tpps_submission_dbxref ADD CONSTRAINT tpps_submission_dbxref_tpps_submission_id_fkey FOREIGN KEY (tpps_submission_id) REFERENCES tpps_submission(tpps_submission_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE tpps_submission_dbxref ADD CONSTRAINT tpps_submission_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES chado.dbxref(dbxref_id) ON DELETE CASCADE;');
  }
}

/**
 * Add foreign key constraints to the tpps_project_file_managed table.
 */
function tpps_alter_tpps_project_file_managed() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'tpps_project_file_managed' AND contype like 'f';");
  if (!$results->rowCount()) {
    db_query('ALTER TABLE tpps_project_file_managed ADD CONSTRAINT tpps_project_file_managed_fid_fkey FOREIGN KEY (fid) REFERENCES file_managed(fid) ON DELETE CASCADE;');
    db_query('ALTER TABLE tpps_project_file_managed ADD CONSTRAINT tpps_project_file_managed_project_id_fkey FOREIGN KEY (project_id) REFERENCES chado.project(project_id) ON DELETE CASCADE');
  }
}

/**
 * Add foreign key constraints to the tpps_submission_tag table.
 */
function tpps_alter_tpps_submission_tag() {
  $results = db_query("SELECT contype "
    . "FROM pg_catalog.pg_constraint con JOIN pg_catalog.pg_class rel ON rel.oid = con.conrelid "
    . "WHERE rel.relname = 'tpps_submission_tag' AND contype like 'f';");
  if (!$results->rowCount()) {
    db_query('ALTER TABLE tpps_submission_tag ADD CONSTRAINT tpps_submission_tag_tpps_tag_id_fkey FOREIGN KEY (tpps_tag_id) REFERENCES tpps_tag(tpps_tag_id) ON DELETE CASCADE;');
    db_query('ALTER TABLE tpps_submission_tag ADD CONSTRAINT tpps_submission_tag_tpps_submission_id_fkey FOREIGN KEY (tpps_submission_id) REFERENCES tpps_submission(tpps_submission_id) ON DELETE CASCADE;');
  }
}

/**
 * Create the chado.plusgeno_view materialized view.
 */
function tpps_create_plusgeno_view() {
  $local_db = chado_get_db(array('name' => 'local'));

  $query = db_select('pg_class', 'p')
    ->fields('p')
    ->condition('relname', 'plusgeno_view')
    ->execute();
  if (!($result = $query->fetchObject())) {
    // Create plusgeno_view if it does not exist.
    db_query('create materialized view chado.plusgeno_view as SELECT DISTINCT p.project_id,
   d.accession,
   ppub.title,
   o.species,
   count(o.stock_id) OVER (PARTITION BY p.project_id) AS tree_count,
   sum(phen.count) OVER (PARTITION BY p.project_id) AS phen_count,
   unique_phen.phenotypes_assessed,
   g.gen_count
  FROM chado.project_dbxref p
    JOIN chado.dbxref d ON p.dbxref_id = d.dbxref_id
    JOIN ( SELECT pp.project_id,
       pub.title
      FROM chado.project_pub pp
        JOIN chado.pub ON pp.pub_id = pub.pub_id) ppub ON p.project_id = ppub.project_id
    JOIN ( SELECT DISTINCT ps.project_id,
       (org.genus::text || \' \'::text) || org.species::text AS species,
       stock.stock_id
      FROM chado.project_stock ps
        JOIN chado.stock ON ps.stock_id = stock.stock_id
        JOIN chado.organism org ON stock.organism_id = org.organism_id) o ON p.project_id = o.project_id
    LEFT JOIN ( SELECT stock_phenotype.stock_id,
       count(stock_phenotype.phenotype_id) OVER (PARTITION BY stock_phenotype.stock_id) AS count
      FROM chado.stock_phenotype) phen ON o.stock_id = phen.stock_id
    LEFT JOIN ( SELECT DISTINCT pc.project_id,
       count(pc.name) OVER (PARTITION BY pc.project_id) AS phenotypes_assessed
      FROM ( SELECT DISTINCT ps.project_id,
           ph.name
           FROM chado.phenotype ph
            JOIN chado.stock_phenotype sp ON ph.phenotype_id = sp.phenotype_id
            JOIN chado.stock s ON sp.stock_id = s.stock_id
            JOIN chado.project_stock ps ON s.stock_id = ps.stock_id) pc) unique_phen ON p.project_id = unique_phen.project_id
    LEFT JOIN ( SELECT DISTINCT genotype_call.project_id,
       count(genotype_call.genotype_call_id) OVER (PARTITION BY genotype_call.project_id) AS gen_count
      FROM chado.genotype_call) g ON p.project_id = g.project_id
   WHERE d.db_id = ' . $local_db->db_id . ';');
    variable_set('tpps_local_db', $local_db);
  }
  else {
    $matches = array();
    $definition = db_select('pg_matviews', 'p')
      ->fields('p', array('definition'))
      ->condition('matviewname', 'plusgeno_view')
      ->execute()
      ->fetchObject()->definition;
    preg_match('/d\.db_id ?= ?(\d+)\);/', $definition, $matches);
    variable_set('tpps_local_db', chado_get_db(array('db_id' => (int) $matches[1])));
  }
}

/**
 * Create the chado.tpps_search_genotype_name materialized view.
 */
function tpps_create_genotype_search_views() {
  $query = db_select('pg_class', 'p')
    ->fields('p')
    ->condition('relname', 'tpps_search_genotype_name')
    ->execute();
  if (!($result = $query->fetchObject())) {
    db_query('create materialized view chado.tpps_search_genotype_name as
      select distinct gc.project_id, g.name
      from chado.genotype_call gc
        inner join chado.genotype g
      on (g.genotype_id = gc.genotype_id);');
  }

  $query = db_select('pg_class', 'p')
    ->fields('p')
    ->condition('relname', 'tpps_search_genotype_marker')
    ->execute();
  if (!($result = $query->fetchObject())) {
    db_query('create materialized view chado.tpps_search_genotype_marker as
      select distinct gc.project_id, cvt.name
      from chado.genotype_call gc
        inner join chado.genotype g
          on (g.genotype_id = gc.genotype_id)
        inner join chado.cvterm cvt
          on (cvt.cvterm_id = g.type_id);');
  }
}

/**
 * Sets default TPPS module permissions.
 */
function tpps_default_permissions() {
  $admin_query = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', 'administrator')
    ->execute();

  $auth_query = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', 'authenticated user')
    ->execute();

  $anon_query = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', 'anonymous user')
    ->execute();

  if (($admin = $admin_query->fetchObject()) and ($auth = $auth_query->fetchObject()) and ($anon = $anon_query->fetchObject())) {
    $perms = tpps_permission();
    foreach ($perms as $name => $info) {
      db_insert('role_permission')
        ->fields(array(
          'rid' => $admin->rid,
          'permission' => $name,
          'module' => 'tpps',
        ))
        ->execute();
    }

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'access tpps form',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'user tpps submissions',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'tpps delete submission',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'view own tpps submission',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $auth->rid,
        'permission' => 'access tpps details',
        'module' => 'tpps',
      ))
      ->execute();

    db_insert('role_permission')
      ->fields(array(
        'rid' => $anon->rid,
        'permission' => 'access tpps details',
        'module' => 'tpps',
      ))
      ->execute();

    drupal_set_message(t('Attention: @t default permissions have been set. Go to @p to manage and customize @t permissions.', array(
      '@t' => 'TPPS',
      '@p' => 'admin/people/permissions',
    )), 'status');
  }
}

/**
 * Creates default TPPS Submission Tags.
 */
function tpps_default_tags() {
  $tags = array(
    'TPPS' => '',
    'TPPSc' => 'lightgray',
    'Genotype' => 'lightgreen',
    'Phenotype' => 'lightblue',
    'Environment' => 'lightsalmon',
    'No Location Information' => 'pink',
    'Approximate Coordinates' => 'gray',
  );

  foreach ($tags as $name => $color) {
    db_insert('tpps_tag')
      ->fields(array(
        'name' => $name,
        'color' => $color,
        'static' => 1,
      ))
      ->execute();
  }
}

/**
 * Creates Tripal Entity types if they do not already exist.
 */
function tpps_create_entities() {
  $transaction = db_transaction();
  try {
    if (empty(tripal_load_bundle_entity(array('label' => 'Genotype')))) {
      tpps_create_genotype_entity();
    }

    if (empty(tripal_load_bundle_entity(array('label' => 'Stock')))) {
      tpps_create_stock_entity();
    }
  }
  catch (Exception $e) {
    watchdog_exception('tpps', $e);
    $transaction->rollback();
    throw $e;
  }

}

/**
 * Creates the Genotype Tripal Entity type.
 */
function tpps_create_genotype_entity() {
  $local_db = variable_get('tpps_local_db');
  $local_cv = chado_get_cv(array('name' => 'local'));
  $genotype_term = tpps_load_cvterm('genotype', array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  $args = array(
    'vocabulary' => $genotype_term->dbxref_id->db_id->name,
    'accession' => $genotype_term->dbxref_id->accession,
    'term_name' => $genotype_term->name,
    'storage_args' => array(
      'data_table' => 'genotype',
    ),
  );

  tripal_create_bundle($args);
  $bundle = tripal_load_bundle_entity(array('label' => 'Genotype'));

  $prop_terms = array(
    array(
      'id' => 'sep:00007',
      'name' => 'format',
      'cvname' => 'sep',
      'field' => 'sep__format',
      'label' => 'Genotype Format',
      'dbname' => 'sep',
      'def' => 'A format is a quality that is a specificiation or arrangement of a specified form. The structure, layout, or the digital manifestation of an entity. [ PSI:GEL ]',
    ),
    array(
      'id' => 'SO:0001686',
      'name' => 'quality_value',
      'cvname' => 'sequence',
      'field' => 'so__quality_value',
      'label' => 'Genotype Quality Score',
      'dbname' => 'SO',
      'def' => 'An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score. [ http://www.sequenceontology.org/browser/current_svn/term/SO:ke ]',
    ),
    array(
      'id' => 'operation:3187',
      'name' => 'Sequence contamination filtering',
      'cvname' => 'operation',
      'field' => 'edam__filter',
      'label' => 'Genotype Contamination Filter',
      'dbname' => 'EDAM_operation',
      'def' => 'Identify and filter a (typically large) sequence data set to remove sequences from contaminants in the sample that was sequenced.',
    ),
    array(
      'id' => 'SO:0002119',
      'name' => 'allelic_frequency',
      'cvname' => 'sequence',
      'field' => 'so__allelic_frequency',
      'label' => 'Genotype Allelic Frequency',
      'dbname' => 'SO',
      'def' => 'A physical quality which inheres to the allele by virtue of the number instances of the allele within a population. This is the relative frequency of the allele at a given locus in a population. [ http://www.sequenceontology.org/browser/current_svn/term/SO:ke ]',
    ),
    array(
      'id' => 'NCIT:C155320',
      'name' => 'Read Depth',
      'cvname' => 'ncit',
      'field' => 'ncit__read_depth',
      'label' => 'Genotype Read Depth',
      'dbname' => 'NCIT',
      'def' => 'The number of times a particular locus (site, nucleotide, amplicon, region) was sequenced. [ NCI ]',
    ),
    array(
      'id' => "{$local_db->name}:number_samples",
      'name' => 'number_samples',
      'cvname' => $local_cv->name,
      'field' => "{$local_cv->name}__number_samples",
      'label' => 'Genotype Number of Samples',
      'dbname' => $local_db->name,
      'def' => 'Number of samples',
    ),
  );

  foreach ($prop_terms as $prop_term) {
    $term = chado_insert_cvterm(array(
      'id' => $prop_term['id'],
      'name' => $prop_term['name'],
      'definition' => $prop_term['def'],
      'db_name' => $prop_term['dbname'],
      'cv_name' => $prop_term['cvname'],
    ));

    if ($prop_term['cvname'] != $term->cvname) {
      db_update('chado.cvterm')
        ->fields(array(
          'cv_id' => chado_get_cv(array('name' => $prop_term['cvname']))->cv_id,
        ))
        ->condition('cvterm_id', $term->cvterm_id)
        ->execute();
    }
    $term->cvname = $prop_term['cvname'];

    $info = field_info_field($prop_term['field']);
    if (empty($info['bundles']['TripalEntity'])) {
      field_create_field(array(
        'field_name' => $prop_term['field'],
        'type' => 'chado_linker__prop',
        'settings' => array(
          'storage' => 'field_chado_storage',
        ),
        'storage' => array(
          'type' => 'field_chado_storage',
          'module' => 'tripal_chado',
          'active' => 1,
        ),
      ));
    }
    elseif (array_search($bundle->name, $info['bundles']['TripalEntity']) !== FALSE) {
      continue;
    }

    field_create_instance(array(
      'field_name' => $prop_term['field'],
      'entity_type' => 'TripalEntity',
      'label' => $prop_term['label'],
      'bundle' => $bundle->name,
      'required' => FALSE,
      'settings' => array(
        'user_register_form' => 0,
        'term_vocabulary' => $term->dbname,
        'term_name' => $term->name,
        'term_accession' => $term->accession,
        'base_table' => 'genotype',
        'chado_table' => 'genotypeprop',
        'chado_column' => 'genotype_id',
        'auto_attach' => 1,
        'term_fixed' => 0,
      ),
    ));
  }
}

/**
 * Creates the Stock Tripal Entity type.
 */
function tpps_create_stock_entity() {
  $stock_term = tpps_load_cvterm('whole plant', array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  chado_associate_semweb_term('stock', 'stock_id', $stock_term);
  chado_populate_mview(chado_get_mview_id('db2cv_mview'));

  $args = array(
    'vocabulary' => $stock_term->dbxref_id->db_id->name,
    'accession' => $stock_term->dbxref_id->accession,
    'term_name' => $stock_term->name,
    'storage_args' => array(
      'data_table' => 'stock',
    ),
  );
  tripal_create_bundle($args);

  db_update('tripal_bundle')
    ->fields(array(
      'label' => 'Stock',
    ))
    ->condition('label', 'Whole Plant')
    ->execute();
  $bundle = tripal_load_bundle_entity(array('label' => 'Stock'));
  tripal_save_title_format($bundle, '[data__identifier]');

  $phenotype_term = tpps_load_cvterm('phenotype', array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  $info = field_info_field('sbo__phenotype');
  if (empty($info['bundles']['TripalEntity'])) {
    field_create_field(array(
      'field_name' => 'sbo__phenotype',
      'type' => 'sbo__phenotype',
      'settings' => array(
        'storage' => 'field_chado_storage',
      ),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_chado',
        'active' => 1,
      ),
    ));
  }

  field_create_instance(array(
    'field_name' => 'sbo__phenotype',
    'entity_type' => 'TripalEntity',
    'label' => 'Phenotype',
    'bundle' => $bundle->name,
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => 0,
      'term_vocabulary' => $phenotype_term->dbxref_id->db_id->name,
      'term_name' => $phenotype_term->name,
      'term_accession' => $phenotype_term->dbxref_id->accession,
      'base_table' => 'stock',
      'chado_table' => 'stock_phenotype',
      'chado_column' => 'phenotype_id',
      'auto_attach' => 1,
      'term_fixed' => 0,
    ),
  ));

  $genotype_term = tpps_load_cvterm('genotype', array(
    'include_fk' => array(
      'dbxref_id' => 1,
    ),
  ));

  $info = field_info_field('so__genotype');
  if (empty($info['bundles']['TripalEntity'])) {
    field_create_field(array(
      'field_name' => 'so__genotype',
      'type' => 'so__genotype',
      'settings' => array(
        'storage' => 'field_chado_storage',
      ),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_chado',
        'active' => 1,
      ),
    ));
  }

  field_create_instance(array(
    'field_name' => 'so__genotype',
    'entity_type' => 'TripalEntity',
    'label' => 'Genotype',
    'bundle' => $bundle->name,
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => 0,
      'term_vocabulary' => $genotype_term->dbxref_id->db_id->name,
      'term_name' => $genotype_term->name,
      'term_accession' => $genotype_term->dbxref_id->accession,
      'base_table' => 'stock',
      'chado_table' => 'stock_genotype',
      'chado_column' => 'genotype_id',
      'auto_attach' => 1,
      'term_fixed' => 0,
    ),
  ));
}

/**
 * Creates the dryad DB.
 */
function tpps_add_dryad() {
  chado_insert_db(array(
    'name' => 'dryad',
    'url' => 'https://datadryad.org/',
    'urlprefix' => 'https://datadryad.org/resource/doi:{doi}',
  ));
}

/**
 * Implements hook_update_N().
 *
 * Convert old submissions to new form_state structure.
 */
function tpps_update_7100() {

  $transaction = db_transaction();
  try {
    $submissions = tpps_load_submission_multiple(array(
      'status' => 'Approved',
    ));

    foreach ($submissions as $state) {
      if (!empty($state['saved_values'][TPPS_PAGE_3]['tree-accession']['file']) and empty($state['saved_values'][TPPS_PAGE_3]['tree-accession']['check'])) {
        $state['saved_values'][TPPS_PAGE_3]['tree-accession']['species-1'] = $state['saved_values'][TPPS_PAGE_3]['tree-accession'];
        unset($state['saved_values'][TPPS_PAGE_3]['tree-accession']['species-1']['check']);
        try {
          tpps_submission_update_all_stats($state);
        }
        catch (Exception $e) {
          if ($e->getMessage() == 'Unrecognized file type') {
            continue;
          }
          throw $e;
        }
        tpps_update_submission($state);
      }
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Populate top-level state info for old submissions.
 */
function tpps_update_7101() {
  $transaction = db_transaction();
  try {
    $submissions = tpps_load_submission_multiple(array(
      'status' => 'Approved',
    ));

    foreach ($submissions as $state) {
      $firstpage = $state['saved_values'][TPPS_PAGE_1] ?? NULL;
      $seconds = $firstpage['publication']['secondaryAuthors'] ?? NULL;
      $state['title'] = $firstpage['publication']['title'] ?? "";
      $state['abstract'] = $firstpage['publication']['abstract'] ?? "";
      $state['pyear'] = $firstpage['publication']['year'] ?? "";
      $state['journal'] = $firstpage['publication']['journal'] ?? "";
      $state['authors'] = !empty($firstpage['primaryAuthor']) ? array($firstpage['primaryAuthor']) : array();
      $state['files'] = array();
      if (!empty($seconds['number'])) {
        for ($i = 1; $i <= $seconds['number']; $i++) {
          $state['authors'][] = $seconds[$i];
        }
      }

      if (empty($state['tree_info'])) {
        $state['tree_info'] = array();
        $query = db_select('chado.stock', 's');
        $query->join('chado.stockprop', 'lat', 'lat.stock_id = s.stock_id');
        $query->join('chado.stockprop', 'lng', 'lng.stock_id = s.stock_id');
        $query->fields('s', array('stock_id', 'uniquename', 'organism_id'));
        $query->fields('lat', array('value'));
        $query->fields('lng', array('value'));
        $query->condition('s.uniquename', db_like($state['accession']) . '%', 'LIKE');
        $query->condition('lat.type_id', tpps_load_cvterm('gps_latitude', array(), '1_1')->cvterm_id);
        $query->condition('lng.type_id', tpps_load_cvterm('gps_longitude', array(), '1_1')->cvterm_id);

        $query = $query->execute();

        while (($tree = $query->fetchObject())) {
          preg_match('/^TGDR[0-9]+-(.*)$/', $tree->uniquename, $matches);
          $state['tree_info'][$matches[1]] = array(
            'stock_id' => $tree->stock_id,
            'lat' => $tree->value,
            'lng' => $tree->lng_value,
            'organism_id' => $tree->organism_id,
          );
        }
      }

      $org_num = $state['stats']['species_count'] ?? 0;
      for ($i = 1; $i <= $org_num; $i++) {
        $state['files'][] = $state['saved_values'][TPPS_PAGE_3]['tree-accession']["species-$i"]['file'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['phenotype']['iso'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['phenotype']['file'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['phenotype']['metadata'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['genotype']['files']['snps-assay'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['genotype']['files']['assay-design'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['genotype']['files']['ssrs'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['genotype']['files']['other'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['genotype']['files']['vcf'] ?? NULL;
        $state['files'][] = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['genotype']['tripal_fasta']['file']['file_upload'] ?? NULL;
      }

      foreach ($state['files'] as $key => $val) {
        if (empty($val)) {
          unset($state['files'][$key]);
        }
      }

      tpps_update_submission($state);
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Add dryad db to chado.
 */
function tpps_update_7102() {
  tpps_add_dryad();
}

/**
 * Implements hook_update_N().
 *
 * Add DOI dbxref to old TPPSc submissions.
 */
function tpps_update_7103() {
  $transaction = db_transaction();
  try {
    $submissions = tpps_load_submission_multiple(array(
      'status' => 'Approved',
    ));
    foreach ($submissions as $state) {
      if (!empty($state['saved_values'][TPPS_PAGE_1]['doi']) and !empty($state['ids']['project_id'])) {
        $dryad_db = chado_get_db(array('name' => 'dryad'));
        $dryad_dbxref = chado_insert_dbxref(array(
          'db_id' => $dryad_db->db_id,
          'accession' => $state['saved_values'][TPPS_PAGE_1]['doi'],
        ))->dbxref_id;
        tpps_chado_insert_record('project_dbxref', array(
          'project_id' => $state['ids']['project_id'],
          'dbxref_id' => $dryad_dbxref,
        ));
      }
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Populate pub_organism table for old TPPS submissions.
 */
function tpps_update_7104() {
  $transaction = db_transaction();
  try {
    $submissions = tpps_load_submission_multiple(array(
      'status' => 'Approved',
    ));
    foreach ($submissions as $state) {
      if (!empty($state['ids']['organism_ids']) and !empty($state['ids']['project_id'])) {
        $proj_id = $state['ids']['project_id'];
        $pub_id = db_select('chado.project_pub', 'p')
          ->fields('p', array('pub_id'))
          ->condition('project_id', $proj_id)
          ->range(0, 1)
          ->execute()->fetchObject()->pub_id;
        foreach ($state['ids']['organism_ids'] as $org_id) {
          tpps_chado_insert_record('pub_organism', array(
            'organism_id' => $org_id,
            'pub_id' => $pub_id,
          ));
        }
      }
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Create materialized views for genotype search functions.
 */
function tpps_update_7105() {
  tpps_create_genotype_search_views();
}

/**
 * Implements hook_update_N().
 *
 * Create last-updated timestamps for old submissions.
 */
function tpps_update_7106() {
  $submissions = tpps_load_submission_multiple();
  foreach ($submissions as $state) {
    if (empty($state['updated'])) {
      tpps_update_submission($state);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Load MIAPPE ontology to chado.
 */
function tpps_update_7107() {
  $cv = chado_get_cv(array('name' => 'PPEO'));
  if (empty($cv)) {
    tpps_install_miappe_ontology();
  }
}

/**
 * Implements hook_update_N().
 *
 * Set default cvterms version and migrate to 1.2.
 */
function tpps_update_7108() {
  variable_set('tpps_cvterms_version', '1_1');
  tpps_migrate_cvterms(1, 1, 1, 2);
}

/**
 * Implements hook_update_N().
 *
 * Corrects file path records for renamed files in the db.
 */
function tpps_update_7109() {
  $submissions = tpps_load_submission_multiple(array(
    'status' => 'Approved',
  ));
  $or = db_or()
    ->condition('type_id', tpps_load_cvterm('file_path')->cvterm_id)
    ->condition('type_id', tpps_load_cvterm('file_path', array(), '1_1')->cvterm_id);
  foreach ($submissions as $state) {
    $files = $state['files'] ?? NULL;
    if (!empty($files) and !empty($state['file_info'])) {
      $transaction = db_transaction();
      try {
        // Delete files from projectprop.
        $num_files = db_delete('chado.projectprop')
          ->condition('project_id', $state['ids']['project_id'])
          ->condition($or)
          ->execute();
        $state['file_rank'] = 0;
        $state_files = count($files);
        $state_files += count(($state['revised_files'] ?? array()));
        if ($num_files != $state_files) {
          throw new \Exception("Improper number of files in db vs files in state: $num_files in db and $state_files in state");
        }
        if (!empty($state['revised_files'])) {
          foreach ($state['revised_files'] as $fid) {
            $files[] = $fid;
          }
        }
        foreach ($files as $fid) {
          if ($fid) {
            $file = file_load($fid);
            tpps_chado_insert_record('projectprop', array(
              'project_id' => $state['ids']['project_id'],
              'type_id' => tpps_load_cvterm('file_path')->cvterm_id,
              'value' => file_create_url($file->uri),
              'rank' => $state['file_rank']++,
            ));
          }
        }
        tpps_update_submission($state);
      }
      catch (\Exception $e) {
        drupal_set_message("skipping accession {$state['accession']}: " . $e->getMessage());
        $transaction->rollback();
      }
      unset($transaction);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Initializes alternative accessions for each submission.
 */
function tpps_update_7110() {
  $transaction = db_transaction();
  try {
    $submissions = tpps_load_submission_multiple();
    foreach ($submissions as $state) {
      $state['alternative_accessions'] = $state['alternative_accessions'] ?? '';
      tpps_update_submission($state);
    }

    if (!db_table_exists('tpps_submission_dbxref')) {
      $schema = tpps_schema();
      db_create_table('tpps_submission_dbxref', $schema['tpps_submission_dbxref']);
      tpps_alter_tpps_submission_dbxref();
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Removes old entries in project_pub linking table for replaced submissions.
 */
function tpps_update_7111() {
  $transaction = db_transaction();
  try {
    db_delete('chado.project_pub')
      ->condition('pub_id', db_query('select distinct(pub_id) from chado.pub_organism'), 'NOT IN')
      ->execute();
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Converts old species page information to new structure.
 */
function tpps_update_7112() {
  $transaction = db_transaction();
  try {
    $submissions = tpps_load_submission_multiple();
    foreach ($submissions as $state) {
      $org_num = $state['saved_values'][TPPS_PAGE_1]['organism']['number'];
      $update = FALSE;
      for ($i = 1; $i <= $org_num; $i++) {
        if (gettype($state['saved_values'][TPPS_PAGE_1]['organism'][$i]) != 'array') {
          $update = TRUE;
          $name = $state['saved_values'][TPPS_PAGE_1]['organism'][$i];
          $state['saved_values'][TPPS_PAGE_1]['organism'][$i] = array();
          $state['saved_values'][TPPS_PAGE_1]['organism'][$i]['name'] = $name;
          $state['saved_values'][TPPS_PAGE_1]['organism'][$i]['is_tree'] = TRUE;
        }
      }
      if ($update) {
        tpps_update_submission($state);
      }
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Add species names to file_info names for existing submissions.
 */
function tpps_update_7113() {
  $transaction = db_transaction();
  $submissions = tpps_load_submission_multiple(array(
    'status' => array('Approved', 'Pending Approval', 'Incomplete'),
  ));
  try {
    foreach ($submissions as $state) {
      $change = FALSE;
      $org_num = 1;
      if (!empty($state['file_info'][TPPS_PAGE_3])) {
        foreach ($state['file_info'][TPPS_PAGE_3] as $fid => $name) {
          if ($name == 'Plant_Accession' or $name == 'Tree_Accession') {
            $species = implode('_', explode(' ', $state['saved_values'][TPPS_PAGE_1]['organism'][$org_num]['name']));
            $state['file_info'][TPPS_PAGE_3][$fid] = "{$name}_{$species}";
            $change = TRUE;
          }
          $org_num++;
        }
      }

      if (!empty($state['file_info'][TPPS_PAGE_4])) {
        foreach ($state['file_info'][TPPS_PAGE_4] as $fid => $name) {
          if (preg_match('/^(.*_)([0-9]+)$/', $name, $matches)) {
            $prefix = $matches[1];
            $org_num = $matches[2];
            $species = implode('_', explode(' ', $state['saved_values'][TPPS_PAGE_1]['organism'][$org_num]['name']));
            $state['file_info'][TPPS_PAGE_4][$fid] = "{$prefix}{$species}";
            $change = TRUE;
          }
        }
      }

      if ($change) {
        tpps_update_submission($state);
        if ($state['status'] == 'Approved') {
          tpps_submission_rename_files($state['accession']);
        }
      }
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Add tpps_project_file_managed table if it does not exist.
 */
function tpps_update_7114() {
  $transaction = db_transaction();
  try {
    if (!db_table_exists('tpps_project_file_managed')) {
      $schema = tpps_schema();
      db_create_table('tpps_project_file_managed', $schema['tpps_project_file_managed']);
      tpps_alter_tpps_project_file_managed();
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Populate tpps_project_file_managed for approved submissions.
 */
function tpps_update_7115() {
  $transaction = db_transaction();
  $submissions = tpps_load_submission_multiple(array(
    'status' => 'Approved',
  ));
  try {
    foreach ($submissions as $state) {
      if (empty($state['ids']['project_id'])) {
        continue;
      }
      $firstpage = $state['saved_values'][TPPS_PAGE_1];
      $thirdpage = $state['saved_values'][TPPS_PAGE_3];
      $fourthpage = $state['saved_values'][TPPS_PAGE_4];

      $fids = array(
        $firstpage['photo'] ?? NULL,
      );

      for ($i = 1; $i <= $firstpage['organism']['number']; $i++) {
        $fids[] = $thirdpage['tree-accession']["species-$i"]['file'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['phenotype']['file'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['phenotype']['metadata'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['phenotype']['iso'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['tripal_fasta']['file_upload'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['tripal_fasta']['file_upload_existing'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['snps-assay'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['snps-association'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['snps-pop-struct'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['snps-kinship'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['assay-design'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['ssrs'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['ssrs_extra'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['indels'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['other'] ?? NULL;
        $fids[] = $fourthpage["organism-$i"]['genotype']['files']['vcf'] ?? NULL;
      }

      foreach ($state['saved_values']['summarypage']['analysis'] as $key => $info) {
        if (substr($key, -5) == '_file' and file_load($info)) {
          $fids[] = $info;
        }
      }

      foreach ($fids as $fid) {
        if (!empty($fid) and file_load($fid)) {
          $query = db_select('tpps_project_file_managed', 't')
            ->fields('t')
            ->condition('fid', $fid)
            ->condition('project_id', $state['ids']['project_id'])
            ->execute();
          $result = $query->fetchObject() ?? NULL;

          if (empty($result)) {
            db_insert('tpps_project_file_managed')
              ->fields(array(
                'project_id' => $state['ids']['project_id'],
                'fid' => $fid,
              ))
              ->execute();
          }

          if (!empty($state['revised_files'][$fid]) and ($file = file_load($state['revised_files'][$fid]))) {
            $query = db_select('tpps_project_file_managed', 't')
              ->fields('t')
              ->condition('fid', $state['revised_files'][$fid])
              ->condition('project_id', $state['ids']['project_id'])
              ->execute();
            $result = $query->fetchObject() ?? NULL;

            if (empty($result)) {
              db_insert('tpps_project_file_managed')
                ->fields(array(
                  'project_id' => $state['ids']['project_id'],
                  'fid' => $state['revised_files'][$fid],
                ))
                ->execute();
            }
          }
        }
      }
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Add TPPS tag tables if they do not exist.
 */
function tpps_update_7116() {
  $transaction = db_transaction();
  try {
    if (!db_table_exists('tpps_tag')) {
      $schema = tpps_schema();
      db_create_table('tpps_tag', $schema['tpps_tag']);
    }
    if (!db_table_exists('tpps_submission_tag')) {
      $schema = tpps_schema();
      db_create_table('tpps_submission_tag', $schema['tpps_submission_tag']);
      tpps_alter_tpps_submission_tag();
    }

    tpps_default_tags();

    $submissions = tpps_load_submission_multiple(array(), FALSE);
    foreach ($submissions as $record) {
      $state = tpps_load_submission($record->accession);
      $tags = tpps_submission_get_tags($state['accession']);
      if (count($tags) == 0) {
        if ((!isset($state['tpps_type']) or $state['tpps_type'] != 'tppsc')) {
          tpps_submission_add_tag($state['accession'], 'TPPS');
        }
        else {
          tpps_submission_add_tag($state['accession'], 'TPPSc');
        }

        if ($state['status'] == 'Approved') {
          $data_type = $state['saved_values'][TPPS_PAGE_2]['data_type'];
          $env_phenotypes = FALSE;
          if (preg_match('/G/', $data_type)) {
            tpps_submission_add_tag($state['accession'], 'Genotype');
          }
          if (preg_match('/P/', $data_type)) {
            tpps_submission_add_tag($state['accession'], 'Phenotype');
            $org_num = $state['saved_values'][TPPS_PAGE_1]['organism']['number'];
            for ($i = 1; $i <= $org_num; $i++) {
              $phenotype_num = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['phenotype']['phenotypes-meta']['number'];
              for ($j = 1; $j <= $phenotype_num; $j++) {
                $info = $state['saved_values'][TPPS_PAGE_4]["organism-$i"]['phenotype']['phenotypes-meta'][$j];
                if ($info['env-check']) {
                  $env_phenotypes = TRUE;
                  break;
                }
              }
            }
          }
          if (preg_match('/E/', $data_type) or $env_phenotypes) {
            tpps_submission_add_tag($state['accession'], 'Environment');
          }
        }
      }
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Adds approx/none coordinate tags to old submissions.
 */
function tpps_update_7117() {
  $transaction = db_transaction();

  try {
    $id = tpps_get_tag_id('No Location Information');
    if (!$id) {
      db_insert('tpps_tag')
        ->fields(array(
          'name' => 'No Location Information',
          'color' => 'pink',
          'static' => 1,
        ))
        ->execute();
    }

    $id = tpps_get_tag_id('Approximate Coordinates');
    if (!$id) {
      db_insert('tpps_tag')
        ->fields(array(
          'name' => 'Approximate Coordinates',
          'color' => 'gray',
          'static' => 1,
        ))
        ->execute();
    }

    $submissions = tpps_load_submission_multiple(array(), FALSE);
    foreach ($submissions as $record) {
      $state = tpps_load_submission($record->accession);

      if (!empty($state['saved_values'][TPPS_PAGE_3]['skip_validation'])) {
        tpps_submission_add_tag($state['accession'], 'No Location Information');
      }

      $org_num = $state['saved_values'][TPPS_PAGE_1]['organism']['number'];
      for ($i = 1; $i <= $org_num; $i++) {
        $species_i = $state['saved_values'][TPPS_PAGE_3]['tree-accession']["species-$i"];
        if (isset($species_i['exact_coords']) and !$species_i['exact_coords']) {
          tpps_submission_add_tag($state['accession'], 'Approximate Coordinates');
          break;
        }
      }
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_update_N().
 *
 * Adds normal-check field to old submissions where applicable.
 */
function tpps_update_7118() {
  $transaction = db_transaction();
  $submissions = tpps_load_submission_multiple(array(), FALSE);

  try {
    foreach ($submissions as $record) {
      $state = tpps_load_submission($record->accession);

      $org_num = $state['saved_values'][TPPS_PAGE_1]['organism']['number'];
      for ($i = 1; $i <= $org_num; $i++) {
        $phenotype = &$state['saved_values'][TPPS_PAGE_4]["organism-$i"]['phenotype'] ?? NULL;
        if (!empty($phenotype)) {
          // If the submission doesn't have iso/mass spec data, then it must be
          // normal phenotype data.
          if (empty($phenotype['iso-check']) and !empty($phenotype['file'])) {
            $phenotype['normal-check'] = TRUE;
          }

          // If the submission does have iso/mass spec data and doesn't have
          // the normal-check field, then it must not have normal phenotypes.
          if (!empty($phenotype['iso-check']) and !array_key_exists('normal-check', $phenotype)) {
            $phenotype['normal-check'] = FALSE;
          }
        }
      };

      tpps_update_submission($state);
    }

  }
  catch (\Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Configure report 'Missing DOI'.
 */
function tpps_update_7119() {
  // [VS] #8669eu6ht.
  // Set initial values of variables.
  variable_set('tpps_report_missing_doi_title', 'Missing DOI');
}

/**
 * Creates table 'tpps_phenotype_unit_warning' and sets variables for reports.
 */
function tpps_update_7120() {
  // [VS] #3kged9b.
  // Set initial values of variables.
  variable_set(
    'tpps_report_no_synonym_title',
    'List of phenotypes without Synonyms'
  );
  variable_set(
    'tpps_report_unit_warning_title',
    'Unit Warning (list of phenotypes which unit differs from Synonym)'
  );
  variable_set(
    'tpps_report_order_family_not_exist_title',
    'Order/Family not exist'
  );
  // Create new db table.
  $table_name = 'tpps_phenotype_unit_warning';
  if (!db_table_exists($table_name)) {
    if ($table_schema = tpps_schema()[$table_name]) {
      $transaction = db_transaction();
      try {
        db_create_table($table_name, $table_schema);
      }
      catch (\Exception $e) {
        $transaction->rollback();
        throw $e;
      }
    }
  }
  cache_clear_all();
}

/**
 * #861n70hh6 Create 'tpps' cache bin, set variables.
 */
function tpps_update_7121() {
  $schema = tpps_schema();
  $table = TPPS_CACHE_BIN;
  if (!db_table_exists($table)) {
    db_create_table($table, $schema[$table]);
  }
  // Page 1 Settings.
  variable_set('tpps_page_1_doi_check_source', 'public.tpps_submissions');
  variable_set('tpps_page_1_cache_ajax_responses', TRUE);
  variable_set('tpps_page_1_dryad_api_url', 'http://datadryad.org/api/v2/datasets/');
  variable_set('tpps_page_1_ajax_debug', FALSE);
  variable_set('tpps_theme', 'default');
  variable_set('tpps_top_bar', 'status');
  // Added new items to 'TPPS' menu.
  menu_rebuild();
}

/**
 * Hotfix: Ability to disable unit/synonym list caching.
 */
function tpps_update_7122() {
  // Page 4 Settings.
  variable_set('tpps_page_4_cache_synonym_list', FALSE);
  variable_set('tpps_page_4_cache_unit_list', FALSE);
  // Front page.
  variable_set('tpps_front_cache_accession_list', TRUE);
}

/**
 * Adds new column 'shared_state' to 'tpps_submission' table.
 */
function tpps_update_7123() {
  $table_name = 'public.tpps_submission';
  $column_name = 'shared_state';
  if (!db_field_exists($table_name, $column_name)) {
    db_query('ALTER TABLE tpps_submission ADD COLUMN shared_state text;');
  }
}
